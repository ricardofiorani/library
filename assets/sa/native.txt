/// Sets the current vector to the sum of two other vectors
function CVector_Add<thiscall, 0x40FDD0>(self: int {CVector}, vector1: int {CVector}, vector2: int {CVector})
/// Initializes a CEntity struct
function CEntity_ctor<thiscall, 0x532A90>(self: int {CEntity}): int {CEntity}
/// Initializes a CVector2D struct
function CVector2D_ctor<thiscall, 0x404360>(self: int {CVector2D}, x: float, y: float): int {CVector2D}
/// Returns true if the point is within a hideout garage
function CGarages_IsPointWithinHideOutGarage<cdecl, 0x448900>(point: int {CVector}): int {bool}
/// Initializes a CVector struct
function CVector_ctor<thiscall, 0x406D20>(self: int {CVector}, x: float, y: float, z: float): int {CVector}
/// Resets the zones revealed to restore the map fog
function CTheZones_ResetZonesRevealed<cdecl, 0x572110>()
/// Clears all stunt jumps so new jumps can be created
function CStuntJumpManager_ShutdownForRestart<cdecl, 0x49CB10>()
/// Starts an offensive gang war
function CGangWars_StartOffensiveGangWar<cdecl, 0x446050>()
/// Starts a defensive gang war
function CGangWars_StartDefensiveGangWar<cdecl, 0x444300>()
/// Ends any offensive or defensive gang wars going on
function CGangWars_EndGangWar<cdecl, 0x4464C0>()
/// Removes all CarGenerators from the specified iplStream
function CTheCarGenerators_RemoveCarGenerators<cdecl, 0x6F3240>(iplStream: int)
function C_PcSave_PopulateSlotInfo<thiscall, 0x619140>(self: int {C_PcSave})
function C_PcSave_DeleteSlot<thiscall, 0x6190D0>(self: int {C_PcSave}, slot: int): int
function C_PcSave_SaveSlot<thiscall, 0x619060>(self: int {C_PcSave}, slot: int): int
function C_PcSave_SetSaveDirectory<cdecl, 0x619040>(path: int)
function C3dMarker_AddMarker<thiscall, 0x722230>(self: int {C3dMarker}, id: int, type: int, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int): int
function C3dMarker_DeleteMarkerObject<thiscall, 0x722390>(self: int {C3dMarker})
function C3dMarker_IsZCoordinateUpToDate<thiscall, 0x7226A0>(self: int {C3dMarker}): int
function C3dMarker_Render<thiscall, 0x7223D0>(self: int {C3dMarker})
function C3dMarker_SetZCoordinateIfNotUpToDate<thiscall, 0x724E10>(self: int {C3dMarker}, coordinate: float)
function C3dMarker_UpdateZCoordinate<thiscall, 0x724D40>(self: int {C3dMarker}, arg0: int {CVector}, arg1: float)
function C3dMarkers_DirectionArrowFindFirstFreeSlot<cdecl, 0x721120>(): int
function C3dMarkers_DirectionArrowSet<cdecl, 0x721140>(posn: int {CVector}, size: float, red: int, green: int, blue: int, alpha: int, dirX: float, dirY: float, dirZ: float)
function C3dMarkers_DirectionArrowsDraw<cdecl, 0x7211F0>()
function C3dMarkers_DirectionArrowsInit<cdecl, 0x721100>()
function C3dMarkers_ForceRender<cdecl, 0x722870>(bEnable: int)
function C3dMarkers_Init<cdecl, 0x724E40>()
function C3dMarkers_LoadMarker<cdecl, 0x722810>(modelName: int): int
function C3dMarkers_LoadUser3dMarkers<cdecl, 0x5D42E0>(): int
function C3dMarkers_PlaceMarker<cdecl, 0x725120>(id: int, type: int, posn: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int, nrmX: float, nrmY: float, nrmZ: float, zCheck: int {bool}): int
function C3dMarkers_PlaceMarkerCone<cdecl, 0x726D40>(id: int, posn: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int, bEnableCollision: int)
function C3dMarkers_PlaceMarkerSet<cdecl, 0x725BA0>(id: int, type: int, posn: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int)
function C3dMarkers_Render<cdecl, 0x725040>()
function C3dMarkers_SaveUser3dMarkers<cdecl, 0x5D4300>()
function C3dMarkers_Shutdown<cdecl, 0x722710>()
function C3dMarkers_Update<cdecl, 0x7227B0>()
function C3dMarkers_User3dMarkerAtomicCB<cdecl, 0x7210D0>(atomic: int, data: int): int
function C3dMarkers_User3dMarkerDelete<cdecl, 0x721090>(slotIndex: int)
function C3dMarkers_User3dMarkerDeleteAll<cdecl, 0x7210B0>()
function C3dMarkers_User3dMarkerFindFirstFreeSlot<cdecl, 0x720FB0>(): int
function C3dMarkers_User3dMarkerSet<cdecl, 0x720FD0>(x: float, y: float, z: float, colour: int): int
function C3dMarkers_User3dMarkersDraw<cdecl, 0x723240>()
function CAEAudioHardware_GetActiveTrackID<thiscall, 0x4D8F80>(self: int {CAEAudioHardware}): int
function CAECutsceneTrackManager_StopCutsceneTrack<thiscall, 0x4DBE80>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_StartTrackPlayback<thiscall, 0x4DBF10>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_Service<thiscall, 0x4DBFB0>(self: int {CAECutsceneTrackManager}, time: int)
function CAECutsceneTrackManager_PreloadBeatTrack<thiscall, 0x4DC130>(self: int {CAECutsceneTrackManager}, arg1: int {char}, arg2: int {bool})
function CAECutsceneTrackManager_PlayPreloadedCutsceneTrack<thiscall, 0x4DBE70>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_IsCutsceneTrackActive<thiscall, 0x4DBEB0>(self: int {CAECutsceneTrackManager}): int
function CAECutsceneTrackManager_GetCutsceneTrackStatus<thiscall, 0x4DBEC0>(self: int {CAECutsceneTrackManager}): int
function CAERadioTrackManager_StartRadio<thiscall, 0x4EB3C0>(self: int {CAERadioTrackManager}, stationId: int, bass: float, arg: int, unused: int {char})
function CAERadioTrackManager_StopRadio<thiscall, 0x4E9820>(self: int {CAERadioTrackManager}, settings: int, arg: int {char})
function CAEStreamThread_Initialise<thiscall, 0x4F1680>(self: int {CAEStreamThread}): int
function CAEStreamThread_GetActiveTrackID<thiscall, 0x4F1560>(self: int {CAEStreamThread}): int
function CAEWeaponAudioEntity_CAEWeaponAudioEntity<thiscall, 0x507560>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_WeaponReload<thiscall, 0x503690>(self: int {CAEWeaponAudioEntity}, weaptype: int {eWeaponType}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_WeaponFire<thiscall, 0x504F80>(self: int {CAEWeaponAudioEntity}, weaptype: int {eWeaponType}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_Terminate<thiscall, 0x503480>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_StopFlameThrowerIdleGasLoop<thiscall, 0x5034E0>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_Reset<thiscall, 0x503490>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_ReportStealthKill<thiscall, 0x503B20>(self: int {CAEWeaponAudioEntity}, weaptype: int {eWeaponType}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_ReportChainsawEvent<thiscall, 0x503910>(self: int {CAEWeaponAudioEntity}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_PlayWeaponLoopSound<thiscall, 0x504610>(self: int {CAEWeaponAudioEntity}, arg0: int, sfxId: int, audioEventId: int, audability: float, speed: float, finalEvent: int)
function CAEWeaponAudioEntity_PlayMiniGunStopSound<thiscall, 0x504960>(self: int {CAEWeaponAudioEntity}, entity: int)
function CAEWeaponAudioEntity_PlayMiniGunFireSounds<thiscall, 0x5047C0>(self: int {CAEWeaponAudioEntity}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_PlayGunSounds<thiscall, 0x503CE0>(self: int {CAEWeaponAudioEntity}, entity: int, emptySfxId: int, farSfxId2: int, highPitchSfxId3: int, lowPitchSfxId4: int, echoSfxId5: int, nAudioEventId: int, volumeChange: float, speed1: float, speed2: float)
function CAEWeaponAudioEntity_PlayGoggleSound<thiscall, 0x503500>(self: int {CAEWeaponAudioEntity}, sfxId: int, audioEventId: int)
function CAEWeaponAudioEntity_PlayFlameThrowerSounds<thiscall, 0x504470>(self: int {CAEWeaponAudioEntity}, entity: int, sfx1: int, sfx2: int, audioEventId: int, audability: float, speed: float)
function CAEWeaponAudioEntity_PlayFlameThrowerIdleGasLoop<thiscall, 0x503870>(self: int {CAEWeaponAudioEntity}, entity: int)
function CAEWeaponAudioEntity_PlayChainsawStopSound<thiscall, 0x504AA0>(self: int {CAEWeaponAudioEntity}, entity: int)
function CAEWeaponAudioEntity_PlayCameraSound<thiscall, 0x5046F0>(self: int {CAEWeaponAudioEntity}, entity: int, audioEventId: int, audability: float)
function CAEWeaponAudioEntity_Initialise<thiscall, 0x503450>(self: int {CAEWeaponAudioEntity})
function CAnimatedBuilding_CAnimatedBuilding<thiscall, 0x537A10>(self: int {CAnimatedBuilding})
/// Initializes a CAnimBlendAssocGroup struct
function CAnimBlendAssocGroup_ctor<thiscall, 0x4CDE70>(self: int {CAnimBlendAssocGroup}): int {CAnimBlendAssocGroup}
function CAnimBlendAssocGroup_CopyAnimation<thiscall, 0x4CE0B0>(self: int {CAnimBlendAssocGroup}, animName: int): int
function CAnimBlendAssocGroup_CopyAnimation<thiscall, 0x4CE130>(self: int {CAnimBlendAssocGroup}, id: int): int
function CAnimBlendAssocGroup_CreateAssociations<thiscall, 0x4CE220>(self: int {CAnimBlendAssocGroup}, szBlockName: int)
function CAnimBlendAssocGroup_CreateAssociations<thiscall, 0x4CE6E0>(self: int {CAnimBlendAssocGroup}, animName: int, pClump: int, arg3: int, numAnimations: int)
function CAnimBlendAssocGroup_CreateAssociations<thiscall, 0x4CE3B0>(self: int {CAnimBlendAssocGroup}, animName: int, arg2: int, arg3: int, arg4: int)
function CAnimBlendAssocGroup_DestroyAssociations<thiscall, 0x4CDFF0>(self: int {CAnimBlendAssocGroup})
function CAnimBlendAssocGroup_GetAnimation<thiscall, 0x4CE040>(self: int {CAnimBlendAssocGroup}, animName: int): int
function CAnimBlendAssocGroup_GetAnimation<thiscall, 0x4CE090>(self: int {CAnimBlendAssocGroup}, id: int): int
function CAnimBlendAssocGroup_GetAnimationId<thiscall, 0x4CE1B0>(self: int {CAnimBlendAssocGroup}, animName: int): int
function CAnimBlendAssocGroup_InitEmptyAssociations<thiscall, 0x4CDFB0>(self: int {CAnimBlendAssocGroup}, pClump: int)
/// Deinitializes the CAnimBlendAssocGroup struct
function CAnimBlendAssocGroup_dtor<thiscall, 0x4CE1D0>(self: int {CAnimBlendAssocGroup})
function CAnimBlendAssociation_AllocateAnimBlendNodeArray<thiscall, 0x4CE9F0>(self: int {CAnimBlendAssociation}, count: int)
function CAnimBlendAssociation_FreeAnimBlendNodeArray<thiscall, 0x4CEA40>(self: int {CAnimBlendAssociation})
function CAnimBlendAssociation_GetNode<thiscall, 0x4CEB60>(self: int {CAnimBlendAssociation}, nodeIndex: int): int
function CAnimBlendAssociation_Init<thiscall, 0x4CEEC0>(self: int {CAnimBlendAssociation}, clump: int, hierarchy: int)
function CAnimBlendAssociation_Init<thiscall, 0x4CEEC0>(self: int {CAnimBlendAssociation}, source: int)
function CAnimBlendAssociation_Init<thiscall, 0x4CEEC0>(self: int {CAnimBlendAssociation}, source: int)
function CAnimBlendAssociation_ReferenceAnimBlock<thiscall, 0x4CEA50>(self: int {CAnimBlendAssociation})
function CAnimBlendAssociation_SetBlend<thiscall, 0x4CEBA0>(self: int {CAnimBlendAssociation}, blendAmount: int, blendDelta: int)
function CAnimBlendAssociation_SetBlendTo<thiscall, 0x4CEB80>(self: int {CAnimBlendAssociation}, blendAmount: int, blendDelta: int)
function CAnimBlendAssociation_SetCurrentTime<thiscall, 0x4CEA80>(self: int {CAnimBlendAssociation}, currentTime: int)
function CAnimBlendAssociation_SetDeleteCallback<thiscall, 0x4CEBC0>(self: int {CAnimBlendAssociation}, callback: int, data: int)
function CAnimBlendAssociation_SetFinishCallback<thiscall, 0x4CEBE0>(self: int {CAnimBlendAssociation}, callback: int, data: int)
function CAnimBlendAssociation_Start<thiscall, 0x4CEB70>(self: int {CAnimBlendAssociation}, currentTime: int)
function CAnimBlendAssociation_SyncAnimation<thiscall, 0x4CEB40>(self: int {CAnimBlendAssociation}, syncWith: int)
function CAnimBlendAssociation_UpdateBlend<thiscall, 0x4D1490>(self: int {CAnimBlendAssociation}, blendDeltaMult: float): int
function CAnimBlendAssociation_UpdateTime<thiscall, 0x4D13D0>(self: int {CAnimBlendAssociation}, unused1: float, unused2: float): int
function CAnimBlendAssociation_UpdateTimeStep<thiscall, 0x4D13A0>(self: int {CAnimBlendAssociation}, speedMult: int, timeMult: int)
function CAnimBlendClumpData_ForAllFrames<thiscall, 0x4CF190>(self: int {CAnimBlendClumpData}, callback: int, data: int)
function CAnimBlendClumpData_ForAllFramesInSPR<thiscall, 0x4CF1E0>(self: int {CAnimBlendClumpData}, callback: int, data: int, a3: int)
function CAnimBlendClumpData_LoadFramesIntoSPR<thiscall, 0x4CF1D0>(self: int {CAnimBlendClumpData})
function CAnimBlendClumpData_SetNumberOfBones<thiscall, 0x4CF140>(self: int {CAnimBlendClumpData}, numBones: int)
function CAnimBlendHierarchy_AllocSequenceBlock<thiscall, 0x4CF510>(self: int {CAnimBlendHierarchy}, arg1: int {bool}): int
function CAnimBlendHierarchy_CAnimBlendHierarchy<thiscall, 0x4CF270>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_CalcTotalTime<thiscall, 0x4CF2F0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_CalcTotalTimeCompressed<thiscall, 0x4CF3E0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_RemoveAnimSequences<thiscall, 0x4CF8E0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_RemoveQuaternionFlips<thiscall, 0x4CF4E0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_RemoveUncompressedData<thiscall, 0x4CF760>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_SetName<thiscall, 0x4CF2D0>(self: int {CAnimBlendHierarchy}, string: int)
function CAnimBlendHierarchy_Shutdown<thiscall, 0x4CF980>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_Uncompress<thiscall, 0x4CF5F0>(self: int {CAnimBlendHierarchy})
function CAnimBlendNode_CalcDeltas<thiscall, 0x4D0190>(self: int {CAnimBlendNode})
function CAnimBlendNode_CalcDeltasCompressed<thiscall, 0x4D0350>(self: int {CAnimBlendNode})
function CAnimBlendNode_FindKeyFrame<thiscall, 0x4D0240>(self: int {CAnimBlendNode}, arg1: float): int
function CAnimBlendNode_GetCurrentTranslation<thiscall, 0x4CFC50>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_GetCurrentTranslationCompressed<thiscall, 0x4CFE60>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_GetEndTranslation<thiscall, 0x4CFD90>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_GetEndTranslationCompressed<thiscall, 0x4D0000>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_Init<thiscall, 0x4CFB70>(self: int {CAnimBlendNode})
function CAnimBlendNode_NextKeyFrame<thiscall, 0x4D04A0>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_NextKeyFrameCompressed<thiscall, 0x4D0570>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_NextKeyFrameNoCalc<thiscall, 0x4CFB90>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_SetupKeyFrameCompressed<thiscall, 0x4D0650>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_Update<thiscall, 0x4D06C0>(self: int {CAnimBlendNode}, vector: int {CVector&}, qauternion: int {CQuaternion&}, arg3: float): int
function CAnimBlendNode_UpdateCompressed<thiscall, 0x4D08D0>(self: int {CAnimBlendNode}, vector: int {CVector&}, quaternion: int {CQuaternion&}, arg3: float): int
/// Initializes a CAnimBlendSequence struct
function CAnimBlendSequence_CAnimBlendSequence<thiscall, 0x4D0C10>(self: int {CAnimBlendSequence}): int {CAnimBlendSequence}
function CAnimBlendSequence_CompressKeyframes<thiscall, 0x4D0F40>(self: int {CAnimBlendSequence}, arg1: int)
function CAnimBlendSequence_GetDataSize<thiscall, 0x4D0C90>(self: int {CAnimBlendSequence}, arg1: int {bool}): int
function CAnimBlendSequence_MoveMemorY<thiscall, 0x4D1150>(self: int {CAnimBlendSequence}): int
function CAnimBlendSequence_RemoveQuaternionFlips<thiscall, 0x4D1190>(self: int {CAnimBlendSequence}): int
function CAnimBlendSequence_RemoveUncompressedData<thiscall, 0x4D12A0>(self: int {CAnimBlendSequence}, arg1: int)
function CAnimBlendSequence_SetBoneTag<thiscall, 0x4D0C70>(self: int {CAnimBlendSequence}, hash: int)
function CAnimBlendSequence_SetName<thiscall, 0x4D0C50>(self: int {CAnimBlendSequence}, string: int)
function CAnimBlendSequence_SetNumFrames<thiscall, 0x4D0CD0>(self: int {CAnimBlendSequence}, count: int, arg2: int {bool}, arg3: int {bool}, arg4: int)
function CAnimBlendSequence_Uncompress<thiscall, 0x4D0D40>(self: int {CAnimBlendSequence}, arg1: int)
/// Deinitializes the CAnimBlendSequence struct
function CAnimBlendSequence_dtor<thiscall, 0x4D0C30>(self: int {CAnimBlendSequence})
function CAnimBlendStaticAssociation_AllocateSequenceArray<thiscall, 0x4CE960>(self: int {CAnimBlendStaticAssociation}, count: int)
function CAnimBlendStaticAssociation_FreeSequenceArray<thiscall, 0x4CE9A0>(self: int {CAnimBlendStaticAssociation})
function CAnimBlendStaticAssociation_Init<thiscall, 0x4CEC20>(self: int {CAnimBlendStaticAssociation}, clump: int, hierarchy: int)
function CAnimManager_GetAnimationBlock<cdecl, 0x4D3940>(name: int): int
function CAnimManager_GetAnimationBlockIndex<cdecl, 0x4D3990>(name: int): int
function CAnimManager_GetFirstAssocGroup<cdecl, 0x4D39B0>(basename: int): int
function CAnimManager_GetAnimation<cdecl, 0x4D39F0>(hash: int, ifp: int): int
function CAnimManager_GetAnimation<cdecl, 0x4D42F0>(animName: int, ifp: int): int
function CAnimManager_GetAnimGroupName<cdecl, 0x4D3A20>(assocGroupId: int): int
function CAnimManager_GetAnimBlockName<cdecl, 0x4D3A30>(assocGroupId: int): int
function CAnimManager_CreateAnimAssociation<cdecl, 0x4D3A40>(assocGroupId: int, animationId: int): int
function CAnimManager_GetAnimAssociation<cdecl, 0x4D3A60>(assocGroupId: int, animationId: int): int
function CAnimManager_GetAnimAssociation<cdecl, 0x4D3A80>(assocGroupId: int, arg2: int): int
function CAnimManager_AddAnimation<cdecl, 0x4D3AA0>(clump: int, assocGroupId: int, animationId: int): int
function CAnimManager_AddAnimation<cdecl, 0x4D4330>(clump: int, pAnimBlendHier: int, clumpAssocFlag: int): int
function CAnimManager_AddAnimationAndSync<cdecl, 0x4D3B30>(clump: int, pAnimBlendAssoc: int, assocGroupId: int, animationId: int): int
function CAnimManager_AddAnimAssocDefinition<cdecl, 0x4D3BA0>(groupName: int, blockName: int, arg3: int, animsCount: int, pAnimDescriptor: int): int
function CAnimManager_AddAnimToAssocDefinition<cdecl, 0x4D3C80>(pAnimAssocDefinition: int, arg2: int): int
function CAnimManager_CreateAnimAssocGroups<cdecl, 0x4D3CC0>()
function CAnimManager_RegisterAnimBlock<cdecl, 0x4D3E50>(name: int): int
function CAnimManager_RemoveLastAnimFile<cdecl, 0x4D3ED0>()
function CAnimManager_RemoveAnimBlock<cdecl, 0x4D3F40>(index: int)
function CAnimManager_AddAnimBlockRef<cdecl, 0x4D3FB0>(index: int)
function CAnimManager_RemoveAnimBlockRef<cdecl, 0x4D3FD0>(index: int)
function CAnimManager_RemoveAnimBlockRefWithoutDelete<cdecl, 0x4D3FF0>(index: int)
function CAnimManager_GetNumRefsToAnimBlock<cdecl, 0x4D4010>(index: int): int
function CAnimManager_Shutdown<cdecl, 0x4D4130>()
function CAnimManager_UncompressAnimation<cdecl, 0x4D41C0>(pAnimBlendHier: int)
function CAnimManager_RemoveFromUncompressedCache<cdecl, 0x4D42A0>(pAnimBlendHier: int)
function CAnimManager_BlendAnimation<cdecl, 0x4D4410>(clump: int, pAnimBlendHier: int, flags: int, clumpAssocBlendData: float): int
function CAnimManager_BlendAnimation<cdecl, 0x4D4610>(clump: int, assocGroupId: int, animationId: int, clumpAssocBlendData: float): int
function CAnimManager_LoadAnimFile<cdecl, 0x4D47F0>(stream: int, arg1: int {bool}, string: int)
function CAnimManager_LoadAnimFiles<cdecl, 0x4D5620>()
function CAnimManager_ReadAnimAssociationDefinitions<cdecl, 0x5BC910>()
function CAnimManager_Initialise<cdecl, 0x5BF6B0>()
function CAudioEngine_Initialise<thiscall, 0x5B9C60>(self: int {CAudioEngine})
function CAudioEngine_Restart<thiscall, 0x506DB0>(self: int {CAudioEngine})
function CAudioEngine_Shutdown<thiscall, 0x507CB0>(self: int {CAudioEngine})
function CAudioEngine_SetEffectsMasterVolume<thiscall, 0x506E10>(self: int {CAudioEngine}, volume: int {char})
function CAudioEngine_SetMusicMasterVolume<thiscall, 0x506DE0>(self: int {CAudioEngine}, volume: int {char})
function CAudioEngine_SetBassEnhanceOnOff<thiscall, 0x506F90>(self: int {CAudioEngine}, on: int {bool})
function CAudioEngine_SetRadioAutoRetuneOnOff<thiscall, 0x506F80>(self: int {CAudioEngine}, on: int {bool})
function CAudioEngine_RetuneRadio<thiscall, 0x507E10>(self: int {CAudioEngine}, stationId: int {char})
function CAudioEngine_ReportFrontendAudioEvent<thiscall, 0x506EA0>(self: int {CAudioEngine}, id: int, volume: float, speed: float): int
function CAudioEngine_ReportMissionAudioEvent<thiscall, 0x507340>(self: int {CAudioEngine}, audioEvent: int {eAudioEvents}, coords: int)
function CAudioEngine_Service<thiscall, 0x507750>(self: int {CAudioEngine})
function CAudioEngine_ServiceLoadingTune<thiscall, 0x5078A0>(self: int {CAudioEngine}, fade: float)
function CAudioEngine_StartRadio<thiscall, 0x507DC0>(self: int {CAudioEngine}, radioStation: int, arg: int {char})
function CAudioEngine_StopRadio<thiscall, 0x506F70>(self: int {CAudioEngine}, settings: int, arg: int {bool})
function CAudioEngine_IsRadioRetuneInProgress<thiscall, 0x506FF0>(self: int {CAudioEngine}): int
function CAudioEngine_IsLoadingTuneActive<thiscall, 0x506D90>(self: int {CAudioEngine}): int
function CAudioEngine_IsRadioOn<thiscall, 0x506FD0>(self: int {CAudioEngine}): int
function CAudioEngine_IsAmbienceTrackActive<thiscall, 0x507210>(self: int {CAudioEngine}): int
function CAudioEngine_StartLoadingTune<thiscall, 0x507410>(self: int {CAudioEngine}): int
function CAudioEngine_GetCurrentRadioStationID<thiscall, 0x507040>(self: int {CAudioEngine}): int
function CAudioEngine_IsVehicleRadioActive<thiscall, 0x507050>(self: int {CAudioEngine}): int
function CAudioEngine_InitialisePostLoading<thiscall, 0x5078F0>(self: int {CAudioEngine})
function CBaseModelInfo_GetIsDrawLast<thiscall, 0x5328C0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_HasBeenPreRendered<thiscall, 0x5328B0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_HasComplexHierarchy<thiscall, 0x4C4E00>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsBackfaceCulled<thiscall, 0x5328F0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsBreakableStatuePart<thiscall, 0x59F090>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsLod<thiscall, 0x4C4A00>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsRoad<thiscall, 0x4C4DF0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsTagModel<thiscall, 0x49CC20>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_SwaysInWind<thiscall, 0x4212C0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_SetHasBeenPreRendered<thiscall, 0x4C42F0>(self: int {CBaseModelInfo}, bHasBeenPreRendered: int)
function CBaseModelInfo_SetIsLod<thiscall, 0x4C4A10>(self: int {CBaseModelInfo}, bIsLod: int)
function CBaseModelInfo_SetOwnsColModel<thiscall, 0x5328D0>(self: int {CBaseModelInfo}, bOwns: int)
function CBaseModelInfo_IncreaseAlpha<thiscall, 0x532900>(self: int {CBaseModelInfo})
function CBirds_Init<cdecl, 0x711EC0>()
function CBirds_CreateNumberOfBirds<cdecl, 0x711EF0>(pos: int {CVector}, destination: int {CVector}, count: int, birdType: int, checkObstacles: int {bool}): int
function CBirds_Shutdown<cdecl, 0x712300>()
function CBirds_Update<cdecl, 0x712330>()
function CBirds_Render<cdecl, 0x712810>()
function CBirds_HandleGunShot<cdecl, 0x712E40>(pointA: int, pointB: int)
function CBouncingPanel_ResetPanel<thiscall, 0x6F4910>(self: int {CBouncingPanel})
function CBouncingPanel_SetPanel<thiscall, 0x6F4920>(self: int {CBouncingPanel}, frameId: int, axis: int, angleLimit: float)
function CBouncingPanel_ProcessPanel<thiscall, 0x6F49A0>(self: int {CBouncingPanel}, vehicle: int {CVehicle}, frame: int, arg2: int {CVector}, arg3: int {CVector}, arg4: float, arg5: float)
function CBoundingBox_CBoundingBox<thiscall, 0x40FAF0>(self: int {CBoundingBox})
function CBrightLights_RenderOutGeometryBuffer<cdecl, 0x722150>()
function CBrightLights_Render<cdecl, 0x7241C0>()
function CBrightLights_RegisterOne<cdecl, 0x724770>(posn: int {CVector}, top: int {CVector}, right: int {CVector}, at: int {CVector}, color: int, arg5: int, arg6: int, arg7: int)
function CBrightLights_Init<cdecl, 0x722140>()
function CBuilding_operator new<cdecl, 0x404090>(size: int): int
function CBuilding_operator delete<cdecl, 0x4040A0>(data: int)
function CBuilding_CBuilding<thiscall, 0x403E00>(self: int {CBuilding})
function CBulletInfo_Initialise<cdecl, 0x735FD0>()
function CBulletInfo_Shutdown<cdecl, 0x736000>()
function CBulletInfo_AddBullet<cdecl, 0x736010>(creator: int, weaponType: int {eWeaponType}, position: int {CVector}, velocity: int {CVector}): int
function CBulletInfo_Update<cdecl, 0x7360D0>()
function CBulletTrace_Update<thiscall, 0x721D70>(self: int {CBulletTrace})
function CBulletTraces_AddTrace<cdecl, 0x726AF0>(start: int, end: int, weaponType: int, entity: int)
function CBulletTraces_Init<cdecl, 0x721D50>()
function CCamera_AddShakeSimple<thiscall, 0x50D240>(self: int {CCamera}, duration: int, type: int, intensity: int)
function CCamera_AllowShootingWith2PlayersInCar<thiscall, 0x50C280>(self: int {CCamera}, bAllowShootingWith2PlayersInCar: int)
function CCamera_ApplyVehicleCameraTweaks<thiscall, 0x50A480>(self: int {CCamera}, vehicle: int {CVehicle})
function CCamera_AvoidTheGeometry<thiscall, 0x514030>(self: int {CCamera}, arg2: int, arg3: int, arg4: int, fov: int)
function CCamera_CalculateDerivedValues<thiscall, 0x5150E0>(self: int {CCamera}, bForMirror: int, bOriented: int)
function CCamera_CalculateFrustumPlanes<thiscall, 0x514D60>(self: int {CCamera}, bForMirror: int)
function CCamera_CalculateGroundHeight<thiscall, 0x514B80>(self: int {CCamera}, type: int): float
function CCamera_CalculateMirroredMatrix<thiscall, 0x50B380>(self: int {CCamera}, posn: int, mirrorV: int, camMat: int, mirrorMat: int)
function CCamera_CamControl<thiscall, 0x527FA0>(self: int {CCamera})
function CCamera_CamShake<thiscall, 0x50A9F0>(self: int {CCamera}, arg2: int, x: int, y: int, z: int)
function CCamera_CameraColDetAndReact<thiscall, 0x520190>(self: int {CCamera}, source: int, target: int): int
function CCamera_CameraGenericModeSpecialCases<thiscall, 0x50CD30>(self: int {CCamera}, targetPed: int)
function CCamera_CameraPedAimModeSpecialCases<thiscall, 0x50CDA0>(self: int {CCamera}, targPed: int)
function CCamera_CameraPedModeSpecialCases<thiscall, 0x50CD80>(self: int {CCamera})
function CCamera_CameraVehicleModeSpecialCases<thiscall, 0x50CDE0>(self: int {CCamera}, targVehicle: int)
function CCamera_ClearPlayerWeaponMode<thiscall, 0x50AB10>(self: int {CCamera})
function CCamera_ConeCastCollisionResolve<thiscall, 0x51A5D0>(self: int {CCamera}, source: int, center: int, pVecOut: int, radius: float, arg5: float, pFloatOut: int): int
function CCamera_ConsiderPedAsDucking<thiscall, 0x50CEB0>(self: int {CCamera}, ped: int): int
function CCamera_CopyCameraMatrixToRWCam<thiscall, 0x50AFA0>(self: int {CCamera}, bUpdateMatrix: int)
function CCamera_DealWithMirrorBeforeConstructRenderList<thiscall, 0x50B510>(self: int {CCamera}, bActiveMirror: int, mirrorNormal: int, mirrorV: int, matMirror: int)
function CCamera_DeleteCutSceneCamDataMemory<thiscall, 0x5B24A0>(self: int {CCamera})
function CCamera_DrawBordersForWideScreen<thiscall, 0x514860>(self: int {CCamera})
function CCamera_Enable1rstPersonCamCntrlsScript<thiscall, 0x50AC00>(self: int {CCamera})
function CCamera_Enable1rstPersonWeaponsCamera<thiscall, 0x50AC10>(self: int {CCamera})
function CCamera_Fade<thiscall, 0x50AC20>(self: int {CCamera}, fadeDuration: int, fadeInOutFlag: int)
function CCamera_Find3rdPersonCamTargetVector<thiscall, 0x514970>(self: int {CCamera}, range: int, source: int, pCamera: int, pPoint: int)
function CCamera_Find3rdPersonQuickAimPitch<thiscall, 0x50AD40>(self: int {CCamera}): float
function CCamera_FindCamFOV<thiscall, 0x50AD20>(self: int {CCamera}): float
function CCamera_FinishCutscene<thiscall, 0x514950>(self: int {CCamera})
function CCamera_GetArrPosForVehicleType<thiscall, 0x50AF00>(self: int {CCamera}, type: int, arrPos: int)
function CCamera_GetCutSceneFinishTime<thiscall, 0x50AD90>(self: int {CCamera}): int
function CCamera_GetFading<thiscall, 0x50ADE0>(self: int {CCamera}): int
function CCamera_GetFadingDirection<thiscall, 0x50ADF0>(self: int {CCamera}): int
function CCamera_GetGameCamPosition<thiscall, 0x50AE50>(self: int {CCamera}): int
function CCamera_GetLookDirection<thiscall, 0x50AE90>(self: int {CCamera}): int
function CCamera_GetLookingForwardFirstPerson<thiscall, 0x50AED0>(self: int {CCamera}): int
function CCamera_GetLookingLRBFirstPerson<thiscall, 0x50AE60>(self: int {CCamera}): int
function CCamera_GetPositionAlongSpline<thiscall, 0x50AF80>(self: int {CCamera}): float
function CCamera_GetRoughDistanceToGround<thiscall, 0x516B00>(self: int {CCamera}): float
function CCamera_GetScreenFadeStatus<thiscall, 0x50AE20>(self: int {CCamera}): int
function CCamera_GetScreenRect<thiscall, 0x50AB50>(self: int {CCamera}, pRect: int)
function CCamera_Get_Just_Switched_Status<thiscall, 0x50AE10>(self: int {CCamera}): int
function CCamera_HandleCameraMotionForDucking<thiscall, 0x50CFA0>(self: int {CCamera}, ped: int, source: int, targPosn: int, arg5: int)
function CCamera_HandleCameraMotionForDuckingDuringAim<thiscall, 0x50D090>(self: int {CCamera}, ped: int, source: int, targPosn: int, arg5: int)
function CCamera_ImproveNearClip<thiscall, 0x516B20>(self: int {CCamera}, pVehicle: int {CVehicle}, pPed: int, source: int, targPosn: int)
function CCamera_Init<thiscall, 0x5BC520>(self: int {CCamera})
function CCamera_InitCameraVehicleTweaks<thiscall, 0x50A3B0>(self: int {CCamera})
function CCamera_InitialiseScriptableComponents<thiscall, 0x50D2D0>(self: int {CCamera}): int
function CCamera_IsExtraEntityToIgnore<thiscall, 0x50CE80>(self: int {CCamera}, entity: int): int
function CCamera_IsItTimeForNewcam<thiscall, 0x51D770>(self: int {CCamera}, camSequence: int, startTime: int): int
function CCamera_IsSphereVisible<thiscall, 0x420D40>(self: int {CCamera}, origin: int {CVector const &}, radius: float, transformMatrix: int): int
function CCamera_IsSphereVisible<thiscall, 0x420D40>(self: int {CCamera}, origin: int {CVector const &}, radius: float): int
function CCamera_LerpFOV<thiscall, 0x50D280>(self: int {CCamera}, zoomInFactor: int, zoomOutFactor: int, timelimit: int, bEase: int)
function CCamera_LoadPathSplines<thiscall, 0x5B24D0>(self: int {CCamera}, pFile: int)
function CCamera_Process<thiscall, 0x52B730>(self: int {CCamera})
function CCamera_ProcessFOVLerp<thiscall, 0x516500>(self: int {CCamera}, ratio: int)
function CCamera_ProcessFOVLerp<thiscall, 0x516500>(self: int {CCamera})
function CCamera_ProcessFade<thiscall, 0x50B5D0>(self: int {CCamera})
function CCamera_ProcessMusicFade<thiscall, 0x50B6D0>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraBoat<thiscall, 0x526E20>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraCar<thiscall, 0x5267C0>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraHeli<thiscall, 0x526AE0>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraPed<thiscall, 0x50B880>(self: int {CCamera}): int
function CCamera_ProcessObbeCinemaCameraPlane<thiscall, 0x526C80>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraTrain<thiscall, 0x526950>(self: int {CCamera})
function CCamera_ProcessScriptedCommands<thiscall, 0x516AE0>(self: int {CCamera})
function CCamera_ProcessShake<thiscall, 0x51A6F0>(self: int {CCamera}, jiggleIntensity: int)
function CCamera_ProcessShake<thiscall, 0x51A6F0>(self: int {CCamera})
function CCamera_ProcessVectorMoveLinear<thiscall, 0x5164A0>(self: int {CCamera}, ratio: int)
function CCamera_ProcessVectorMoveLinear<thiscall, 0x5164A0>(self: int {CCamera})
function CCamera_ProcessVectorTrackLinear<thiscall, 0x516440>(self: int {CCamera}, ratio: int)
function CCamera_ProcessVectorTrackLinear<thiscall, 0x516440>(self: int {CCamera})
function CCamera_ProcessWideScreenOn<thiscall, 0x50B890>(self: int {CCamera})
function CCamera_RenderMotionBlur<thiscall, 0x50B8F0>(self: int {CCamera})
function CCamera_ResetDuckingSystem<thiscall, 0x50CEF0>(self: int {CCamera}, ped: int)
function CCamera_Restore<thiscall, 0x50B930>(self: int {CCamera})
function CCamera_RestoreCameraAfterMirror<thiscall, 0x51A5A0>(self: int {CCamera})
function CCamera_RestoreWithJumpCut<thiscall, 0x50BAB0>(self: int {CCamera})
function CCamera_SetCamCutSceneOffSet<thiscall, 0x50BD20>(self: int {CCamera}, cutsceneOffset: int)
function CCamera_SetCamPositionForFixedMode<thiscall, 0x50BEC0>(self: int {CCamera}, fixedModeSource: int, fixedModeUpOffset: int)
function CCamera_SetCameraDirectlyBehindForFollowPed_CamOnAString<thiscall, 0x50BD40>(self: int {CCamera})
function CCamera_SetCameraDirectlyBehindForFollowPed_ForAPed_CamOnAString<thiscall, 0x50BDA0>(self: int {CCamera}, targetPed: int)
function CCamera_SetCameraUpForMirror<thiscall, 0x51A560>(self: int {CCamera})
function CCamera_SetFadeColour<thiscall, 0x50BF00>(self: int {CCamera}, red: int, green: int, blue: int)
function CCamera_SetMotionBlur<thiscall, 0x50BF40>(self: int {CCamera}, red: int, green: int, blue: int, value: int, blurtype: int)
function CCamera_SetMotionBlurAlpha<thiscall, 0x50BF80>(self: int {CCamera}, alpha: int)
function CCamera_SetNearClipBasedOnPedCollision<thiscall, 0x50CB90>(self: int {CCamera}, arg2: int)
function CCamera_SetNearClipScript<thiscall, 0x50BF90>(self: int {CCamera}, nearClip: int)
function CCamera_SetNewPlayerWeaponMode<thiscall, 0x50BFB0>(self: int {CCamera}, mode: int, maxZoom: int, minZoom: int)
function CCamera_SetParametersForScriptInterpolation<thiscall, 0x50C030>(self: int {CCamera}, interpolationToStopMoving: int, interpolationToCatchUp: int, timeForInterPolation: int)
function CCamera_SetPercentAlongCutScene<thiscall, 0x50C070>(self: int {CCamera}, percent: int)
function CCamera_SetRwCamera<thiscall, 0x50C100>(self: int {CCamera}, rwcamera: int)
function CCamera_SetWideScreenOff<thiscall, 0x50C150>(self: int {CCamera})
function CCamera_SetWideScreenOn<thiscall, 0x50C140>(self: int {CCamera})
function CCamera_SetZoomValueCamStringScript<thiscall, 0x50C1B0>(self: int {CCamera}, zoomMode: int)
function CCamera_SetZoomValueFollowPedScript<thiscall, 0x50C160>(self: int {CCamera}, zoomMode: int)
function CCamera_StartCooperativeCamMode<thiscall, 0x50C260>(self: int {CCamera})
function CCamera_StartTransition<thiscall, 0x515200>(self: int {CCamera}, currentCamMode: int)
function CCamera_StartTransitionWhenNotFinishedInter<thiscall, 0x515BC0>(self: int {CCamera}, currentCamMode: int)
function CCamera_StopCooperativeCamMode<thiscall, 0x50C270>(self: int {CCamera})
function CCamera_StoreValuesDuringInterPol<thiscall, 0x50C290>(self: int {CCamera}, sourceDuringInter: int, targetDuringInter: int, upDuringInter: int, fovDuringInter: int)
function CCamera_TakeControl<thiscall, 0x50C7C0>(self: int {CCamera}, target: int, modeToGoTo: int, typeOfSwitch: int, whoIsInControlOfTheCamera: int)
function CCamera_TakeControlAttachToEntity<thiscall, 0x50C910>(self: int {CCamera}, target: int, attached: int, attachedCamOffset: int, attachedCamLookAt: int, attachedCamAngle: int, typeOfSwitch: int, whoIsInControlOfTheCamera: int)
function CCamera_TakeControlNoEntity<thiscall, 0x50C8B0>(self: int {CCamera}, fixedModeVector: int, typeOfSwitch: int, whoIsInControlOfTheCamera: int)
function CCamera_TakeControlWithSpline<thiscall, 0x50CAE0>(self: int {CCamera}, typeOfSwitch: int)
function CCamera_TryToStartNewCamMode<thiscall, 0x51E560>(self: int {CCamera}, camSequence: int): int
function CCamera_UpdateAimingCoors<thiscall, 0x50CB10>(self: int {CCamera}, aimingTargetCoors: int)
function CCamera_UpdateSoundDistances<thiscall, 0x515BD0>(self: int {CCamera})
function CCamera_UpdateTargetEntity<thiscall, 0x50C360>(self: int {CCamera})
function CCamera_Using1stPersonWeaponMode<thiscall, 0x50BFF0>(self: int {CCamera}): int
function CCamera_VectorMoveLinear<thiscall, 0x50D160>(self: int {CCamera}, moveLinearPosnEnd: int, moveLinearPosnStart: int, duration: int, bMoveLinearWithEase: int)
function CCamera_VectorMoveRunning<thiscall, 0x4748A0>(self: int {CCamera}): int
function CCamera_VectorTrackLinear<thiscall, 0x50D1D0>(self: int {CCamera}, trackLinearStartPoint: int, trackLinearEndPoint: int, duration: int, bEase: int)
function CCamera_VectorTrackRunning<thiscall, 0x474870>(self: int {CCamera}): int
function CCarAI_BackToCruisingIfNoWantedLevel<cdecl, 0x41BFA0>(pVehicle: int {CVehicle})
function CCarAI_CarHasReasonToStop<cdecl, 0x41C050>(pVehicle: int {CVehicle})
function CCarAI_AddPoliceCarOccupants<cdecl, 0x41C070>(pVehicle: int {CVehicle}, arg2: int {bool})
function CCarAI_AddAmbulanceOccupants<cdecl, 0x41C4A0>(pVehicle: int {CVehicle})
function CCarAI_AddFiretruckOccupants<cdecl, 0x41C600>(pVehicle: int {CVehicle})
function CCarAI_TellOccupantsToLeaveCar<cdecl, 0x41C760>(pVehicle: int {CVehicle})
function CCarAI_TellCarToFollowOtherCar<cdecl, 0x41C960>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, radius: float)
function CCarAI_FindPoliceBikeMissionForWantedLevel<cdecl, 0x41CA40>(): int
function CCarAI_FindPoliceBoatMissionForWantedLevel<cdecl, 0x41CA50>(): int
function CCarAI_FindPoliceCarSpeedForWantedLevel<cdecl, 0x41CAA0>(pVehicle: int {CVehicle}): int
function CCarAI_GetCarToGoToCoors<cdecl, 0x41CE30>(pVehicle1: int {CVehicle}, pVector: int, drivingStyle: int, bSpeedLimit20: int {bool}): float
function CCarAI_GetCarToParkAtCoors<cdecl, 0x41D350>(pVehicle: int {CVehicle}, pVector: int): float
function CCarAI_MellowOutChaseSpeed<cdecl, 0x41D3D0>(pVehicle: int {CVehicle})
function CCarAI_MakeWayForCarWithSiren<cdecl, 0x41D660>(pVehicle: int {CVehicle})
function CCarAI_UpdateCarAI<cdecl, 0x41DA30>(pVehicle: int {CVehicle})
function CCarAI_FindPoliceCarMissionForWantedLevel<cdecl, 0x41C9D0>(): int
function CCarCtrl_ChooseBoatModel<cdecl, 0x421970>(): int
function CCarCtrl_ChooseCarModelToLoad<cdecl, 0x421900>(arg1: int): int
function CCarCtrl_ChooseGangCarModel<cdecl, 0x421A40>(arg1: int): int
function CCarCtrl_ChooseModel<cdecl, 0x424CE0>(arg1: int): int
function CCarCtrl_ChoosePoliceCarModel<cdecl, 0x421980>(arg0: int): int
function CCarCtrl_ClearInterestingVehicleList<cdecl, 0x423F00>()
function CCarCtrl_ClipTargetOrientationToLink<cdecl, 0x422760>(pVehicle: int {CVehicle}, arg2: int {CCarPathLinkAddress}, arg3: int {char}, arg4: int, arg5: float, arg6: float)
function CCarCtrl_CreateCarForScript<cdecl, 0x431F80>(modelid: int, posn: int {CVector}, missionCleanUpFlag: int): int
function CCarCtrl_CreateConvoy<cdecl, 0x42C740>(pVehicle: int {CVehicle}, arg2: int): int
function CCarCtrl_CreatePoliceChase<cdecl, 0x42C2B0>(pVehicle: int {CVehicle}, arg2: int, nodeAddress: int {CNodeAddress}): int
function CCarCtrl_DealWithBend_Racing<cdecl, 0x428040>(pVehicle: int {CVehicle}, linkAddress1: int {CCarPathLinkAddress}, linkAddress2: int {CCarPathLinkAddress}, linkAddress3: int {CCarPathLinkAddress}, linkAddress4: int {CCarPathLinkAddress}, arg6: int {char}, arg7: int {char}, arg8: int {char}, arg9: int {char}, arg10: float, arg11: int, arg12: int, arg13: int, arg14: int, pVector: int): int
function CCarCtrl_DragCarToPoint<cdecl, 0x42EC90>(pVehicle: int {CVehicle}, pVector: int)
function CCarCtrl_FindAngleToWeaveThroughTraffic<cdecl, 0x4325C0>(pVehicle: int {CVehicle}, pPhysical: int, arg3: float, arg4: float, arg5: float): float
function CCarCtrl_FindIntersection2Lines<cdecl, 0x4226F0>(arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: int, arg10: int)
function CCarCtrl_FindLinksToGoWithTheseNodes<cdecl, 0x42B470>(pVehicle: int {CVehicle})
function CCarCtrl_FindMaximumSpeedForThisCarInTraffic<cdecl, 0x434400>(pVehicle: int {CVehicle}): float
function CCarCtrl_FindNodesThisCarIsNearestTo<cdecl, 0x42BD20>(pVehicle: int {CVehicle}, nodeAddress1: int {CNodeAddress&}, nodeAddress2: int {CNodeAddress&})
function CCarCtrl_FindPathDirection<cdecl, 0x422090>(nodeAddress1: int {CNodeAddress}, nodeAddress2: int {CNodeAddress}, nodeAddress3: int {CNodeAddress}, arg4: int): int
function CCarCtrl_FindPercDependingOnDistToLink<cdecl, 0x422620>(pVehicle: int {CVehicle}, linkAddress: int {CCarPathLinkAddress}): float
function CCarCtrl_FindSequenceElement<cdecl, 0x421770>(arg1: int): int
function CCarCtrl_FindSpeedMultiplier<cdecl, 0x4224E0>(arg1: float, arg2: float, arg3: float, arg4: float): float
function CCarCtrl_FindSpeedMultiplierWithSpeedFromNodes<cdecl, 0x424130>(arg1: int {char}): float
function CCarCtrl_FireHeliRocketsAtTarget<cdecl, 0x42B270>(pEntityLauncher: int, pEntity: int)
function CCarCtrl_FlyAIHeliInCertainDirection<cdecl, 0x429A70>(pHeli: int, arg2: float, arg3: float, arg4: int {bool})
function CCarCtrl_FlyAIHeliToTarget_FixedOrientation<cdecl, 0x423940>(pHeli: int, orientation: float, posn: int {CVector})
function CCarCtrl_FlyAIPlaneInCertainDirection<cdecl, 0x423000>(pPlane: int)
function CCarCtrl_GenerateCarCreationCoors2<cdecl, 0x424210>(posn: int {CVector}, radius: float, arg3: float, arg4: float, arg5: int {bool}, arg6: float, arg7: float, pOrigin: int, pNodeAddress1: int, pNodeAddress12: int, arg11: int, arg12: int {bool}, arg13: int {bool}): int
function CCarCtrl_GenerateEmergencyServicesCar<cdecl, 0x42F9C0>()
function CCarCtrl_GenerateOneEmergencyServicesCar<cdecl, 0x42B7D0>(modelId: int, posn: int {CVector}): int
function CCarCtrl_GenerateOneRandomCar<cdecl, 0x430050>()
function CCarCtrl_GenerateRandomCars<cdecl, 0x4341C0>()
function CCarCtrl_GetAIHeliToAttackPlayer<cdecl, 0x42F3C0>(pAutomobile: int)
function CCarCtrl_GetAIHeliToFlyInDirection<cdecl, 0x42A730>(pAutomobile: int)
function CCarCtrl_GetAIPlaneToAttackPlayer<cdecl, 0x429780>(pAutomobile: int)
function CCarCtrl_GetAIPlaneToDoDogFight<cdecl, 0x429890>(pAutomobile: int)
function CCarCtrl_GetAIPlaneToDoDogFightAgainstPlayer<cdecl, 0x42F370>(pAutomobile: int)
function CCarCtrl_GetNewVehicleDependingOnCarModel<cdecl, 0x421440>(modelId: int, createdBy: int): int
function CCarCtrl_Init<cdecl, 0x4212E0>()
function CCarCtrl_InitSequence<cdecl, 0x421740>(sequenceElements: int)
function CCarCtrl_IsAnyoneParking<cdecl, 0x42C250>(): int
function CCarCtrl_IsThisAnAppropriateNode<cdecl, 0x42DAB0>(pVehicle: int {CVehicle}, nodeAddress1: int {CNodeAddress}, nodeAddress2: int {CNodeAddress}, nodeAddress3: int {CNodeAddress}, arg5: int {bool}): int
function CCarCtrl_IsThisVehicleInteresting<cdecl, 0x423EA0>(pVehicle: int {CVehicle}): int
function CCarCtrl_JoinCarWithRoadAccordingToMission<cdecl, 0x432CB0>(pVehicle: int {CVehicle})
function CCarCtrl_JoinCarWithRoadSystem<cdecl, 0x42F5A0>(pVehicle: int {CVehicle})
function CCarCtrl_JoinCarWithRoadSystemGotoCoors<cdecl, 0x42F870>(pVehicle: int {CVehicle}, posn: int {CVector const&}, unused: int {bool}, bIsBoat: int {bool}): int
function CCarCtrl_PickNextNodeAccordingStrategy<cdecl, 0x432B10>(pVehicle: int {CVehicle}): int
function CCarCtrl_PickNextNodeRandomly<cdecl, 0x42DE80>(pVehicle: int {CVehicle})
function CCarCtrl_PickNextNodeToChaseCar<cdecl, 0x426EF0>(pVehicle: int {CVehicle}, xDest: float, yDest: float, zDest: float): int
function CCarCtrl_PickNextNodeToFollowPath<cdecl, 0x427740>(pVehicle: int {CVehicle}): int
function CCarCtrl_PossiblyFireHSMissile<cdecl, 0x429600>(pEntityLauncher: int, pTargetEntity: int)
function CCarCtrl_PossiblyRemoveVehicle<cdecl, 0x424F80>(pVehicle: int {CVehicle})
function CCarCtrl_PruneVehiclesOfInterest<cdecl, 0x423F10>()
function CCarCtrl_ReInit<cdecl, 0x4213B0>()
function CCarCtrl_ReconsiderRoute<cdecl, 0x42FC40>(pVehicle: int {CVehicle})
function CCarCtrl_RegisterVehicleOfInterest<cdecl, 0x423DE0>(pVehicle: int {CVehicle})
function CCarCtrl_RemoveCarsIfThePoolGetsFull<cdecl, 0x4322B0>()
function CCarCtrl_RemoveDistantCars<cdecl, 0x42CD10>()
function CCarCtrl_RemoveFromInterestingVehicleList<cdecl, 0x423ED0>(pVehicle: int {CVehicle})
function CCarCtrl_ScanForPedDanger<cdecl, 0x42CE40>(pVehicle: int {CVehicle})
function CCarCtrl_ScriptGenerateOneEmergencyServicesCar<cdecl, 0x42FBC0>(modelId: int, posn: int {CVector}): int
function CCarCtrl_SetCoordsOfScriptCar<cdecl, 0x4342A0>(pVehicle: int {CVehicle}, x: float, y: float, z: float, arg5: int, arg6: int)
function CCarCtrl_SetUpDriverAndPassengersForVehicle<cdecl, 0x4217C0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int {bool}, arg5: int {bool}, passengersNum: int)
function CCarCtrl_SlowCarDownForCarsSectorList<cdecl, 0x432420>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: float)
function CCarCtrl_SlowCarDownForObject<cdecl, 0x426220>(pEntity: int, pVehicle: int {CVehicle}, arg3: int, arg4: float)
function CCarCtrl_SlowCarDownForObjectsSectorList<cdecl, 0x42D4F0>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: float)
function CCarCtrl_SlowCarDownForOtherCar<cdecl, 0x42D0E0>(pCar1: int, pCar2: int, arg3: int, arg4: float)
function CCarCtrl_SlowCarDownForPedsSectorList<cdecl, 0x425440>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: float)
function CCarCtrl_SlowCarOnRailsDownForTrafficAndLights<cdecl, 0x434790>(pVehicle: int {CVehicle})
function CCarCtrl_SteerAIBoatWithPhysicsAttackingPlayer<cdecl, 0x428DE0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAIBoatWithPhysicsCirclingPlayer<cdecl, 0x429090>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAIBoatWithPhysicsHeadingForTarget<cdecl, 0x428BE0>(pVehicle: int {CVehicle}, arg2: float, arg3: float, arg4: int, arg5: int, arg6: int)
function CCarCtrl_SteerAICarBlockingPlayerForwardAndBack<cdecl, 0x422B20>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarParkParallel<cdecl, 0x433BA0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarParkPerpendicular<cdecl, 0x433EA0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarTowardsPointInEscort<cdecl, 0x4336D0>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, arg3: float, arg4: float, arg5: int, arg6: int, arg7: int, arg8: int)
function CCarCtrl_SteerAICarWithPhysics<cdecl, 0x437C20>(pVehicle: int {CVehicle})
function CCarCtrl_SteerAICarWithPhysicsFollowPath<cdecl, 0x434900>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarWithPhysicsFollowPath_Racing<cdecl, 0x435830>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarWithPhysicsFollowPreRecordedPath<cdecl, 0x432DD0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarWithPhysicsHeadingForTarget<cdecl, 0x433280>(pVehicle: int {CVehicle}, pTarget: int, arg3: float, arg4: float, arg5: int, arg6: int, arg7: int, arg8: int)
function CCarCtrl_SteerAICarWithPhysicsTryingToBlockTarget<cdecl, 0x4335E0>(pVehicle: int {CVehicle}, unusued: int, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: int, arg9: int, arg10: int)
function CCarCtrl_SteerAICarWithPhysicsTryingToBlockTarget_Stop<cdecl, 0x428990>(pVehicle: int {CVehicle}, x: float, y: float, arg4: float, arg5: float, arg6: int, arg7: int, arg8: int, arg9: int)
function CCarCtrl_SteerAICarWithPhysics_OnlyMission<cdecl, 0x436A90>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAIHeliAsPoliceHeli<cdecl, 0x42AAD0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliFlyingAwayFromPlayer<cdecl, 0x42ACB0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToCrashAndBurn<cdecl, 0x4238E0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToFollowEntity<cdecl, 0x42A750>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToKeepEntityInView<cdecl, 0x42AEB0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToLand<cdecl, 0x42AD30>(pAutomobile: int)
function CCarCtrl_SteerAIHeliTowardsTargetCoors<cdecl, 0x42A630>(pAutomobile: int)
function CCarCtrl_SteerAIPlaneToCrashAndBurn<cdecl, 0x423880>(pAutomobile: int)
function CCarCtrl_SteerAIPlaneToFollowEntity<cdecl, 0x4237F0>(pAutomobile: int)
function CCarCtrl_SteerAIPlaneTowardsTargetCoors<cdecl, 0x423790>(pAutomobile: int)
function CCarCtrl_StopCarIfNodesAreInvalid<cdecl, 0x422590>(pVehicle: int {CVehicle}): int
function CCarCtrl_SwitchBetweenPhysicsAndGhost<cdecl, 0x4222A0>(pVehicle: int {CVehicle})
function CCarCtrl_SwitchVehicleToRealPhysics<cdecl, 0x423FC0>(pVehicle: int {CVehicle})
function CCarCtrl_TestCollisionBetween2MovingRects<cdecl, 0x425B30>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, arg3: float, arg4: float, pVector1: int, pVector2: int): float
function CCarCtrl_TestCollisionBetween2MovingRects_OnlyFrontBumper<cdecl, 0x425F70>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, arg3: float, arg4: float, pVector1: int, pVector2: int): float
function CCarCtrl_TestWhetherToFirePlaneGuns<cdecl, 0x429520>(pVehicle: int {CVehicle}, pTarget: int)
function CCarCtrl_ThisVehicleShouldTryNotToTurn<cdecl, 0x421FE0>(pVehicle: int {CVehicle}): int
function CCarCtrl_TriggerDogFightMoves<cdecl, 0x429300>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle})
function CCarCtrl_UpdateCarCount<cdecl, 0x424000>(pVehicle: int {CVehicle}, bDecrease: int)
function CCarCtrl_UpdateCarOnRails<cdecl, 0x436540>(pVehicle: int {CVehicle})
function CCarCtrl_WeaveForObject<cdecl, 0x426BC0>(pEntity: int, pVehicle: int {CVehicle}, arg3: int, arg4: int)
function CCarCtrl_WeaveForOtherCar<cdecl, 0x426350>(pEntity: int, pVehicle: int {CVehicle}, arg3: int, arg4: int)
function CCarCtrl_WeaveThroughCarsSectorList<cdecl, 0x42D680>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, pPhysical: int, arg4: float, arg5: float, arg6: float, arg7: float, arg8: int, arg9: int)
function CCarCtrl_WeaveThroughObjectsSectorList<cdecl, 0x42D950>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: int)
function CCarCtrl_WeaveThroughPedsSectorList<cdecl, 0x42D7E0>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, pPhysical: int, arg4: float, arg5: float, arg6: float, arg7: float, arg8: int, arg9: int)
function CCarEnterExit_CarHasDoorToClose<cdecl, 0x64EE10>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_CarHasDoorToOpen<cdecl, 0x64EDD0>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_CarHasOpenableDoor<cdecl, 0x64EE50>(vehicle: int {CVehicle}, doorIdUnusedArg: int, ped: int): int
function CCarEnterExit_CarHasPartiallyOpenDoor<cdecl, 0x64EE70>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_ComputeDoorFlag<cdecl, 0x64E550>(vehicle: int {CVehicle}, doorId: int, bCheckVehicleType: int {bool}): int
function CCarEnterExit_ComputeOppositeDoorFlag<cdecl, 0x64E610>(vehicle: int {CVehicle}, doorId: int, bCheckVehicleType: int {bool}): int
function CCarEnterExit_ComputePassengerIndexFromCarDoor<cdecl, 0x64F1E0>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_ComputeSlowJackedPed<cdecl, 0x64F070>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_ComputeTargetDoorToEnterAsPassenger<cdecl, 0x64F190>(pVehicle: int {CVehicle}, nPassengerNum: int): int
function CCarEnterExit_ComputeTargetDoorToExit<cdecl, 0x64F110>(pVehicle: int {CVehicle}, pPed: int): int
function CCarEnterExit_GetNearestCarDoor<cdecl, 0x6528F0>(pPed: int, pVehicle: int {CVehicle}, outPos: int, doorId: int): int
function CCarEnterExit_GetNearestCarPassengerDoor<cdecl, 0x650BB0>(ped: int, vehicle: int {CVehicle}, outVec: int, doorId: int, flag1: int {bool}, flag2: int {bool}, flag3: int {bool}): int
function CCarEnterExit_GetPositionToOpenCarDoor<cdecl, 0x64E740>(out: int, vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_IsCarDoorInUse<cdecl, 0x64EC90>(vehicle: int {CVehicle}, door1Id: int, door2Id: int): int
function CCarEnterExit_IsCarDoorReady<cdecl, 0x64ED90>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_IsCarQuickJackPossible<cdecl, 0x64EF00>(vehicle: int {CVehicle}, doorId: int, ped: int): int
function CCarEnterExit_IsCarSlowJackRequired<cdecl, 0x64EF70>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_IsClearToDriveAway<cdecl, 0x6509B0>(outVehicle: int): int
function CCarEnterExit_IsPathToDoorBlockedByVehicleCollisionModel<cdecl, 0x651210>(ped: int, vehicle: int {CVehicle}, pos: int): int
function CCarEnterExit_IsPedHealthy<cdecl, 0x64EEE0>(vehicle: int {CVehicle}): int
function CCarEnterExit_IsPlayerToQuitCarEnter<cdecl, 0x64F240>(ped: int, vehicle: int {CVehicle}, startTime: int, task: int): int
function CCarEnterExit_IsRoomForPedToLeaveCar<cdecl, 0x6504C0>(veh: int, doorId: int, pos: int): int
function CCarEnterExit_IsVehicleHealthy<cdecl, 0x64EEC0>(vehicle: int {CVehicle}): int
function CCarEnterExit_IsVehicleStealable<cdecl, 0x6510D0>(vehicle: int {CVehicle}, ped: int): int
function CCarGenerator_CheckForBlockage<thiscall, 0x6F32E0>(self: int {CCarGenerator}, modelId: int): int
function CCarGenerator_CheckIfWithinRangeOfAnyPlayers<thiscall, 0x6F2F40>(self: int {CCarGenerator}): int
function CCarGenerator_DoInternalProcessing<thiscall, 0x6F34D0>(self: int {CCarGenerator})
function CCarGenerator_Process<thiscall, 0x6F3E90>(self: int {CCarGenerator})
function CCarGenerator_Setup<thiscall, 0x6F2E50>(self: int {CCarGenerator}, x: int, y: int, z: int, angle: int, modelId: int, color1: int, color2: int, bforceSpawn: int, alarmChances: int, doorLockChances: int, minDelay: int, maxDelay: int, iplId: int, bOwnedbyplayer: int)
function CCarGenerator_SwitchOff<thiscall, 0x6F2E30>(self: int {CCarGenerator})
function CCarGenerator_SwitchOn<thiscall, 0x6F32C0>(self: int {CCarGenerator})
function CCarGenerator_CalcNextGen<cdecl, 0x6F2E40>(): int
function CCarGenerator_Get<cdecl, 0x479D60>(index: int): int
function CCarPathLink_OneWayLaneOffset<thiscall, 0x44DB00>(self: int {CCarPathLink}): float
/// Spawns a vehicle of this model in front of the player
function CCheat_VehicleCheat<cdecl, 0x43A0B0>(vehicleModelId: int): int
function CCheat_ResetCheats<cdecl, 0x438450>()
function CCheckpoint_Render<thiscall, 0x725C00>(self: int {CCheckpoint})
function CCheckpoints_DeleteCP<cdecl, 0x722FC0>(id: int, type: int)
function CCheckpoints_Init<cdecl, 0x722880>()
function CCheckpoints_PlaceMarker<cdecl, 0x722C40>(id: int, type: int, posn: int {CVector&}, direction: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int): int
function CCheckpoints_Render<cdecl, 0x726060>()
function CCheckpoints_SetHeading<cdecl, 0x722970>(id: int, angle: float)
function CCheckpoints_Shutdown<cdecl, 0x7228F0>()
function CCheckpoints_Update<cdecl, 0x7229C0>()
function CCheckpoints_UpdatePos<cdecl, 0x722900>(id: int, posn: int {CVector&})
function CClock_GetGameClockMinutesUntil<cdecl, 0x52CEB0>(hours: int, minutes: int): int
function CClock_GetIsTimeInRange<cdecl, 0x52CEE0>(hourA: int, hourB: int): int
function CClothes_ConstructPedModel<cdecl, 0x5A81E0>(modelid: int, newclothes: int {CPedClothesDesc&}, oldclothes: int, bCutscenePlayer: int {bool})
function CClothes_RequestMotionGroupAnims<cdecl, 0x5A8120>()
function CClothes_RebuildPlayerIfNeeded<cdecl, 0x5A8390>(player: int)
function CClothes_RebuildPlayer<cdecl, 0x5A82C0>(player: int, bIgnoreFatAndMuscle: int {bool})
function CClothes_RebuildCutscenePlayer<cdecl, 0x5A8270>(player: int, modelid: int)
function CClothes_LoadClothesFile<cdecl, 0x5A7B30>()
function CClothes_Init<cdecl, 0x5A80D0>()
function CClothes_GetPlayerMotionGroupToLoad<cdecl, 0x5A7FB0>(): int
function CClothes_GetDefaultPlayerMotionGroup<cdecl, 0x5A81B0>(): int
function CClothesBuilder_BlendTextures<cdecl, 0x5A5BC0>(texture1: int, texture2: int, texture3: int, factorA: float, factorB: float, factorC: float, arg7: int, texture4: int)
function CClothesBuilder_BlendTextures<cdecl, 0x5A59C0>(texture1: int, texture2: int, texture3: int, factorA: float, factorB: float, factorC: float)
function CClothesBuilder_BlendTextures<cdecl, 0x5A5820>(texture1: int, texture2: int, arg3: float, arg4: float)
function CClothesBuilder_BuildBoneIndexConversionTable<cdecl, 0x5A56E0>(arg1: int, arg2: int, arg3: int)
function CClothesBuilder_ConstructGeometryAndSkinArrays<cdecl, 0x5A6530>(arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int)
function CClothesBuilder_ConstructGeometryArray<cdecl, 0x5A55A0>(arg1: int, arg2: int, arg3: float, arg4: float, arg5: float)
function CClothesBuilder_ConstructTextures<cdecl, 0x5A6040>(dict: int, hashes: int, factorA: float, factorB: float, factorC: float)
function CClothesBuilder_CopyTexture<cdecl, 0x5A5730>(texture: int): int
function CClothesBuilder_CreateSkinnedClump<cdecl, 0x5A69D0>(clump: int, dict: int, newclothes: int {CPedClothesDesc&}, oldclothes: int, bCutscenePlayer: int {bool}): int
function CClothesBuilder_DestroySkinArrays<cdecl, 0x5A56C0>(arg1: int, arg2: int)
function CClothesBuilder_FindNearestColour<cdecl, 0x5A5F40>(color: int): int
function CClothesBuilder_InitPaletteOctTree<cdecl, 0x5A5EB0>(numColors: int)
function CClothesBuilder_LoadCdDirectory<cdecl, 0x5A4190>()
function CClothesBuilder_PlaceTextureOnTopOfTexture<cdecl, 0x5A57B0>(texture1: int, texture2: int)
function CClothesBuilder_PreprocessClothesDesc<cdecl, 0x5A44C0>(arg1: int {CPedClothesDesc&}, arg2: int {bool})
function CClothesBuilder_ReducePaletteSize<cdecl, 0x5A6870>(texture: int, numColorsToReduce: int)
function CClothesBuilder_ReleaseGeometry<cdecl, 0x5A47B0>(numToRelease: int)
function CClothesBuilder_RequestGeometry<thiscall, 0x5A41C0>(self: int {CClothesBuilder}, modelid: int, crc: int)
function CClothesBuilder_StoreBoneArray<cdecl, 0x5A48B0>(clump: int, arg2: int)
function CClothesBuilder_BlendGeometry<cdecl, 0x5A4940>(clump: int, arg2: int, arg3: int, arg4: int, arg5: float, arg6: float, arg7: float): int
function CClothesBuilder_BlendGeometry<cdecl, 0x5A4F10>(clump: int, arg2: int, arg3: int, arg4: float, arg5: float): int
function CClothesBuilder_CopyGeometry<cdecl, 0x5A5340>(clump: int, arg2: int, arg3: int): int
function CClothesBuilder_ShutdownPaletteOctTree<cdecl, 0x5A5EE0>()
function CClothesBuilder_ReducePaletteOctTree<cdecl, 0x5A5EF0>(numColorsToReduce: int)
function CClothesBuilder_AddColour<cdecl, 0x5A5F00>(color: int): int
function CClothesBuilder_FillPalette<cdecl, 0x5A5F30>(color: int)
function CClouds_Shutdown<cdecl, 0x712FA0>()
function CClouds_Update<cdecl, 0x712FF0>()
function CClouds_SetUpOneSkyPoly<cdecl, 0x713060>(vert1Pos: int {CVector}, vert2Pos: int {CVector}, vert3Pos: int {CVector}, vert4Pos: int {CVector}, topRed: int, topGreen: int, topBlue: int, bottomRed: int, bottomGreen: int, bottomBlue: int)
function CClouds_VolumetricCloudsInit<cdecl, 0x7131C0>()
function CClouds_VolumetricClouds_GetFirstFreeSlot<cdecl, 0x7135C0>(): int
function CClouds_VolumetricClouds_Delete<cdecl, 0x7135F0>(vcSlotIndex: int)
function CClouds_VolumetricCloudsGetMaxDistance<cdecl, 0x713630>(): float
function CClouds_MovingFogInit<cdecl, 0x713660>()
function CClouds_MovingFog_GetFXIntensity<cdecl, 0x7136D0>(): float
function CClouds_MovingFog_GetFirstFreeSlot<cdecl, 0x713710>(): int
function CClouds_MovingFog_Delete<cdecl, 0x713730>(fogSlotIndex: int)
function CClouds_MovingFog_Create<cdecl, 0x713760>(posn: int)
function CClouds_Init<cdecl, 0x7138D0>()
function CClouds_Render<cdecl, 0x713950>()
function CClouds_RenderSkyPolys<cdecl, 0x714650>()
function CClouds_RenderBottomFromHeight<cdecl, 0x7154B0>()
function CClouds_VolumetricClouds_Create<cdecl, 0x715F40>(posn: int)
function CClouds_VolumetricCloudsRender<cdecl, 0x716380>()
function CClouds_MovingFog_Update<cdecl, 0x716B10>()
function CClouds_MovingFogRender<cdecl, 0x716C90>()
function CClumpModelInfo_SetFrameIds<thiscall, 0x4C5460>(self: int {CClumpModelInfo}, data: int)
function CColAccel_IsCacheLoading<cdecl, 0x5B2AC0>(): int
function CColDisk_Set<thiscall, 0x40FD50>(self: int {CColDisk}, startRadius: float, start: int {CVector const&}, end: int {CVector const&}, endRadius: float, material: int, pieceType: int, lighting: int)
function CCollision_Update<cdecl, 0x411E20>()
function CCollision_SortOutCollisionAfterLoad<cdecl, 0x411E30>()
function CCollision_TestSphereSphere<cdecl, 0x411E70>(sphere1: int {CColSphere const&}, sphere2: int {CColSphere const&}): int
function CCollision_TestSphereBox<cdecl, 0x4120C0>(sphere: int {CSphere const&}, box: int {CBox const&}): int
function CCollision_ProcessSphereBox<cdecl, 0x412130>(sphere: int {CColSphere const&}, box: int {CColBox const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_PointInTriangle<cdecl, 0x412700>(point: int {CVector const&}, triPoints: int): int
function CCollision_DistToLineSqr<cdecl, 0x412850>(lineStart: int, lineEnd: int, point: int): float
function CCollision_DistToMathematicalLine<cdecl, 0x412970>(lineStart: int, lineEnd: int, point: int): float
function CCollision_DistToMathematicalLine2D<cdecl, 0x412A30>(lineStartX: float, lineStartY: float, lineEndX: float, lineEndY: float, pointX: float, pointY: float): float
function CCollision_DistAlongLine2D<cdecl, 0x412A80>(lineX: float, lineY: float, lineDirX: float, lineDirY: float, pointX: float, pointY: float): float
function CCollision_ProcessLineSphere<cdecl, 0x412AA0>(line: int {CColLine const&}, sphere: int {CColSphere const&}, colPoint: int {CColPoint&}, depth: int {float&}): int
function CCollision_TestLineBox_DW<cdecl, 0x412C70>(line: int {CColLine const&}, box: int {CBox const&}): int
function CCollision_TestLineBox<cdecl, 0x413070>(line: int {CColLine const&}, box: int {CBox const&}): int
function CCollision_TestVerticalLineBox<cdecl, 0x413080>(line: int {CColLine const&}, box: int {CBox const&}): int
function CCollision_ProcessLineBox<cdecl, 0x413100>(line: int {CColLine const&}, box: int {CColBox const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_Test2DLineAgainst2DLine<cdecl, 0x4138D0>(line1StartX: float, line1StartY: float, line1EndX: float, line1EndY: float, line2StartX: float, line2StartY: float, line2EndX: float, line2EndY: float): int
function CCollision_TestLineTriangle<cdecl, 0x413AC0>(line: int {CColLine const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}): int
function CCollision_ProcessLineTriangle<cdecl, 0x4140F0>(line: int {CColLine const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, collPoly: int): int
function CCollision_ProcessVerticalLineTriangle<cdecl, 0x4147E0>(line: int {CColLine const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, collPoly: int): int
function CCollision_IsStoredPolyStillValidVerticalLine<cdecl, 0x414D70>(lineOrigin: int {CVector const&}, lineDist: float, colPoint: int {CColPoint&}, collPoly: int): int
function CCollision_GetBoundingBoxFromTwoSpheres<cdecl, 0x415230>(bbox: int, sphere1: int, sphere2: int)
function CCollision_IsThisVehicleSittingOnMe<cdecl, 0x4152C0>(vehicle: int {CVehicle}, vehicleOnMe: int {CVehicle}): int
function CCollision_CheckCameraCollisionPeds<cdecl, 0x415320>(sectorX: int, sectorY: int, pos: int, dir: int, arg4: int): int
function CCollision_CheckPeds<cdecl, 0x4154A0>(pos: int, dir: int, arg2: int): int
function CCollision_SphereCastVsBBox<cdecl, 0x415590>(sphere1: int, sphere2: int, box: int): int
function CCollision_RayPolyPOP<cdecl, 0x415620>(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): int
function CCollision_GetPrincipleAxis<cdecl, 0x4156D0>(vec: int): int
function CCollision_PointInPoly<cdecl, 0x415730>(point: int, tri: int, arg2: int, triVerts: int): int
function CCollision_Closest3<cdecl, 0x415950>(arg0: int, arg1: int)
function CCollision_SphereCastVersusVsPoly<cdecl, 0x415CF0>(sphere1: int, sphere2: int, tri: int, triPlane: int, verts: int): int
function CCollision_Init<cdecl, 0x416260>()
function CCollision_Shutdown<cdecl, 0x4162E0>()
function CCollision_CalculateTrianglePlanes<cdecl, 0x416330>(colData: int)
function CCollision_RemoveTrianglePlanes<cdecl, 0x416400>(colData: int)
function CCollision_ProcessSphereSphere<cdecl, 0x416450>(sphere1: int {CColSphere const&}, sphere2: int {CColSphere const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_TestSphereTriangle<cdecl, 0x4165B0>(sphere: int {CColSphere const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}): int
function CCollision_ProcessSphereTriangle<cdecl, 0x416BA0>(sphere: int {CColSphere const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_TestLineSphere<cdecl, 0x417470>(line: int {CColLine const&}, sphere: int {CColSphere const&}): int
function CCollision_DistToLine<cdecl, 0x417610>(lineStart: int, lineEnd: int, point: int): float
function CCollision_TestLineOfSight<cdecl, 0x417730>(line: int {CColLine const&}, transform: int {CMatrix const&}, colModel: int {CColModel&}, doSeeThroughCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CCollision_ProcessLineOfSight<cdecl, 0x417950>(line: int {CColLine const&}, transform: int {CMatrix const&}, colModel: int {CColModel&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, doSeeThroughCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CCollision_ProcessVerticalLine<cdecl, 0x417BF0>(line: int {CColLine const&}, transform: int {CMatrix const&}, colModel: int {CColModel&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, doSeeThroughCheck: int {bool}, doShootThroughCheck: int {bool}, collPoly: int): int
function CCollision_SphereCastVsSphere<cdecl, 0x417F20>(arg0: int, arg1: int, arg2: int): int
function CCollision_ClosestPointOnLine<cdecl, 0x417FD0>(arg0: int, arg1: int, arg2: int, arg3: int)
function CCollision_ClosestPointsOnPoly<cdecl, 0x418100>(arg0: int, arg1: int, arg2: int, arg3: int)
function CCollision_ClosestPointOnPoly<cdecl, 0x418150>(arg0: int, arg1: int, arg2: int)
function CCollision_SphereCastVsCaches<cdecl, 0x4181B0>(sphere: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): int
function CCollision_CalculateTrianglePlanes<cdecl, 0x418580>(colModel: int)
function CCollision_RemoveTrianglePlanes<cdecl, 0x4185A0>(colModel: int)
function CCollision_ProcessColModels<cdecl, 0x4185C0>(transform1: int {CMatrix const&}, colModel1: int {CColModel&}, transform2: int {CMatrix const&}, colModel2: int {CColModel&}, colPoint1: int, colPoint2: int, maxTouchDistance: int, arg7: int {bool}): int
function CCollision_SphereCastVsEntity<cdecl, 0x419F00>(sphere1: int, sphere2: int, entity: int): int
function CCollision_SphereVsEntity<cdecl, 0x41A5A0>(sphere: int, entity: int): int
function CCollision_CheckCameraCollisionBuildings<cdecl, 0x41A820>(sectorX: int, sectorY: int, arg2: int, arg3: int, arg4: int, arg5: int): int
function CCollision_CheckCameraCollisionVehicles<cdecl, 0x41A990>(sectorX: int, sectorY: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): int
function CCollision_CheckCameraCollisionObjects<cdecl, 0x41AB20>(sectorX: int, sectorY: int, arg2: int, arg3: int, arg4: int, arg5: int): int
function CCollision_BuildCacheOfCameraCollision<cdecl, 0x41AC40>(sphere1: int, sphere2: int): int
function CCollision_CameraConeCastVsWorldCollision<cdecl, 0x41B000>(sphere1: int, sphere2: int, arg2: int, arg3: float): int
function CCollisionData_CCollisionData<thiscall, 0x40F030>(self: int {CCollisionData})
function CCollisionData_RemoveCollisionVolumes<thiscall, 0x40F070>(self: int {CCollisionData})
function CCollisionData_Copy<thiscall, 0x40F120>(self: int {CCollisionData}, arg0: int {CCollisionData const&})
function CCollisionData_CalculateTrianglePlanes<thiscall, 0x40F590>(self: int {CCollisionData})
function CCollisionData_GetTrianglePoint<thiscall, 0x40F5E0>(self: int {CCollisionData}, outVec: int {CVector&}, vertId: int)
function CCollisionData_GetShadTrianglePoint<thiscall, 0x40F640>(self: int {CCollisionData}, outVec: int {CVector&}, vertId: int)
function CCollisionData_RemoveTrianglePlanes<thiscall, 0x40F6A0>(self: int {CCollisionData})
function CCollisionData_SetLinkPtr<thiscall, 0x40F6C0>(self: int {CCollisionData}, link: int)
function CCollisionData_GetLinkPtr<thiscall, 0x40F6E0>(self: int {CCollisionData}): int
/// Initializes a CColModel struct
function CColModel_ctor<thiscall, 0x40FB60>(self: int {CColModel}): int {CColModel}
/// Deinitializes the CColModel struct
function CColModel_dtor<thiscall, 0x40F700>(self: int {CColModel})
function CColModel_MakeMultipleAlloc<thiscall, 0x40F740>(self: int {CColModel})
function CColModel_operator=<thiscall, 0x40F7C0>(self: int {CColModel}, colModel: int {CColModel const&}): int
function CColModel_AllocateData<thiscall, 0x40F810>(self: int {CColModel})
function CColModel_AllocateData<thiscall, 0x40F870>(self: int {CColModel}, numSpheres: int, numBoxes: int, numLines: int, numVertices: int, numTriangles: int, disks: int {bool})
function CColModel_AllocateData<thiscall, 0x40F9B0>(self: int {CColModel}, size: int)
function CColModel_RemoveCollisionVolumes<thiscall, 0x40F9E0>(self: int {CColModel})
function CColModel_CalculateTrianglePlanes<thiscall, 0x40FA30>(self: int {CColModel})
function CColModel_RemoveTrianglePlanes<thiscall, 0x40FA40>(self: int {CColModel})
function CColModel_operator new<cdecl, 0x40FC30>(size: int): int
function CColModel_operator delete<cdecl, 0x40FC40>(data: int)
function CColourSet_CColourSet<thiscall, 0x55F4B0>(self: int {CColourSet}, weatherId: int, timeId: int)
function CColourSet_Interpolate<thiscall, 0x55F870>(self: int {CColourSet}, a: int, b: int, factorA: float, factorB: float, bIgnoreSky: int {bool})
function CControllerConfigManager_GetIsKeyboardKeyDown<thiscall, 0x52DDB0>(self: int {CControllerConfigManager}, key: int {RsKeyCodes}): int
function CControllerConfigManager_GetIsKeyboardKeyJustDown<thiscall, 0x52E450>(self: int {CControllerConfigManager}, key: int {RsKeyCodes}): int
function CControllerConfigManager_ResetSettingOrder<thiscall, 0x52F5F0>(self: int {CControllerConfigManager}, action: int {e_ControllerAction})
function CCover_CalculateHorizontalSize<cdecl, 0x6987F0>(triangle: int, vertPositions: int): float
function CCover_DoLineCheckWithinObject<cdecl, 0x698990>(triangle: int, a2: int, a3: int, a4: int, a5: int {CVector}, a6: int {CVector}): int
function CCover_DoesCoverPointStillProvideCover<cdecl, 0x698DD0>(point: int, position: int {CVector}): int
function CCover_FindAndReserveCoverPoint<cdecl, 0x6992B0>(ped: int, position: int {CVector &}, a3: int {bool}): int
function CCover_FindCoordinatesCoverPoint<cdecl, 0x699570>(point: int, ped: int, position: int {CVector &}, outCoordinates: int {CVector &}): int
function CCover_FindDirFromVector<cdecl, 0x698D40>(x: float, y: float): int
function CCover_ShouldThisBuildingHaveItsCoverPointsCreated<cdecl, 0x699230>(building: int): int
function CCoverPoint_CanAccomodateAnotherPed<thiscall, 0x698E70>(self: int {CCoverPoint}): int
function CCoverPoint_ReleaseCoverPointForPed<thiscall, 0x698EF0>(self: int {CCoverPoint}, ped: int)
function CCoverPoint_ReserveCoverPointForPed<thiscall, 0x698EB0>(self: int {CCoverPoint}, ped: int)
function CCredits_Render<cdecl, 0x53D5B0>()
function CCredits_PrintCreditText<cdecl, 0x5A8660>(scaleX: float, scaleY: float, text: int, position: int, currentOffset: float, highlighted: int {bool})
function CCredits_PrintCreditSpace<cdecl, 0x5A87C0>(spaceSize: float, position: int)
function CCredits_RenderCredits<cdecl, 0x5A87F0>()
function CCredits_Start<cdecl, 0x7170E0>()
function CCredits_Stop<cdecl, 0x717100>()
function CZoneDef_IsPointWithin<thiscall, 0x72D850>(self: int {CZoneDef}, point: int): int
function CCullZones_Init<cdecl, 0x72D6B0>()
function CCullZones_Update<cdecl, 0x72DEC0>()
function CCullZones_AddCullZone<cdecl, 0x72DF70>()
function CCullZones_AddTunnelAttributeZone<cdecl, 0x72DB50>()
function CCullZones_AddMirrorAttributeZone<cdecl, 0x72DC10>()
function CCullZones_InRoomForAudio<cdecl, 0x72DD70>(): int
function CCullZones_FewerCars<cdecl, 0x72DD80>(): int
function CCullZones_CamNoRain<cdecl, 0x72DDB0>(): int
function CCullZones_PlayerNoRain<cdecl, 0x72DDC0>(): int
function CCullZones_FewerPeds<cdecl, 0x72DD90>(): int
function CCullZones_NoPolice<cdecl, 0x72DD50>(): int
function CCullZones_DoExtraAirResistanceForPlayer<cdecl, 0x72DDD0>(): int
function CCullZones_FindTunnelAttributesForCoors<cdecl, 0x72D9F0>(point: int): int
function CCullZones_FindMirrorAttributesForCoors<cdecl, 0x72DA70>(cameraPosition: int): int
function CCullZones_FindZoneWithStairsAttributeForPlayer<cdecl, 0x72DAD0>(): int
function CCullZones_FindAttributesForCoors<cdecl, 0x72D970>(pos: int): int
function CCustomCarEnvMapPipeline_CustomPipeInstanceCB<cdecl, 0x5D8490>(arg1: int, arg2: int, callback: int): int
function CCustomCarEnvMapPipeline_PreRenderUpdate<cdecl, 0x5D8870>()
function CCustomCarEnvMapPipeline_pluginEnvMatConstructorCB<cdecl, 0x5D8BD0>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatStreamWriteCB<cdecl, 0x5D8CD0>(stream: int, length: int, arg3: int, arg4: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatStreamGetSizeCB<cdecl, 0x5D8D10>(arg0: int): int
function CCustomCarEnvMapPipeline_pluginEnvAtmConstructorCB<cdecl, 0x5D8D30>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatConstructorCB<cdecl, 0x5D8D40>(object: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatStreamWriteCB<cdecl, 0x5D8D60>(stream: int, length: int, object: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatStreamGetSizeCB<cdecl, 0x5D8DD0>(): int
function CCustomCarEnvMapPipeline_DuplicateCustomEnvMapPipeMaterialData<cdecl, 0x5D9570>(arg0: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatDestructorCB<cdecl, 0x5D95B0>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatCopyConstructorCB<cdecl, 0x5D9600>(objectDst: int, objectSrc: int, offset: int, size: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatStreamReadCB<cdecl, 0x5D9660>(stream: int, length: int, object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvAtmDestructorCB<cdecl, 0x5D9730>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvAtmCopyConstructorCB<cdecl, 0x5D9780>(objectDst: int, objectSrc: int, offset: int, size: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatDestructorCB<cdecl, 0x5D97D0>(object: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatCopyConstructorCB<cdecl, 0x5D9830>(objectDst: int, objectSrc: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatStreamReadCB<cdecl, 0x5D9880>(stream: int, length: int, object: int): int
function CCustomCarEnvMapPipeline_CustomPipeRenderCB<cdecl, 0x5D9900>(atomic: int, object: int, flags1: int, flags2: int): int
function CCustomCarEnvMapPipeline_CreateCustomOpenGLObjPipe<cdecl, 0x5D9F80>(): int
function CCustomCarEnvMapPipeline_CreatePipe<cdecl, 0x5DA020>(): int
function CCustomCarEnvMapPipeline_DestroyPipe<cdecl, 0x5DA130>()
function CCustomCarEnvMapPipeline_SetFxEnvTexture<cdecl, 0x5DA230>(material: int, texture: int)
function CCustomCarEnvMapPipeline_RegisterPlugin<cdecl, 0x5DA450>(): int
function CCustomCarEnvMapPipeline_CustomPipeMaterialSetup<cdecl, 0x5DA560>(arg0: int, arg1: int): int
function CCustomCarEnvMapPipeline_CustomPipeAtomicSetup<cdecl, 0x5DA610>(arg0: int): int
function CCustomCarPlateMgr_Initialise<cdecl, 0x6FD500>(): int
function CCustomCarPlateMgr_GeneratePlateText<cdecl, 0x6FD5B0>(plateTextBuf: int, length: int): int
function CCustomCarPlateMgr_Shutdown<cdecl, 0x6FD720>(): int
function CCustomCarPlateMgr_GetMapRegionPlateDesign<cdecl, 0x6FD7A0>(): int
function CCustomCarPlateMgr_LoadPlatecharsetDat<cdecl, 0x6FDC00>(filename: int, data: int, arg2: int, arg3: int): int
function CCustomCarPlateMgr_SetupMaterialPlatebackTexture<cdecl, 0x6FDE50>(material: int, plateType: int): int
/// Creates a new RwTexture with text for a car number plate
function CCustomCarPlateMgr_CreatePlateTexture<cdecl, 0x6FDEA0>(text: string, plateType: int): int
function CCustomCarPlateMgr_SetupClumpAfterVehicleUpgrade<cdecl, 0x6FDFE0>(clump: int, plateMaterial: int, plateType: int): int
function CCustomCarPlateMgr_SetupMaterialPlateTexture<cdecl, 0x6FE020>(material: int, plateText: int, plateType: int): int
function CCustomCarPlateMgr_SetupClump<cdecl, 0x6FE0F0>(clump: int, plateText: int, plateType: int): int
function CCutsceneMgr_AddCutsceneHead<cdecl, 0x5B0380>(object: int, arg1: int): int
function CCutsceneMgr_AppendToNextCutscene<cdecl, 0x4D5DB0>(objectName: int, animName: int)
function CCutsceneMgr_AttachObjectToBone<cdecl, 0x5B0450>(attachment: int, object: int, boneId: int)
function CCutsceneMgr_AttachObjectToFrame<cdecl, 0x5B0480>(attachment: int, object: int, frameName: int)
function CCutsceneMgr_AttachObjectToParent<cdecl, 0x5B04B0>(attachment: int, object: int)
function CCutsceneMgr_BuildCutscenePlayer<cdecl, 0x4D5E20>()
function CCutsceneMgr_CreateCutsceneObject<cdecl, 0x5B02A0>(modelId: int): int
function CCutsceneMgr_DeleteCutsceneData<cdecl, 0x4D5ED0>()
function CCutsceneMgr_DeleteCutsceneData_overlay<cdecl, 0x5AFD60>()
function CCutsceneMgr_FinishCutscene<cdecl, 0x5B04D0>()
function CCutsceneMgr_GetCutsceneTimeInMilleseconds<cdecl, 0x5B0550>(): int
function CCutsceneMgr_HasCutsceneFinished<cdecl, 0x5B0570>(): int
function CCutsceneMgr_HideRequestedObjects<cdecl, 0x5AFAD0>()
function CCutsceneMgr_Initialise<cdecl, 0x4D5A20>()
function CCutsceneMgr_IsCutsceneSkipButtonBeingPressed<cdecl, 0x4D5D10>()
function CCutsceneMgr_LoadAnimationUncompressed<cdecl, 0x4D5AB0>(animName: int)
function CCutsceneMgr_LoadCutsceneData<cdecl, 0x4D5E80>(cutsceneName: int)
function CCutsceneMgr_LoadCutsceneData_loading<cdecl, 0x5B11C0>()
function CCutsceneMgr_LoadCutsceneData_overlay<cdecl, 0x5B13F0>(cutsceneName: int)
function CCutsceneMgr_LoadCutsceneData_postload<cdecl, 0x5AFBC0>()
function CCutsceneMgr_LoadCutsceneData_preload<cdecl, 0x5B05A0>()
function CCutsceneMgr_LoadEverythingBecauseCutsceneDeletedAllOfIt<cdecl, 0x4D5C10>()
function CCutsceneMgr_RemoveCutscenePlayer<cdecl, 0x4D5E50>()
function CCutsceneMgr_RemoveEverythingBecauseCutsceneDoesntFitInMemory<cdecl, 0x4D5AF0>()
function CCutsceneMgr_SetCutsceneAnim<cdecl, 0x5B0390>(animName: int, object: int)
function CCutsceneMgr_SetCutsceneAnimToLoop<cdecl, 0x5B0420>(animName: int)
function CCutsceneMgr_SetHeadAnim<cdecl, 0x5B0440>(animName: int, headObject: int)
function CCutsceneMgr_SetupCutsceneToStart<cdecl, 0x5B14D0>()
function CCutsceneMgr_Shutdown<cdecl, 0x4D5E60>()
function CCutsceneMgr_SkipCutscene<cdecl, 0x5B1700>()
function CCutsceneMgr_StartCutscene<cdecl, 0x5B1460>()
function CCutsceneMgr_Update<cdecl, 0x4D5D00>()
function CCutsceneMgr_Update_overlay<cdecl, 0x5B1720>()
function CDarkel_Init<cdecl, 0x43CEB0>()
function CDarkel_DrawMessages<cdecl, 0x43CEC0>()
function CDarkel_ReadStatus<cdecl, 0x43D1E0>(): int
function CDarkel_RegisterKillNotByPlayer<cdecl, 0x43D210>(pKilledPed: int)
function CDarkel_ThisPedShouldBeKilledForFrenzy<cdecl, 0x43D2F0>(pPed: int): int
function CDarkel_ThisVehicleShouldBeKilledForFrenzy<cdecl, 0x43D350>(pVehicle: int {CVehicle}): int
function CDarkel_StartFrenzy<cdecl, 0x43D3B0>(weapontype: int {eWeaponType}, timelimit: int, killsNeeded: int, modelToKill: int, pStartMessage: int, modelToKill2: int, modelToKill3: int, modelToKill4: int, bStandardSoundAndMessages: int {bool}, bNeedHeadShot: int {bool})
function CDarkel_ResetModelsKilledByPlayer<cdecl, 0x43D6A0>(playerid: int)
function CDarkel_QueryModelsKilledByPlayer<cdecl, 0x43D6C0>(player: int, modelid: int): int
function CDarkel_FindTotalPedsKilledByPlayer<cdecl, 0x43D6E0>(player: int): int
function CDarkel_DealWithWeaponChangeAtEndOfFrenzy<cdecl, 0x43D7A0>()
function CDarkel_CheckDamagedWeaponType<cdecl, 0x43D9E0>(damageWeaponId: int, expectedDamageWeaponId: int): int
function CDarkel_Update<cdecl, 0x43DAC0>()
function CDarkel_ResetOnPlayerDeath<cdecl, 0x43DC10>()
function CDarkel_FailKillFrenzy<cdecl, 0x43DC60>()
function CDarkel_RegisterKillByPlayer<cdecl, 0x43DCD0>(pKilledPed: int, damageWeaponId: int {eWeaponType}, bHeadShotted: int {bool}, arg4: int)
function CDarkel_RegisterCarBlownUpByPlayer<cdecl, 0x43DF20>(pVehicle: int {CVehicle}, arg2: int)
function CDate_operator<<thiscall, 0x618D90>(self: int {CDate}, rhs: int {CDate const &}): int
function CDate_operator==<thiscall, 0x618DF0>(self: int {CDate}, rhs: int {CDate const &}): int
function CDate_operator><thiscall, 0x618D30>(self: int {CDate}, rhs: int {CDate const &>(gaddrof(CDate::operator}): int
function CDate_PopulateDateFields<thiscall, 0x618E30>(self: int {CDate}, seconds: int, minutes: int, hours: int, day: int, month: int, year: int)
function CDecisionSimple_Set<thiscall, 0x600730>(self: int {CDecisionSimple}, taskTypes: int, chances: int, count: int)
function CDecisionSimple_MakeDecision<thiscall, 0x6007A0>(self: int {CDecisionSimple}, taskType: int, outTaskType: int {short&}, outDecisionIndex: int {int&})
function CDecisionSimple_SetDefault<thiscall, 0x604220>(self: int {CDecisionSimple})
/// Initializes a CDirectory struct
function CDirectory_ctor<thiscall, 0x532290>(self: int {CDirectory}): int {CDirectory}
/// Initializes a CDirectory struct
function CDirectory_ctor<thiscall, 0x5322A0>(self: int {CDirectory}, capacity: int): int {CDirectory}
/// Deinitializes the CDirectory struct
function CDirectory_dtor<thiscall, 0x5322D0>(self: int {CDirectory})
function CDirectory_Init<thiscall, 0x5322F0>(self: int {CDirectory}, capacity: int, entries: int)
function CDirectory_AddItem<thiscall, 0x532310>(self: int {CDirectory}, entry: int {DirectoryInfo const&})
function CDirectory_ReadDirFile<thiscall, 0x532350>(self: int {CDirectory}, filename: int)
function CDirectory_WriteDirFile<thiscall, 0x532410>(self: int {CDirectory}, filename: int): int
function CDirectory_DirectoryInfo* CDirectory<thiscall, 0x532450>(self: int {CDirectory}, name: int): int
function CDirectory_DirectoryInfo* CDirectory<thiscall, 0x5324A0>(self: int {CDirectory}, name: int, outOffset: int, outStreamingSize: int): int
function CDirectory_DirectoryInfo* CDirectory<thiscall, 0x5324D0>(self: int {CDirectory}, key: int, outOffset: int, outStreamingSize: int): int
function CDoor_Process<thiscall, 0x6F4040>(self: int {CDoor}, vehicle: int {CVehicle}, arg1: int {CVector&}, arg2: int {CVector&}, arg3: int {CVector&}): int
function CDoor_ProcessImpact<thiscall, 0x6F4540>(self: int {CDoor}, vehicle: int {CVehicle}, arg1: int {CVector&}, arg2: int {CVector&}, arg3: int {CVector&}): int
function CDoor_Open<thiscall, 0x6F4790>(self: int {CDoor}, openRatio: float)
function CDoor_GetAngleOpenRatio<thiscall, 0x6F47E0>(self: int {CDoor}): float
function CDoor_IsClosed<thiscall, 0x6F4800>(self: int {CDoor}): int
function CDoor_IsFullyOpen<thiscall, 0x6F4820>(self: int {CDoor}): int
function CDraw_SetFOV<cdecl, 0x6FF410>(fovValue: float)
function CDraw_CalculateAspectRatio<cdecl, 0x6FF420>(): float
function CEntryExit_GenerateAmbientPeds<thiscall, 0x43E8B0>(self: int {CEntryExit}, position: int)
function CEntryExit_GetEntryExitToDisplayNameOf<thiscall, 0x43E650>(self: int {CEntryExit}): int
function CEntryExit_GetPositionRelativeToOutsideWorld<thiscall, 0x43EA00>(self: int {CEntryExit}, positionInOut: int)
function CEntryExit_IsInArea<thiscall, 0x43E460>(self: int {CEntryExit}, position: int {CVector const &}): int
function CEntryExit_RequestAmbientPeds<thiscall, 0x43E6D0>(self: int {CEntryExit})
function CEntryExit_RequestObjectsInFrustum<thiscall, 0x43E690>(self: int {CEntryExit})
function CEntryExit_TransitionFinished<thiscall, 0x4404A0>(self: int {CEntryExit}, player: int): int
function CEntryExit_TransitionStarted<thiscall, 0x43FFD0>(self: int {CEntryExit}, player: int): int
function CEntryExit_WarpGangWithPlayer<thiscall, 0x43F1F0>(self: int {CEntryExit}, player: int)
function CEntryExitManager_AddOne<cdecl, 0x43FA00>(entryX: float, entryY: float, entryZ: float, entryAngle: float, entryRangeX: float, entryRangeY: float, unused: int, exitX: float, exitY: float, exitZ: float, exitAngle: float, area: int, flags: int, skyColor: int, timeOn: int, timeOff: int, numberOfPeds: int, name: string): int
function CEntryExitManager_FindNearestDoor<cdecl, 0x43F630>(entryExit: int {CEntryExit const &}, range: float): int
function CEntryExitManager_FindNearestEntryExit<cdecl, 0x43F4B0>(position: int {CVector2D const &}, range: float, ignoreArea: int): int
function CEntryExitManager_GetEntryExit<cdecl, 0x43EF00>(index: int): int
function CEntryExitManager_GetEntryExitIndex<cdecl, 0x43EFD0>(name: int, enabledFlags: int, disabledFlags: int): int
function CEntryExitManager_Load<cdecl, 0x5D55C0>(): int
function CEntryExitManager_Save<cdecl, 0x5D5970>(): int
function CEntryExitManager_WeAreInInteriorTransition<cdecl, 0x43E400>(): int
function CExplosion_ClearAllExplosions<cdecl, 0x736840>()
function CExplosion_Shutdown<cdecl, 0x7368F0>()
function CExplosion_GetExplosionActiveCounter<cdecl, 0x736900>(explosionId: int): int
function CExplosion_ResetExplosionActiveCounter<cdecl, 0x736910>(explosionId: int)
function CExplosion_DoesExplosionMakeSound<cdecl, 0x736920>(explosionId: int): int
function CExplosion_GetExplosionType<cdecl, 0x736930>(explosionId: int): int
function CExplosion_GetExplosionPosition<cdecl, 0x736940>(explosionId: int): int
function CExplosion_TestForExplosionInArea<cdecl, 0x736950>(explosionType: int {eExplosionType}, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): int
function CExplosion_RemoveAllExplosionsInArea<cdecl, 0x7369E0>(posn: int {CVector}, radius: float)
function CExplosion_Initialise<cdecl, 0x736A40>()
function CExplosion_AddExplosion<cdecl, 0x736A50>(victim: int, creator: int, explosionType: int {eExplosionType}, posn: int {CVector const&}, time: int, makeSound: int, camShake: float, visibility: int): int
function CExplosion_Update<cdecl, 0x737620>()
function CFileLoader_FindRelatedModelInfoCB<cdecl, 0x5B3930>(atomic: int, data: int): int
function CFileLoader_FinishLoadClumpFile<cdecl, 0x537450>(stream: int, modelIndex: int): int
function CFileLoader_LoadAtomicFile2Return<cdecl, 0x537060>(filename: int): int
function CFileLoader_LoadClumpFile<cdecl, 0x5B3A30>(stream: int, modelIndex: int): int
function CFileLoader_LoadClumpObject<cdecl, 0x5B4040>(line: int): int
function CFileLoader_LoadCollisionFile<cdecl, 0x5B4E60>(data: int, dataSize: int, colId: int): int
function CFileLoader_LoadCollisionFileFirstTime<cdecl, 0x5B5000>(data: int, dataSize: int, colId: int): int
function CFileLoader_LoadLine<cdecl, 0x536FE0>(file: int {FILESTREAM}): int
function CFileLoader_LoadLine<cdecl, 0x536FE0>(outLine: int, outSize: int {int &}): int
function CFileLoader_LoadObject<cdecl, 0x5B3C60>(line: int): int
function CFileLoader_LoadObjectInstance<cdecl, 0x538690>(objInstance: int, modelname: int): int
function CFileLoader_LoadObjectInstance<cdecl, 0x538690>(line: int): int
function CFileLoader_LoadPathHeader<cdecl, 0x5B41C0>(line: int, outPathType: int {int &}): int
function CFileLoader_LoadPedObject<cdecl, 0x5B7420>(line: int): int
function CFileLoader_LoadTexDictionary<cdecl, 0x5B3860>(filename: int): int
function CFileLoader_LoadTimeObject<cdecl, 0x5B3DE0>(line: int): int
function CFileLoader_LoadVehicleObject<cdecl, 0x5B6F30>(line: int): int
function CFileLoader_LoadWeaponObject<cdecl, 0x5B3FB0>(line: int): int
function CFileLoader_SetRelatedModelInfoCB<cdecl, 0x537150>(atomic: int, data: int): int
function CFileLoader_StartLoadClumpFile<cdecl, 0x5373F0>(stream: int, modelIndex: int): int
function CFormation_FindNearestAvailableDestination<cdecl, 0x69B1B0>(pos: int {CVector}, pOutDistance: int): int
function CFormation_ReturnDestinationForPed<cdecl, 0x699FA0>(ped: int, pos: int): int
function CFormation_ReturnTargetPedForPed<cdecl, 0x699F50>(ped: int, pOutTargetPed: int): int
function CGame_CanSeeOutSideFromCurrArea<cdecl, 0x53C4A0>(): int
function CGame_CanSeeWaterFromCurrArea<cdecl, 0x53C4B0>(): int
function CGame_Init1<cdecl, 0x5BF840>(datFile: int): int
function CGame_Init2<cdecl, 0x5BA1A0>(datFile: int): int
function CGame_Init3<cdecl, 0x5BA400>(datFile: int): int
function CGame_Initialise<cdecl, 0x53BC80>(datFile: int): int
function CGame_InitialiseCoreDataAfterRW<cdecl, 0x5BFA90>(): int
function CGame_InitialiseEssentialsAfterRW<cdecl, 0x5BA160>(): int
function CGame_InitialiseOnceBeforeRW<cdecl, 0x53BB50>(): int
function CGame_InitialiseRenderWare<cdecl, 0x5BD600>(): int
function CGame_Shutdown<cdecl, 0x53C900>(): int
function CGameLogic_InitAtStartOfGame<cdecl, 0x441210>()
function CGameLogic_IsCoopGameGoingOn<cdecl, 0x441390>(): int
function CGameLogic_Remove2ndPlayerIfPresent<cdecl, 0x4413C0>()
function CGameLogic_SortOutStreamingAndMemory<cdecl, 0x441440>(translation: int, angle: float)
function CGameLogic_PassTime<cdecl, 0x4414C0>(time: int)
function CGameLogic_ClearSkip<cdecl, 0x441560>(a1: int {char})
function CGameLogic_SkipCanBeActivated<cdecl, 0x4415C0>(): int
function CGameLogic_IsPointWithinLineArea<cdecl, 0x4416E0>(vectors: int, sizeofvectors: int, x: float, y: float): int
function CGameLogic_SetPlayerWantedLevelForForbiddenTerritories<cdecl, 0x441770>(townNumber: int {char})
function CGameLogic_CalcDistanceToForbiddenTrainCrossing<cdecl, 0x4418E0>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, a7: int {char}, a8: int): int
function CGameLogic_LaRiotsActiveHere<cdecl, 0x441C10>(): int
function CGameLogic_RestorePedsWeapons<cdecl, 0x441D30>(a1: int): int
function CGameLogic_IsPlayerAllowedToGoInThisDirection<cdecl, 0x441E10>(a1: int, a2: float, a3: float, a4: float, a5: float): int
function CGameLogic_RestorePlayerStuffDuringResurrection<cdecl, 0x442060>(player: int, x: float, y: float, z: float, fAngle: float)
function CGameLogic_UpdateSkip<cdecl, 0x442480>()
function CGameLogic_ResetStuffUponResurrection<cdecl, 0x442980>()
function CGameLogic_Update<cdecl, 0x442AD0>()
function CGameLogic_Save<cdecl, 0x5D33C0>()
function CGangs_ChooseGangPedModel<cdecl, 0x5DE5A0>(gangId: int): int
function CGangs_GetWillAttackPlayerWithCops<cdecl, 0x5DE500>(gangId: int {ePedType}): int
function CGangWars_AttackWaveOvercome<cdecl, 0x445B30>(): int
function CGangWars_CalculateTimeTillNextAttack<cdecl, 0x443DB0>(): int
function CGangWars_CanPlayerStartAGangWarHere<cdecl, 0x443F80>(zoneInfo: int): int
function CGangWars_CreateAttackWave<cdecl, 0x444810>(warFerocity: int, waveId: int): int
function CGangWars_CreateDefendingGroup<cdecl, 0x4453D0>(unsued: int): int
function CGangWars_DoesPlayerControlThisZone<cdecl, 0x443AE0>(zoneinfo: int): int
function CGangWars_DontCreateCivilians<cdecl, 0x4439C0>(): int
function CGangWars_GangWarFightingGoingOn<cdecl, 0x443AC0>(): int
function CGangWars_GangWarGoingOn<cdecl, 0x443AA0>(): int
function CGangWars_MakePlayerGainInfluenceInZone<cdecl, 0x445E80>(removeMult: float): int
function CGangWars_PedStreamedInForThisGang<cdecl, 0x4439D0>(gangId: int): int
function CGangWars_PickStreamedInPedForThisGang<cdecl, 0x443A20>(gangId: int, outPedId: int): int
function CGangWars_PickZoneToAttack<cdecl, 0x443B00>(): int
function CGangWars_ReleasePedsInAttackWave<cdecl, 0x445C30>(isEndOfWar: int {bool}, restoreGangPedsAcquaintance: int {bool}): int
function CGangWarsSaveStructure_Construct<thiscall, 0x5D2620>(self: int {CGangWarsSaveStructure})
function CGangWarsSaveStructure_Extract<thiscall, 0x5D2740>(self: int {CGangWarsSaveStructure})
function CGenericGameStorage_CheckDataNotCorrupt<cdecl, 0x5D1170>(saveId: int, saveGameFilename: int): int
function CGenericGameStorage_CheckSlotDataValid<cdecl, 0x5D1380>(saveId: int, unused: int {bool}): int
function CGenericGameStorage_GenericLoad<cdecl, 0x5D17B0>(arg1: int): int
function CGenericGameStorage_GenericSave<cdecl, 0x5D13E0>(unused: int): int
function CGenericGameStorage_GetCurrentVersionNumber<cdecl, 0x5D0F50>(): int
function CGenericGameStorage_GetNameOfSavedGame<cdecl, 0x5D0F40>(saveId: int): int
function CGenericGameStorage_GetNameOfSavedGame_Alt<cdecl, 0x619030>(saveId: int): int
function CGenericGameStorage_GetSavedRadioStationPosition<cdecl, 0x618E80>(): int
function CGenericGameStorage_LoadWorkBuffer<cdecl, 0x5D10B0>(): int
function CGenericGameStorage_OpenFileForReading<cdecl, 0x5D0D20>(saveGameFilename: int, saveId: int): int
function CGenericGameStorage_OpenFileForWriting<cdecl, 0x5D0DD0>(): int
function CGenericGameStorage_RestoreForStartLoad<cdecl, 0x619000>(): int
function CGenericGameStorage_SaveWorkBuffer<cdecl, 0x5D0F80>(a1: int {bool}): int
function CGenericGameStorage__LoadDataFromWorkBuffer<cdecl, 0x5D1300>(pData: int, size: int): int
function CGenericGameStorage__SaveDataToWorkBuffer<cdecl, 0x5D1270>(pData: int, size: int): int
function CGridRef_GetAreaName<cdecl, 0x71D650>(sectorX: int, sectorY: int): int
function CGridRef_GetArtistBugstarID<cdecl, 0x71D670>(sectorX: int, sectorY: int): int
function CHud_Draw<cdecl, 0x58FAE0>()
function CHud_DrawAfterFade<cdecl, 0x58D490>()
function CHud_DrawAreaName<cdecl, 0x58AA50>()
function CHud_DrawBustedWastedMessage<cdecl, 0x58CA50>()
function CHud_DrawCrossHairs<cdecl, 0x58E020>()
function CHud_DrawFadeState<cdecl, 0x58D580>(fadeState: int {DRAW_FADE_STATE}, arg1: int): float
function CHud_DrawHelpText<cdecl, 0x58B6E0>()
function CHud_DrawMissionTimers<cdecl, 0x58B180>()
function CHud_DrawMissionTitle<cdecl, 0x58D240>()
function CHud_DrawOddJobMessage<cdecl, 0x58CC80>(priority: int)
function CHud_DrawRadar<cdecl, 0x58A330>()
function CHud_DrawScriptText<cdecl, 0x58C080>(priority: int)
function CHud_DrawSubtitles<cdecl, 0x58C250>()
function CHud_DrawSuccessFailedMessage<cdecl, 0x58C6A0>()
function CHud_DrawVehicleName<cdecl, 0x58AEA0>()
function CHud_DrawVitalStats<cdecl, 0x589650>()
function CHud_GetRidOfAllHudMessages<cdecl, 0x588A50>(arg0: int)
function CHud_GetYPosBasedOnHealth<cdecl, 0x588B60>(playerId: int, pos: float, offset: int): float
function CHud_HelpMessageDisplayed<cdecl, 0x588B50>(): int
function CHud_Initialise<cdecl, 0x5BA850>()
function CHud_ReInitialise<cdecl, 0x588880>()
function CHud_ResetWastedText<cdecl, 0x589070>()
function CHud_SetBigMessage<cdecl, 0x588FC0>(text: int, style: int)
function CHud_SetHelpMessage<cdecl, 0x588BE0>(text: int, quickMessage: int {bool}, permanent: int {bool}, addToBrief: int {bool})
function CHud_SetHelpMessageStatUpdate<cdecl, 0x588D40>(state: int, statId: int, diff: float, max: float)
function CHud_SetHelpMessageWithNumber<cdecl, 0x588E30>(text: int, number: int, quickMessage: int {bool}, permanent: int {bool})
function CHud_SetMessage<cdecl, 0x588F60>(text: int)
function CHud_SetVehicleName<cdecl, 0x588F50>(name: int)
function CHud_SetZoneName<cdecl, 0x588BB0>(name: int, displayState: int)
function CHud_Shutdown<cdecl, 0x588850>()
function CHud_DrawAmmo<cdecl, 0x5893B0>(ped: int, x: int, y: int, alpha: float)
function CHud_DrawPlayerInfo<cdecl, 0x58EAF0>()
function CHud_DrawTripSkip<cdecl, 0x58A160>()
function CHud_DrawWanted<cdecl, 0x58D9A0>()
function CHud_DrawWeaponIcon<cdecl, 0x58D7D0>(ped: int, x: int, y: int, alpha: float)
function CHud_RenderArmorBar<cdecl, 0x5890A0>(playerId: int, x: int, y: int)
function CHud_RenderBreathBar<cdecl, 0x589190>(playerId: int, x: int, y: int)
function CHud_RenderHealthBar<cdecl, 0x589270>(playerId: int, x: int, y: int)
function CIplStore_AddIplSlot<cdecl, 0x405AC0>(name: int): int
function CIplStore_AddIplsNeededAtPosn<cdecl, 0x4045B0>(posn: int {CVector const&})
function CIplStore_ClearIplsNeededAtPosn<cdecl, 0x4045E0>()
function CIplStore_EnableDynamicStreaming<cdecl, 0x404D30>(iplSlotIndex: int, enable: int {bool})
function CIplStore_EnsureIplsAreInMemory<cdecl, 0x4053F0>(posn: int {CVector const&})
function CIplStore_FindIplSlot<cdecl, 0x404AC0>(name: int): int
function CIplStore_GetBoundingBox<cdecl, 0x404C70>(iplSlotIndex: int): int
function CIplStore_GetIplEntityIndexArray<cdecl, 0x4047B0>(arrayIndex: int): int
function CIplStore_GetIplName<cdecl, 0x404A60>(iplSlotIndex: int): int
function CIplStore_GetNewIplEntityIndexArray<cdecl, 0x404780>(entitiesCount: int): int
function CIplStore_HaveIplsLoaded<cdecl, 0x405600>(coords: int {CVector const&}, playerNumber: int): int
function CIplStore_IncludeEntity<cdecl, 0x404C90>(iplSlotIndex: int, entity: int)
function CIplStore_Initialise<cdecl, 0x405EC0>()
function CIplStore_Load<cdecl, 0x5D54A0>(): int
function CIplStore_LoadAllRemainingIpls<cdecl, 0x405780>()
function CIplStore_LoadIpl<cdecl, 0x406080>(iplSlotIndex: int, data: int, dataSize: int): int
function CIplStore_LoadIplBoundingBox<cdecl, 0x405C00>(iplSlotIndex: int, data: int, dataSize: int): int
function CIplStore_LoadIpls<cdecl, 0x405170>(posn: int {CVector}, arg1: int {bool})
function CIplStore_RemoveAllIpls<cdecl, 0x405720>()
function CIplStore_RemoveIpl<cdecl, 0x404B20>(iplSlotIndex: int)
function CIplStore_RemoveIplAndIgnore<cdecl, 0x405890>(iplSlotIndex: int)
function CIplStore_RemoveIplSlot<cdecl, 0x405B60>(iplSlotIndex: int)
function CIplStore_RemoveIplWhenFarAway<cdecl, 0x4058D0>(iplSlotIndex: int)
function CIplStore_RemoveRelatedIpls<cdecl, 0x405110>(entityArraysIndex: int)
function CIplStore_RequestIplAndIgnore<cdecl, 0x405850>(iplSlotIndex: int)
function CIplStore_RequestIpls<cdecl, 0x405520>(posn: int {CVector const&}, playerNumber: int)
function CIplStore_Save<cdecl, 0x5D5420>(): int
function CIplStore_SetIplsRequired<cdecl, 0x404700>(posn: int {CVector const&}, playerNumber: int)
function CIplStore_SetIsInterior<cdecl, 0x404A90>(iplSlotIndex: int, isInterior: int {bool})
function CIplStore_SetupRelatedIpls<cdecl, 0x404DE0>(iplName: int, entityArraysIndex: int, instances: int): int
function CIplStore_Shutdown<cdecl, 0x405FA0>()
function CLoadedCarGroup_SortBasedOnUsage<thiscall, 0x611E10>(self: int {CLoadedCarGroup})
function CLoadedCarGroup_RemoveMember<thiscall, 0x611BD0>(self: int {CLoadedCarGroup}, modelindex: int): int
function CLoadedCarGroup_PickRandomCar<thiscall, 0x611C50>(self: int {CLoadedCarGroup}, arg1: int {bool}, arg2: int {bool}): int
function CLoadedCarGroup_PickLeastUsedModel<thiscall, 0x611E90>(self: int {CLoadedCarGroup}, minRefs: int): int
function CLoadedCarGroup_GetMember<thiscall, 0x611C20>(self: int {CLoadedCarGroup}, count: int): int
function CLoadedCarGroup_CountMembers<thiscall, 0x611C30>(self: int {CLoadedCarGroup}): int
function CLoadedCarGroup_Clear<thiscall, 0x611B90>(self: int {CLoadedCarGroup})
function CLoadedCarGroup_AddMember<thiscall, 0x611BB0>(self: int {CLoadedCarGroup}, member: int)
function CLoadingScreen_Shutdown<cdecl, 0x58FF10>()
function CLoadingScreen_RenderSplash<cdecl, 0x58FF60>()
function CLoadingScreen_LoadSplashes<cdecl, 0x5900B0>(bStarting: int, bNvidia: int)
function CLoadingScreen_DisplayMessage<cdecl, 0x590220>(message: int)
function CLoadingScreen_SetLoadingBarMsg<cdecl, 0x590240>(msg1: int, msg2: int)
function CLoadingScreen_GetClockTime<cdecl, 0x590280>(bIgnorePauseTime: int {bool}): int
function CLoadingScreen_Init<cdecl, 0x5902B0>(unusedflag: int {bool}, bLoaded: int {bool})
function CLoadingScreen_Continue<cdecl, 0x590320>()
function CLoadingScreen_RenderLoadingBar<cdecl, 0x590370>()
function CLoadingScreen_DisplayNextSplash<cdecl, 0x5904D0>()
function CLoadingScreen_StartFading<cdecl, 0x590530>()
function CLoadingScreen_DisplayPCScreen<cdecl, 0x590570>()
function CLoadingScreen_Update<cdecl, 0x5905E0>()
function CLoadingScreen_DoPCTitleFadeOut<cdecl, 0x590990>()
function CLoadingScreen_DoPCTitleFadeIn<cdecl, 0x590860>()
function CLoadingScreen_DoPCScreenChange<cdecl, 0x590AC0>(bFinish: int)
function CLoadingScreen_NewChunkLoaded<cdecl, 0x590D00>()
function CMatrix_Scale<thiscall, 0x459350>(self: int {CMatrix}, scale: float)
function CMatrix_Scale<thiscall, 0x459350>(self: int {CMatrix}, x: float, y: float, z: float)
function CMatrixLink_Insert<thiscall, 0x54E8F0>(self: int {CMatrixLink}, where: int)
function CMatrixLink_Remove<thiscall, 0x54E910>(self: int {CMatrixLink})
/// Initializes a CMenuManager struct
function CMenuManager_ctor<thiscall, 0x574350>(self: int {CMenuManager}): int {CMenuManager}
/// Deinitializes the CMenuManager struct
function CMenuManager_dtor<thiscall, 0x579440>(self: int {CMenuManager})
function CMenuManager_AdditionalOptionInput<thiscall, 0x5773D0>(self: int {CMenuManager}, input: int {char}, enter: int {char}): int
function CMenuManager_CentreMousePointer<thiscall, 0x57C520>(self: int {CMenuManager})
function CMenuManager_CheckCodesForControls<thiscall, 0x57DB20>(self: int {CMenuManager}, code: int): int
function CMenuManager_CheckFrontEndDownInput<thiscall, 0x5738B0>(self: int {CMenuManager}): int
function CMenuManager_CheckFrontEndLeftInput<thiscall, 0x573920>(self: int {CMenuManager}): int
function CMenuManager_CheckFrontEndRightInput<thiscall, 0x573990>(self: int {CMenuManager}): int
function CMenuManager_CheckFrontEndUpInput<thiscall, 0x573840>(self: int {CMenuManager}): int
function CMenuManager_CheckHover<thiscall, 0x57C4F0>(self: int {CMenuManager}, x1: int, x2: int, y1: int, y2: int): int
function CMenuManager_CheckMissionPackValidMenu<thiscall, 0x57D720>(self: int {CMenuManager}): int
function CMenuManager_CheckRedefineControlInput<thiscall, 0x57E4D0>(self: int {CMenuManager}): int
function CMenuManager_CheckSliderMovement<thiscall, 0x57E4D0>(self: int {CMenuManager}, input: int)
function CMenuManager_DisplayHelperText<thiscall, 0x57E4D0>(self: int {CMenuManager}, text: int)
function CMenuManager_DisplaySlider<thiscall, 0x576860>(self: int {CMenuManager}, posX: int, posY: int, beginHeight: int, endHeight: int, distBetweenRects: int, filledAmount: int, colour: int): int
function CMenuManager_DoSettingsBeforeStartingAGame<thiscall, 0x573330>(self: int {CMenuManager}): int
function CMenuManager_DrawBackground<thiscall, 0x57B750>(self: int {CMenuManager}): int
function CMenuManager_DrawControllerScreenExtraText<thiscall, 0x57D8D0>(self: int {CMenuManager}, unk: int): int
function CMenuManager_DrawControllerSetupScreen<thiscall, 0x57F300>(self: int {CMenuManager}): int
function CMenuManager_DrawFrontEnd<thiscall, 0x57C290>(self: int {CMenuManager})
function CMenuManager_DrawQuitGameScreen<thiscall, 0x57D860>(self: int {CMenuManager}, unused: int)
function CMenuManager_DrawStandardMenu<thiscall, 0x5794A0>(self: int {CMenuManager}, header: int)
function CMenuManager_DrawWindow<thiscall, 0x573EE0>(self: int {CMenuManager}, coords: int, pKey: int, nColour: int, backColor: int, unused: int, bBackground: int)
function CMenuManager_DrawWindowedText<thiscall, 0x578F50>(self: int {CMenuManager}, x1: int, y1: int, x2: int, y2: int, gxt: int, align: int)
function CMenuManager_GetNumberOfMenuOptions<thiscall, 0x573E70>(self: int {CMenuManager}): int
function CMenuManager_HasLanguageChanged<thiscall, 0x573CD0>(self: int {CMenuManager}): int
function CMenuManager_Initialise<thiscall, 0x5744D0>(self: int {CMenuManager})
function CMenuManager_InitialiseChangedLanguageSettings<thiscall, 0x573260>(self: int {CMenuManager}, reInitControls: int)
function CMenuManager_JumpToGenericMessageScreen<thiscall, 0x576AE0>(self: int {CMenuManager}, screen: int, header: int, action: int): int
function CMenuManager_LoadAllTextures<thiscall, 0x572EC0>(self: int {CMenuManager})
function CMenuManager_LoadSettings<thiscall, 0x57C8F0>(self: int {CMenuManager})
function CMenuManager_MessageScreen<thiscall, 0x579330>(self: int {CMenuManager}, message: int, col: int, frame: int)
function CMenuManager_PrintBriefs<thiscall, 0x576320>(self: int {CMenuManager}): float
function CMenuManager_PrintMap<thiscall, 0x575130>(self: int {CMenuManager}): int
function CMenuManager_PrintRadioStationList<thiscall, 0x5746F0>(self: int {CMenuManager}): int
function CMenuManager_PrintStats<thiscall, 0x574900>(self: int {CMenuManager}): int
function CMenuManager_Process<thiscall, 0x57B440>(self: int {CMenuManager}): int
function CMenuManager_ProcessFileActions<thiscall, 0x578D60>(self: int {CMenuManager})
function CMenuManager_ProcessMenuOptions<thiscall, 0x576FE0>(self: int {CMenuManager}, input: int, exit: int, enter: int)
function CMenuManager_ProcessMissionPackNewGame<thiscall, 0x57D520>(self: int {CMenuManager})
function CMenuManager_ProcessPCMenuOptions<thiscall, 0x57CD50>(self: int {CMenuManager}, input: int, enter: int): int
function CMenuManager_ProcessStreaming<thiscall, 0x573CF0>(self: int {CMenuManager}, all: int)
function CMenuManager_ProcessUserInput<thiscall, 0x57B480>(self: int {CMenuManager}, down: int, up: int, enter: int, exit: int, input: int)
function CMenuManager_RedefineScreenUserInput<thiscall, 0x57EF50>(self: int {CMenuManager}, enter: int, exit: int): int
function CMenuManager_ResetHelperText<thiscall, 0x57CD30>(self: int {CMenuManager})
function CMenuManager_SaveLoadFileError_SetUpErrorScreen<thiscall, 0x57C490>(self: int {CMenuManager})
function CMenuManager_SaveSettings<thiscall, 0x57C660>(self: int {CMenuManager})
function CMenuManager_SaveStatsToFile<thiscall, 0x57DDE0>(self: int {CMenuManager}): int
function CMenuManager_ScrollRadioStations<thiscall, 0x573A00>(self: int {CMenuManager}, input: int)
function CMenuManager_SetDefaultPreferences<thiscall, 0x573AE0>(self: int {CMenuManager}, page: int): int
function CMenuManager_SetFrontEndRenderStates<thiscall, 0x573A60>(self: int {CMenuManager})
function CMenuManager_SetHelperText<thiscall, 0x57CD10>(self: int {CMenuManager}, index: int): int
function CMenuManager_SmallMessageScreen<thiscall, 0x574010>(self: int {CMenuManager}, message: int)
function CMenuManager_StretchX<thiscall, 0x5733E0>(self: int {CMenuManager}, x: int): float
function CMenuManager_StretchY<thiscall, 0x573410>(self: int {CMenuManager}, y: int): float
function CMenuManager_SwapTexturesRound<thiscall, 0x5730A0>(self: int {CMenuManager}, force: int)
function CMenuManager_SwitchMenuOnAndOff<thiscall, 0x576B70>(self: int {CMenuManager})
function CMenuManager_SwitchToNewScreen<thiscall, 0x573680>(self: int {CMenuManager}, page: int): int
function CMenuManager_UnloadTextures<thiscall, 0x574630>(self: int {CMenuManager})
function CMenuManager_UserInput<thiscall, 0x57FD70>(self: int {CMenuManager})
function CMirrors_BeforeConstructRenderList<cdecl, 0x726DF0>()
function CMirrors_BeforeMainRender<cdecl, 0x727140>()
function CMirrors_BuildCamMatrix<cdecl, 0x723150>(mat: int, pointA: int {CVector}, pointB: int {CVector})
function CMirrors_BuildCameraMatrixForScreens<cdecl, 0x7266B0>(mat: int)
function CMirrors_CreateBuffer<cdecl, 0x7230A0>()
function CMirrors_Init<cdecl, 0x723000>()
function CMirrors_RenderMirrorBuffer<cdecl, 0x726090>()
function CMirrors_ShutDown<cdecl, 0x723050>()
function CModelInfo_GetModelInfo<cdecl, 0x403DA0>(index: int): int
function CModelInfoAccelerator_Init<thiscall, 0x4C6A80>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_AddModelInfoId<thiscall, 0x4C6AA0>(self: int {CModelInfoAccelerator}, modelId: int)
function CModelInfoAccelerator_GetNextModelInfoId<thiscall, 0x4C6AC0>(self: int {CModelInfoAccelerator}): int
function CModelInfoAccelerator_AllocModelInfoIds<thiscall, 0x4C6AE0>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_FreeModelInfoIds<thiscall, 0x4C6B10>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_GetEntry<thiscall, 0x4C6B30>(self: int {CModelInfoAccelerator}, arg0: int, arg1: int, arg2: int)
function CModelInfoAccelerator_End<thiscall, 0x4C6B40>(self: int {CModelInfoAccelerator}, arg0: int)
function CModelInfoAccelerator_CModelInfoAccelerator<thiscall, 0x4C6B50>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_GetModelInfoIdFile<thiscall, 0x4C6B70>(self: int {CModelInfoAccelerator}): int
function CModelInfoAccelerator_EndOfLoadPhase<thiscall, 0x4C6BD0>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_Begin<thiscall, 0x4C6C20>(self: int {CModelInfoAccelerator}, filePath: int): int
function CMotionBlurStreaks_Update<cdecl, 0x7240C0>()
function CMotionBlurStreaks_Render<cdecl, 0x7240E0>()
function CMotionBlurStreaks_RegisterStreak<cdecl, 0x721DC0>(id: int, red: int, green: int, blue: int, leftPoint: int {CVector}, rightPoint: int {CVector})
function CMotionBlurStreaks_Init<cdecl, 0x721D90>()
function COctTree_COctTree<thiscall, 0x5A6DB0>(self: int {COctTree})
function COctTree_FindNearestColour<thiscall, 0x5A71E0>(self: int {COctTree}, colorRed: int, colorGreen: int, colorBlue: int): int
function COctTree_InitPool<thiscall, 0x5A7460>(self: int {COctTree}, data: int, dataSize: int)
function COctTree_NoOfChildren<thiscall, 0x5A6DE0>(self: int {COctTree}): int
function COctTree_ReduceTree<thiscall, 0x5A7040>(self: int {COctTree})
function COctTree_RemoveChildren<thiscall, 0x5A74F0>(self: int {COctTree})
function COctTree_ShutdownPool<thiscall, 0x5A6F70>(self: int {COctTree})
function COctTree_empty<thiscall, 0x5A6FC0>(self: int {COctTree})
function COctTree_operator delete<cdecl, 0x5A7420>(data: int)
function COctTree_operator new<cdecl, 0x5A7410>(size: int): int
function COctTreeBase_COctTreeBase<thiscall, 0x5A7570>(self: int {COctTreeBase})
function COctTreeBase_Init<thiscall, 0x5A7260>(self: int {COctTreeBase}, numBranches: int)
function COctTreeBase_Insert<thiscall, 0x5A7750>(self: int {COctTreeBase}, colorRed: int, colorGreen: int, colorBlue: int): int
function COctTreeBase_ReduceBranches<thiscall, 0x5A7840>(self: int {COctTreeBase}, newBranchesCount: int)
function COnscreenCounterEntry_ProcessForDisplayCounter<thiscall, 0x44CA90>(self: int {COnscreenCounterEntry}, type: int)
function COnscreenCounterEntry_SetColourID<thiscall, 0x44CB00>(self: int {COnscreenCounterEntry}, colourId: int)
function COnscreenTimer_AddClock<thiscall, 0x44CD50>(self: int {COnscreenTimer}, varId: int, gxt: int, bTimerDirection: int)
function COnscreenTimer_AddCounter<thiscall, 0x44CDA0>(self: int {COnscreenTimer}, varId: int, type: int, gxt: int, counterIndex: int)
function COnscreenTimer_AddCounterCounter<thiscall, 0x44CE00>(self: int {COnscreenTimer}, varId: int, maxValue: int, gxt: int, lineId: int)
function COnscreenTimer_ClearClock<thiscall, 0x44CE60>(self: int {COnscreenTimer}, varId: int): int
function COnscreenTimer_ClearCounter<thiscall, 0x44CE80>(self: int {COnscreenTimer}, varId: int)
function COnscreenTimer_Init<thiscall, 0x44CBC0>(self: int {COnscreenTimer})
function COnscreenTimer_Process<thiscall, 0x44CD30>(self: int {COnscreenTimer})
function COnscreenTimer_ProcessForDisplay<thiscall, 0x44CC20>(self: int {COnscreenTimer})
function COnscreenTimer_SetClockBeepCountdownSecs<thiscall, 0x44CEE0>(self: int {COnscreenTimer}, varId: int, time: int)
function COnscreenTimer_SetCounterColourID<thiscall, 0x44CF10>(self: int {COnscreenTimer}, varId: int, colourId: int)
function COnscreenTimer_SetCounterFlashWhenFirstDisplayed<thiscall, 0x44CEB0>(self: int {COnscreenTimer}, varId: int, bFlashWhenFirstDisplayed: int)
function COnscreenTimerEntry_Process<thiscall, 0x44CB10>(self: int {COnscreenTimerEntry})
function COnscreenTimerEntry_ProcessForDisplayClock<thiscall, 0x44CA40>(self: int {COnscreenTimerEntry})
function CPad_UpdateMouse<thiscall, 0x53F3C0>(self: int {CPad})
function CPad_ReconcileTwoControllersInput<thiscall, 0x53F530>(self: int {CPad}, controllerA: int {CControllerState const&}, controllerB: int {CControllerState const&})
function CPad_SetDrunkInputDelay<thiscall, 0x53F910>(self: int {CPad}, delay: int)
function CPad_StartShake<thiscall, 0x53F920>(self: int {CPad}, time: int, frequency: int, arg2: int)
function CPad_StartShake_Distance<thiscall, 0x53F9A0>(self: int {CPad}, time: int, frequency: int, x: float, y: float, z: float)
function CPad_StartShake_Train<thiscall, 0x53FA70>(self: int {CPad}, x: float, y: float)
function CPad_ProcessPCSpecificStuff<thiscall, 0x53FB40>(self: int {CPad})
function CPad_StopShaking<thiscall, 0x53FB50>(self: int {CPad}, arg0: int)
function CPad_GetPad<cdecl, 0x53FB70>(padNumber: int): int
function CPad_GetSteeringLeftRight<thiscall, 0x53FB80>(self: int {CPad}): int
function CPad_GetSteeringUpDown<thiscall, 0x53FBD0>(self: int {CPad}): int
function CPad_GetPedWalkLeftRight<thiscall, 0x53FC90>(self: int {CPad}): int
function CPad_GetPedWalkUpDown<thiscall, 0x53FD30>(self: int {CPad}): int
function CPad_GetLookLeft<thiscall, 0x53FDD0>(self: int {CPad}): int
function CPad_GetLookRight<thiscall, 0x53FE10>(self: int {CPad}): int
function CPad_GetLookBehindForCar<thiscall, 0x53FE70>(self: int {CPad}): int
function CPad_GetLookBehindForPed<thiscall, 0x53FEC0>(self: int {CPad}): int
function CPad_GetHorn<thiscall, 0x53FEE0>(self: int {CPad}): int
function CPad_HornJustDown<thiscall, 0x53FF30>(self: int {CPad}): int
function CPad_GetHydraulicJump<thiscall, 0x53FF70>(self: int {CPad}): int
function CPad_GetCarGunFired<thiscall, 0x53FF90>(self: int {CPad}): int
function CPad_CarGunJustDown<thiscall, 0x53FFE0>(self: int {CPad}): int
function CPad_GetHandBrake<thiscall, 0x540040>(self: int {CPad}): int
function CPad_GetBrake<thiscall, 0x540080>(self: int {CPad}): int
function CPad_GetExitVehicle<thiscall, 0x5400D0>(self: int {CPad}): int
function CPad_ExitVehicleJustDown<thiscall, 0x540120>(self: int {CPad}): int
function CPad_GetMeleeAttack<thiscall, 0x540340>(self: int {CPad}, 0: int): int
function CPad_MeleeAttackJustDown<thiscall, 0x540390>(self: int {CPad}): int
function CPad_GetAccelerate<thiscall, 0x5403F0>(self: int {CPad}): int
function CPad_GetAccelerateJustDown<thiscall, 0x540440>(self: int {CPad}): int
function CPad_NextStationJustUp<thiscall, 0x5405B0>(self: int {CPad}): int
function CPad_LastStationJustUp<thiscall, 0x5405E0>(self: int {CPad}): int
function CPad_CycleWeaponLeftJustDown<thiscall, 0x540610>(self: int {CPad}): int
function CPad_CycleWeaponRightJustDown<thiscall, 0x540640>(self: int {CPad}): int
function CPad_GetTarget<thiscall, 0x540670>(self: int {CPad}): int
function CPad_GetDuck<thiscall, 0x540700>(self: int {CPad}): int
function CPad_DuckJustDown<thiscall, 0x540720>(self: int {CPad}): int
function CPad_GetJump<thiscall, 0x540750>(self: int {CPad}): int
function CPad_JumpJustDown<thiscall, 0x540770>(self: int {CPad}): int
function CPad_GetSprint<thiscall, 0x5407A0>(self: int {CPad}): int
function CPad_SprintJustDown<thiscall, 0x5407F0>(self: int {CPad}): int
function CPad_ShiftTargetLeftJustDown<thiscall, 0x540850>(self: int {CPad}): int
function CPad_ShiftTargetRightJustDown<thiscall, 0x540880>(self: int {CPad}): int
function CPad_GetDisplayVitalStats<thiscall, 0x5408B0>(self: int {CPad}, ped: int): int
function CPad_CollectPickupJustDown<thiscall, 0x540A70>(self: int {CPad}): int
function CPad_GetForceCameraBehindPlayer<thiscall, 0x540AE0>(self: int {CPad}): int
function CPad_SniperZoomIn<thiscall, 0x540B30>(self: int {CPad}): int
function CPad_SniperZoomOut<thiscall, 0x540B80>(self: int {CPad}): int
function CPad_GetGroupControlForward<thiscall, 0x541190>(self: int {CPad}): int
function CPad_GetGroupControlBack<thiscall, 0x5411B0>(self: int {CPad}): int
function CPad_ConversationYesJustDown<thiscall, 0x5411D0>(self: int {CPad}): int
function CPad_ConversationNoJustDown<thiscall, 0x541200>(self: int {CPad}): int
function CPad_GroupControlForwardJustDown<thiscall, 0x541230>(self: int {CPad}): int
function CPad_GroupControlBackJustDown<thiscall, 0x541260>(self: int {CPad}): int
function CPad_Clear<thiscall, 0x541A70>(self: int {CPad}, enablePlayerControls: int {bool}, resetPhase: int {bool})
function CPad_UpdatePads<cdecl, 0x541DD0>()
function CPad_ClearMouseHistory<cdecl, 0x541BD0>()
function CPedClothesDesc_Initialise<thiscall, 0x5A78F0>(self: int {CPedClothesDesc})
function CPedClothesDesc_SetModel<thiscall, 0x5A7910>(self: int {CPedClothesDesc}, modelid: int, eClothesModelPart: int)
function CPedClothesDesc_SetModel<thiscall, 0x5A7920>(self: int {CPedClothesDesc}, model: int, eClothesModelPart: int)
function CPedClothesDesc_GetIsWearingBalaclava<thiscall, 0x5A7950>(self: int {CPedClothesDesc}): int
function CPedClothesDesc_HasVisibleNewHairCut<thiscall, 0x5A7970>(self: int {CPedClothesDesc}, arg1: int): int
function CPedClothesDesc_HasVisibleTattoo<thiscall, 0x5A79D0>(self: int {CPedClothesDesc}): int
function CPedClothesDesc_CPedClothesDesc<thiscall, 0x5A8020>(self: int {CPedClothesDesc})
function CPedClothesDesc_SetTextureAndModel<thiscall, 0x5A8050>(self: int {CPedClothesDesc}, texture: int, model: int, eClothesTexturePart: int)
function CPedClothesDesc_SetTextureAndModel<thiscall, 0x5A8080>(self: int {CPedClothesDesc}, texturename: int, modelname: int, eClothesTexturePart: int)
function CPedGroup_FindDistanceToFurthestMember<thiscall, 0x5FB010>(self: int {CPedGroup}): float
function CPedGroup_FindDistanceToNearestMember<thiscall, 0x5FB0A0>(self: int {CPedGroup}, ppOutNearestMember: int): float
function CPedGroup_Flush<thiscall, 0x5FB790>(self: int {CPedGroup})
function CPedGroup_GetClosestGroupPed<thiscall, 0x5FACD0>(self: int {CPedGroup}, ped: int, pOutDistance: int): int
function CPedGroup_IsAnyoneUsingCar<thiscall, 0x5F7DB0>(self: int {CPedGroup}, vehicle: int {CVehicle}): int
function CPedGroup_PlayerGaveCommand_Attack<thiscall, 0x5F7CC0>(self: int {CPedGroup}, playerPed: int, ped: int)
function CPedGroup_PlayerGaveCommand_Gather<thiscall, 0x5FAB60>(self: int {CPedGroup}, ped: int)
function CPedGroup_Process<thiscall, 0x5FC7E0>(self: int {CPedGroup})
function CPedGroup_RemoveAllFollowers<thiscall, 0x5FB7D0>(self: int {CPedGroup})
function CPedGroup_Teleport<thiscall, 0x5F7AD0>(self: int {CPedGroup}, pos: int)
function CPedGroupIntelligence_AddEvent<thiscall, 0x5F7470>(self: int {CPedGroupIntelligence}, event: int): int
function CPedGroupIntelligence_ComputeDefaultTasks<thiscall, 0x5F88D0>(self: int {CPedGroupIntelligence}, ped: int)
function CPedGroupIntelligence_ComputeEventResponseTasks<thiscall, 0x5FC440>(self: int {CPedGroupIntelligence}): int
function CPedGroupIntelligence_ComputeScriptCommandTasks<thiscall, 0x5F7800>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_FlushTasks<thiscall, 0x5F79C0>(self: int {CPedGroupIntelligence}, taskpair: int, ped: int)
function CPedGroupIntelligence_GetTask<thiscall, 0x5F7660>(self: int {CPedGroupIntelligence}, ped: int, taskpair: int): int
function CPedGroupIntelligence_GetTaskDefault<thiscall, 0x5F86C0>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_GetTaskScriptCommand<thiscall, 0x5F8690>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_GetTaskSecondary<thiscall, 0x5F8620>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_GetTaskSecondarySlot<thiscall, 0x5F8650>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_IsCurrentEventValid<thiscall, 0x5F77A0>(self: int {CPedGroupIntelligence}): int
function CPedGroupIntelligence_IsGroupResponding<thiscall, 0x5F7760>(self: int {CPedGroupIntelligence}): int
function CPedGroupIntelligence_Process<thiscall, 0x5FC4A0>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ProcessIgnorePlayerGroup<thiscall, 0x5F87A0>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ReportAllBarScriptTasksFinished<thiscall, 0x5F8780>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ReportAllTasksFinished<thiscall, 0x5F8750>(self: int {CPedGroupIntelligence}, taskpair: int)
function CPedGroupIntelligence_ReportAllTasksFinished<thiscall, 0x5F8750>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ReportFinishedTask<thiscall, 0x5F86F0>(self: int {CPedGroupIntelligence}, ped: int, task: int, taskpair: int): int
function CPedGroupIntelligence_ReportFinishedTask<thiscall, 0x5F86F0>(self: int {CPedGroupIntelligence}, ped: int, task: int): int
function CPedGroupIntelligence_SetDefaultTask<thiscall, 0x5F8580>(self: int {CPedGroupIntelligence}, ped: int, task: int)
function CPedGroupIntelligence_SetDefaultTaskAllocator<thiscall, 0x5FB280>(self: int {CPedGroupIntelligence}, pedGroupDefaultTaskAllocator: int)
function CPedGroupIntelligence_SetDefaultTaskAllocatorType<thiscall, 0x5FBB70>(self: int {CPedGroupIntelligence}, nPedGroupTaskAllocator: int)
function CPedGroupIntelligence_SetEventResponseTask<thiscall, 0x5F8510>(self: int {CPedGroupIntelligence}, ped: int, arg3: int, task1: int, arg5: int, task2: int, arg7: int)
function CPedGroupIntelligence_SetEventResponseTaskAllocator<thiscall, 0x5F7440>(self: int {CPedGroupIntelligence}, a2: int): int
function CPedGroupIntelligence_SetGroupDecisionMakerType<thiscall, 0x5F7340>(self: int {CPedGroupIntelligence}, a2: int): int
function CPedGroupIntelligence_SetPrimaryTaskAllocator<thiscall, 0x5F7410>(self: int {CPedGroupIntelligence}, taskAllocator: int)
function CPedGroupIntelligence_SetScriptCommandTask<thiscall, 0x5F8560>(self: int {CPedGroupIntelligence}, ped: int, task: int)
function CPedGroupIntelligence_SetTask<thiscall, 0x5F7540>(self: int {CPedGroupIntelligence}, ped: int, task: int, taskpair: int, arg5: int, arg6: int)
function CPedGroupMembership_AddFollower<thiscall, 0x5F8020>(self: int {CPedGroupMembership}, ped: int)
function CPedGroupMembership_AddMember<thiscall, 0x5F6AE0>(self: int {CPedGroupMembership}, member: int, memberId: int)
function CPedGroupMembership_AppointNewLeader<thiscall, 0x5FB240>(self: int {CPedGroupMembership})
function CPedGroupMembership_CountMembers<thiscall, 0x5F6A50>(self: int {CPedGroupMembership}): int
function CPedGroupMembership_CountMembersExcludingLeader<thiscall, 0x5F6AA0>(self: int {CPedGroupMembership}): int
function CPedGroupMembership_Flush<thiscall, 0x5FB160>(self: int {CPedGroupMembership})
function CPedGroupMembership_From<thiscall, 0x5F7FE0>(self: int {CPedGroupMembership}, obj: int)
function CPedGroupMembership_GetLeader<thiscall, 0x5F69A0>(self: int {CPedGroupMembership}): int
function CPedGroupMembership_GetMember<thiscall, 0x5F69B0>(self: int {CPedGroupMembership}, memberId: int): int
function CPedGroupMembership_IsFollower<thiscall, 0x5F69E0>(self: int {CPedGroupMembership}, ped: int): int
function CPedGroupMembership_IsLeader<thiscall, 0x5F69C0>(self: int {CPedGroupMembership}, ped: int): int
function CPedGroupMembership_IsMember<thiscall, 0x5F6A10>(self: int {CPedGroupMembership}, ped: int): int
function CPedGroupMembership_Process<thiscall, 0x5FBA60>(self: int {CPedGroupMembership})
function CPedGroupMembership_RemoveAllFollowers<thiscall, 0x5FB190>(self: int {CPedGroupMembership}, bCreatedByGameOnly: int)
function CPedGroupMembership_RemoveMember<thiscall, 0x5F80D0>(self: int {CPedGroupMembership}, memberId: int)
function CPedGroupMembership_RemoveNFollowers<thiscall, 0x5FB1D0>(self: int {CPedGroupMembership}, count: int): int
function CPedGroupMembership_SetLeader<thiscall, 0x5FB9C0>(self: int {CPedGroupMembership}, ped: int)
function CPedGroupMembership_GetObjectForPedToHold<cdecl, 0x5F6950>(): int
function CPedGroupPlacer_PlaceChatGroup<thiscall, 0x5FCE80>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, unused: int): int
function CPedGroupPlacer_PlaceFormationGroup<thiscall, 0x5FC9B0>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, unused: int): int
function CPedGroupPlacer_PlaceGroup<thiscall, 0x5FD810>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, nGroupPlacerType: int): int
function CPedGroupPlacer_PlaceRandomGroup<thiscall, 0x5FD330>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, unused: int): int
function CPedGroups_AddGroup<cdecl, 0x5FB800>(): int
function CPedGroups_AreInSameGroup<cdecl, 0x5F7F40>(ped1: int, ped2: int): int
function CPedGroups_GetGroupId<cdecl, 0x5F7EE0>(pedgrp: int): int
function CPedGroups_GetPedsGroup<cdecl, 0x5F7E80>(ped: int): int
function CPedGroups_IsGroupLeader<cdecl, 0x5F7E40>(ped: int): int
function CPedGroups_IsInPlayersGroup<cdecl, 0x5F7F10>(a1: int): int
function CPedIK_RotateTorso<thiscall, 0x5FDDB0>(self: int {CPedIK}, bone: int, orientation: int {LimbOrientation&}, flag: int {bool})
function CPedIK_PointGunInDirection<thiscall, 0x5FDC00>(self: int {CPedIK}, zAngle: float, arg2: float, flag: int {bool}, arg4: float): int
function CPedIK_PointGunAtPosition<thiscall, 0x5FDE20>(self: int {CPedIK}, posn: int {CVector const&}, arg2: float)
function CPedIK_GetWorldMatrix<cdecl, 0x5FD8F0>(frame: int, transformMat: int): int
function CPedIntelligence_SetPedDecisionMakerType<thiscall, 0x600B50>(self: int {CPedIntelligence}, newtype: int)
function CPedIntelligence_SetPedDecisionMakerTypeInGroup<thiscall, 0x600BB0>(self: int {CPedIntelligence}, newtype: int)
function CPedIntelligence_RestorePedDecisionMakerType<thiscall, 0x600BC0>(self: int {CPedIntelligence})
function CPedIntelligence_SetHearingRange<thiscall, 0x600BE0>(self: int {CPedIntelligence}, range: float)
function CPedIntelligence_SetSeeingRange<thiscall, 0x600BF0>(self: int {CPedIntelligence}, range: float)
function CPedIntelligence_IsInHearingRange<thiscall, 0x600C00>(self: int {CPedIntelligence}, posn: int {CVector const&}): int
function CPedIntelligence_IsInSeeingRange<thiscall, 0x600C60>(self: int {CPedIntelligence}, posn: int {CVector const&}): int
function CPedIntelligence_FindRespectedFriendInInformRange<thiscall, 0x600CF0>(self: int {CPedIntelligence}): int
function CPedIntelligence_IsRespondingToEvent<thiscall, 0x600DB0>(self: int {CPedIntelligence}, event: int): int
function CPedIntelligence_AddTaskPhysResponse<thiscall, 0x600DC0>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_AddTaskEventResponseTemp<thiscall, 0x600DE0>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_AddTaskEventResponseNonTemp<thiscall, 0x600E00>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_AddTaskPrimaryMaybeInGroup<thiscall, 0x600E20>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_FindTaskByType<thiscall, 0x600EE0>(self: int {CPedIntelligence}, type: int): int
function CPedIntelligence_GetTaskFighting<thiscall, 0x600F30>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskUseGun<thiscall, 0x600F70>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskThrow<thiscall, 0x600FB0>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskHold<thiscall, 0x600FF0>(self: int {CPedIntelligence}, arg1: int {bool}): int
function CPedIntelligence_GetTaskSwim<thiscall, 0x601070>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskDuck<thiscall, 0x6010A0>(self: int {CPedIntelligence}, arg1: int {bool}): int
function CPedIntelligence_GetTaskJetPack<thiscall, 0x601110>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskInAir<thiscall, 0x601150>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskClimb<thiscall, 0x601180>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetUsingParachute<thiscall, 0x6011B0>(self: int {CPedIntelligence}): int
function CPedIntelligence_SetTaskDuckSecondary<thiscall, 0x601230>(self: int {CPedIntelligence}, arg1: int)
function CPedIntelligence_ClearTaskDuckSecondary<thiscall, 0x601390>(self: int {CPedIntelligence})
function CPedIntelligence_ClearTasks<thiscall, 0x601420>(self: int {CPedIntelligence}, arg1: int {bool}, arg2: int {bool})
function CPedIntelligence_FlushImmediately<thiscall, 0x601640>(self: int {CPedIntelligence}, arg1: int {bool})
function CPedIntelligence_GetEffectInUse<thiscall, 0x6018D0>(self: int {CPedIntelligence}): int
function CPedIntelligence_SetEffectInUse<thiscall, 0x6018E0>(self: int {CPedIntelligence}, arg1: int)
function CPedIntelligence_ProcessAfterProcCol<thiscall, 0x6018F0>(self: int {CPedIntelligence})
function CPedIntelligence_ProcessAfterPreRender<thiscall, 0x6019B0>(self: int {CPedIntelligence})
function CPedIntelligence_ProcessEventHandler<thiscall, 0x601BB0>(self: int {CPedIntelligence})
function CPedIntelligence_IsFriendlyWith<thiscall, 0x601BC0>(self: int {CPedIntelligence}, ped: int {CPed const&}): int
function CPedIntelligence_IsThreatenedBy<thiscall, 0x601C30>(self: int {CPedIntelligence}, ped: int {CPed const&}): int
function CPedIntelligence_Respects<thiscall, 0x601C90>(self: int {CPedIntelligence}, ped: int {CPed const&}): int
function CPedIntelligence_IsInACarOrEnteringOne<thiscall, 0x601CC0>(self: int {CPedIntelligence}): int
function CPedIntelligence_AreFriends<cdecl, 0x601D10>(ped1: int {CPed const&}, ped2: int {CPed const&}): int
function CPedIntelligence_IsPedGoingSomewhereOnFoot<thiscall, 0x601D50>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetMoveStateFromGoToTask<thiscall, 0x601D70>(self: int {CPedIntelligence}): int
function CPedIntelligence_FlushIntelligence<thiscall, 0x601DA0>(self: int {CPedIntelligence})
function CPedIntelligence_TestForStealthKill<thiscall, 0x601E00>(self: int {CPedIntelligence}, pPed: int, arg2: int {bool}): int
function CPedIntelligence_RecordEventForScript<thiscall, 0x602050>(self: int {CPedIntelligence}, eventId: int, eventPriority: int)
function CPedIntelligence_HasInterestingEntites<thiscall, 0x602080>(self: int {CPedIntelligence}): int
function CPedIntelligence_IsInterestingEntity<thiscall, 0x6020A0>(self: int {CPedIntelligence}, pEntity: int): int
function CPedIntelligence_LookAtInterestingEntities<thiscall, 0x6020D0>(self: int {CPedIntelligence})
function CPedIntelligence_RemoveAllInterestingEntities<thiscall, 0x602320>(self: int {CPedIntelligence})
function CPedIntelligence_IsPedGoingForCarDoor<thiscall, 0x602350>(self: int {CPedIntelligence}): int
function CPedIntelligence_CanSeeEntityWithLights<thiscall, 0x605550>(self: int {CPedIntelligence}, pEntity: int, arg2: int {bool}): float
function CPedIntelligence_ProcessStaticCounter<thiscall, 0x605650>(self: int {CPedIntelligence})
function CPedIntelligence_ProcessFirst<thiscall, 0x6073A0>(self: int {CPedIntelligence})
function CPedIntelligence_Process<thiscall, 0x608260>(self: int {CPedIntelligence})
function CPedIntelligence_operator delete<cdecl, 0x6074E0>(arg1: int)
function CPedList_BuildListFromGroup_NoLeader<thiscall, 0x699DD0>(self: int {CPedList}, pedGroupMemberShip: int)
function CPedList_BuildListFromGroup_NotInCar_NoLeader<thiscall, 0x69A340>(self: int {CPedList}, pedGroupMembership: int)
function CPedList_BuildListOfPedsOfPedType<thiscall, 0x69A3B0>(self: int {CPedList}, pedtype: int)
function CPedList_Empty<thiscall, 0x699DB0>(self: int {CPedList})
function CPedList_ExtractPedsWithGuns<thiscall, 0x69A4C0>(self: int {CPedList}, pedlist: int)
function CPedList_FillUpHoles<thiscall, 0x699E20>(self: int {CPedList})
function CPedList_RemovePedsAttackingPedType<thiscall, 0x69A450>(self: int {CPedList}, pedtype: int)
function CPedList_RemovePedsThatDontListenToPlayer<thiscall, 0x69A420>(self: int {CPedList})
function CPedPlacement_FindZCoorForPed<cdecl, 0x616920>(pos: int): int
function CPedPlacement_IsPositionClearForPed<cdecl, 0x616860>(pos: int, radius: float, maxNumObjects: int, pObjectList: int, bCheckVehicles: int, bCheckPeds: int, bCheckObjects: int): int
function CPedPlacement_IsPositionClearOfCars<cdecl, 0x616A40>(pos: int): int
function CPedPlacement_IsPositionClearOfCars<cdecl, 0x616A40>(ped: int): int
function CPedTaskPair_Flush<thiscall, 0x5E95B0>(self: int {CPedTaskPair})
function CPickup_SetPosn<thiscall, 0x454960>(self: int {CPickup}, x: float, y: float, z: float)
function CPickup_GetXCoord<thiscall, 0x4549F0>(self: int {CPickup}): float
function CPickup_GetYCoord<thiscall, 0x454A10>(self: int {CPickup}): float
function CPickup_GetZCoord<thiscall, 0x454A30>(self: int {CPickup}): float
function CPickup_ExtractAmmoFromPickup<thiscall, 0x454BE0>(self: int {CPickup}, playerPed: int)
function CPickup_IsVisible<thiscall, 0x454C70>(self: int {CPickup}): int
function CPickup_GetRidOfObjects<thiscall, 0x454CF0>(self: int {CPickup})
function CPickup_PickUpShouldBeInvisible<thiscall, 0x454D20>(self: int {CPickup}): int
function CPickup_FindTextIndexForString<cdecl, 0x455500>(message: int)
function CPickup_FindStringForTextIndex<cdecl, 0x455540>(index: int): int
function CPickup_Remove<thiscall, 0x4556C0>(self: int {CPickup})
function CPickup_GiveUsAPickUpObject<thiscall, 0x4567E0>(self: int {CPickup}, pObject: int, objectPoolSlotIndex: int)
function CPickup_Update<thiscall, 0x457410>(self: int {CPickup}, playerPed: int, vehicle: int {CVehicle}, playerId: int): int
function CPickup_ProcessGunShot<thiscall, 0x4588B0>(self: int {CPickup}, origin: int, target: int)
function CPickups_AddToCollectedPickupsArray<cdecl, 0x455240>(handle: int)
function CPickups_CreatePickupCoorsCloseToCoors<cdecl, 0x458A80>(inX: float, inY: float, inZ: float, outX: int, outY: int, outZ: int)
function CPickups_CreateSomeMoney<cdecl, 0x458970>(coors: int {CVector}, amount: int)
function CPickups_DetonateMinesHitByGunShot<cdecl, 0x4590C0>(shotOrigin: int, shotTarget: int)
function CPickups_DoCollectableEffects<cdecl, 0x455E20>(entity: int)
function CPickups_DoMineEffects<cdecl, 0x4560E0>(entity: int)
function CPickups_DoMoneyEffects<cdecl, 0x454E80>(entity: int)
function CPickups_DoPickUpEffects<cdecl, 0x455720>(entity: int)
function CPickups_FindPickUpForThisObject<cdecl, 0x4551C0>(object: int): int
function CPickups_GenerateNewOne<cdecl, 0x456F20>(coors: int {CVector}, modelId: int, pickupType: int, ammo: int, moneyPerDay: int, isEmpty: int {bool}, message: int): int
function CPickups_GenerateNewOne_WeaponType<cdecl, 0x457380>(coors: int {CVector}, weaponType: int {eWeaponType}, pickupType: int, ammo: int, isEmpty: int {bool}, message: int): int
function CPickups_GetActualPickupIndex<cdecl, 0x4552A0>(pickupIndex: int): int
function CPickups_GetNewUniquePickupIndex<cdecl, 0x456A30>(pickupIndex: int): int
function CPickups_GetUniquePickupIndex<cdecl, 0x455280>(pickupIndex: int): int
function CPickups_GivePlayerGoodiesWithPickUpMI<cdecl, 0x4564F0>(modelId: int, playerId: int): int
function CPickups_Init<cdecl, 0x454A70>()
function CPickups_IsPickUpPickedUp<cdecl, 0x454B40>(pickupHandle: int): int
function CPickups_Load<cdecl, 0x5D35A0>(): int
function CPickups_ModelForWeapon<cdecl, 0x454AC0>(weaponType: int {eWeaponType}): int
function CPickups_PassTime<cdecl, 0x455200>(time: int)
function CPickups_PickedUpHorseShoe<cdecl, 0x455390>()
function CPickups_PickedUpOyster<cdecl, 0x4552D0>()
function CPickups_PictureTaken<cdecl, 0x456A70>()
function CPickups_PlayerCanPickUpThisWeaponTypeAtThisMoment<cdecl, 0x4554C0>(weaponType: int {eWeaponType}): int
function CPickups_ReInit<cdecl, 0x456E60>()
function CPickups_RemoveMissionPickUps<cdecl, 0x456DE0>()
function CPickups_RemovePickUp<cdecl, 0x4573D0>(pickupHandle: int)
function CPickups_RemovePickUpsInArea<cdecl, 0x456D30>(cornerAx: float, cornerAy: float, cornerAz: float, cornerBx: float, cornerBy: float, cornerBz: float)
function CPickups_RemovePickupObjects<cdecl, 0x455470>()
function CPickups_RemoveUnnecessaryPickups<cdecl, 0x4563A0>(posn: int {CVector const&}, radius: float)
function CPickups_RenderPickUpText<cdecl, 0x455000>()
function CPickups_Save<cdecl, 0x5D3540>(): int
function CPickups_TestForPickupsInBubble<cdecl, 0x456450>(posn: int {CVector}, radius: float): int
function CPickups_TryToMerge_WeaponType<cdecl, 0x4555A0>(posn: int {CVector}, weaponType: int {eWeaponType}, pickupType: int, ammo: int, arg4: int {bool}): int
function CPickups_Update<cdecl, 0x458DE0>()
function CPickups_UpdateMoneyPerDay<cdecl, 0x455680>(pickupHandle: int, money: int)
function CPickups_WeaponForModel<cdecl, 0x454AE0>(modelId: int): int
function CPlayerPed_CPlayerPed<thiscall, 0x60D5B0>(self: int {CPlayerPed}, playerId: int, bGroupCreated: int {bool})
function CPlayerPed_RemovePlayerPed<cdecl, 0x6094A0>(playerId: int)
function CPlayerPed_DeactivatePlayerPed<cdecl, 0x609520>(playerId: int)
function CPlayerPed_ReactivatePlayerPed<cdecl, 0x609540>(playerId: int)
function CPlayerPed_GetPadFromPlayer<thiscall, 0x609560>(self: int {CPlayerPed}): int
function CPlayerPed_CanPlayerStartMission<thiscall, 0x609590>(self: int {CPlayerPed}): int
function CPlayerPed_IsHidden<thiscall, 0x609620>(self: int {CPlayerPed}): int
function CPlayerPed_ReApplyMoveAnims<thiscall, 0x609650>(self: int {CPlayerPed})
function CPlayerPed_DoesPlayerWantNewWeapon<thiscall, 0x609710>(self: int {CPlayerPed}, weaponType: int {eWeaponType}, arg1: int {bool}): int
function CPlayerPed_ProcessPlayerWeapon<thiscall, 0x6097F0>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_PickWeaponAllowedFor2Player<thiscall, 0x609800>(self: int {CPlayerPed})
function CPlayerPed_UpdateCameraWeaponModes<thiscall, 0x609830>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_ProcessAnimGroups<thiscall, 0x6098F0>(self: int {CPlayerPed})
function CPlayerPed_ClearWeaponTarget<thiscall, 0x609C80>(self: int {CPlayerPed})
function CPlayerPed_GetWeaponRadiusOnScreen<thiscall, 0x609CD0>(self: int {CPlayerPed}): float
function CPlayerPed_PedCanBeTargettedVehicleWise<cdecl, 0x609D90>(ped: int): int
function CPlayerPed_FindTargetPriority<thiscall, 0x609DE0>(self: int {CPlayerPed}, entity: int): float
function CPlayerPed_Clear3rdPersonMouseTarget<thiscall, 0x609ED0>(self: int {CPlayerPed})
function CPlayerPed_Busted<thiscall, 0x609EF0>(self: int {CPlayerPed})
function CPlayerPed_SetWantedLevel<thiscall, 0x609F10>(self: int {CPlayerPed}, level: int)
function CPlayerPed_SetWantedLevelNoDrop<thiscall, 0x609F30>(self: int {CPlayerPed}, level: int)
function CPlayerPed_CheatWantedLevel<thiscall, 0x609F50>(self: int {CPlayerPed}, level: int)
function CPlayerPed_CanIKReachThisTarget<thiscall, 0x609F80>(self: int {CPlayerPed}, posn: int {CVector}, weapon: int, arg2: int {bool}): int
function CPlayerPed_GetPlayerInfoForThisPlayerPed<thiscall, 0x609FF0>(self: int {CPlayerPed}): int
function CPlayerPed_DoStuffToGoOnFire<thiscall, 0x60A020>(self: int {CPlayerPed})
function CPlayerPed_AnnoyPlayerPed<thiscall, 0x60A040>(self: int {CPlayerPed}, arg0: int {bool})
function CPlayerPed_ClearAdrenaline<thiscall, 0x60A070>(self: int {CPlayerPed})
function CPlayerPed_DisbandPlayerGroup<thiscall, 0x60A0A0>(self: int {CPlayerPed})
function CPlayerPed_MakeGroupRespondToPlayerTakingDamage<thiscall, 0x60A110>(self: int {CPlayerPed}, damageEvent: int {CEventDamage const&})
function CPlayerPed_TellGroupToStartFollowingPlayer<thiscall, 0x60A1D0>(self: int {CPlayerPed}, arg0: int {bool}, arg1: int {bool}, arg2: int {bool})
function CPlayerPed_MakePlayerGroupDisappear<thiscall, 0x60A440>(self: int {CPlayerPed})
function CPlayerPed_MakePlayerGroupReappear<thiscall, 0x60A4B0>(self: int {CPlayerPed})
function CPlayerPed_ResetSprintEnergy<thiscall, 0x60A530>(self: int {CPlayerPed})
function CPlayerPed_HandleSprintEnergy<thiscall, 0x60A550>(self: int {CPlayerPed}, arg0: int {bool}, arg1: float): int
function CPlayerPed_ControlButtonSprint<thiscall, 0x60A610>(self: int {CPlayerPed}, sprintType: int {eSprintType}): float
function CPlayerPed_GetButtonSprintResults<thiscall, 0x60A820>(self: int {CPlayerPed}, sprintType: int {eSprintType}): float
function CPlayerPed_ResetPlayerBreath<thiscall, 0x60A8A0>(self: int {CPlayerPed})
function CPlayerPed_HandlePlayerBreath<thiscall, 0x60A8D0>(self: int {CPlayerPed}, arg0: int {bool}, arg1: float)
function CPlayerPed_SetRealMoveAnim<thiscall, 0x60A9C0>(self: int {CPlayerPed})
function CPlayerPed_MakeChangesForNewWeapon<thiscall, 0x60B460>(self: int {CPlayerPed}, weaponType: int {eWeaponType})
function CPlayerPed_Compute3rdPersonMouseTarget<thiscall, 0x60B650>(self: int {CPlayerPed}, meleeWeapon: int {bool})
function CPlayerPed_DrawTriangleForMouseRecruitPed<thiscall, 0x60BA80>(self: int {CPlayerPed})
function CPlayerPed_DoesTargetHaveToBeBroken<thiscall, 0x60C0C0>(self: int {CPlayerPed}, entity: int, weapon: int): int
function CPlayerPed_KeepAreaAroundPlayerClear<thiscall, 0x60C1E0>(self: int {CPlayerPed})
function CPlayerPed_SetPlayerMoveBlendRatio<thiscall, 0x60C520>(self: int {CPlayerPed}, arg0: int)
function CPlayerPed_FindPedToAttack<thiscall, 0x60C5F0>(self: int {CPlayerPed}): int
function CPlayerPed_ForceGroupToAlwaysFollow<thiscall, 0x60C7C0>(self: int {CPlayerPed}, enable: int {bool})
function CPlayerPed_ForceGroupToNeverFollow<thiscall, 0x60C800>(self: int {CPlayerPed}, enable: int {bool})
function CPlayerPed_MakeThisPedJoinOurGroup<thiscall, 0x60C840>(self: int {CPlayerPed}, ped: int)
function CPlayerPed_PlayerWantsToAttack<thiscall, 0x60CC50>(self: int {CPlayerPed}): int
function CPlayerPed_SetInitialState<thiscall, 0x60CD20>(self: int {CPlayerPed}, bGroupCreated: int {bool})
function CPlayerPed_MakeChangesForNewWeapon<thiscall, 0x60D000>(self: int {CPlayerPed}, weaponSlot: int)
function CPlayerPed_EvaluateTarget<thiscall, 0x60D020>(self: int {CPlayerPed}, target: int, outTarget: int, outTargetPriority: int, maxDistance: float, arg4: float, arg5: int {bool})
function CPlayerPed_EvaluateNeighbouringTarget<thiscall, 0x60D1C0>(self: int {CPlayerPed}, target: int, outTarget: int, outTargetPriority: int, maxDistance: float, arg4: float, arg5: int {bool})
function CPlayerPed_ProcessGroupBehaviour<thiscall, 0x60D350>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_PlayerHasJustAttackedSomeone<thiscall, 0x60D5A0>(self: int {CPlayerPed}): int
function CPlayerPed_SetupPlayerPed<cdecl, 0x60D790>(playerId: int)
function CPlayerPed_ProcessWeaponSwitch<thiscall, 0x60D850>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_FindWeaponLockOnTarget<thiscall, 0x60DC50>(self: int {CPlayerPed}): int
function CPlayerPed_FindNextWeaponLockOnTarget<thiscall, 0x60E530>(self: int {CPlayerPed}, arg0: int, arg1: int {bool}): int
function CPlayerPed_GetWantedLevel<thiscall, 0x41BE60>(self: int {CPlayerPed}): int
function CPointLights_Init<cdecl, 0x6FFB40>()
function CPointLights_GenerateLightsAffectingObject<cdecl, 0x6FFBB0>(point: int, totalLighting: int, entity: int): float
function CPointLights_GetLightMultiplier<cdecl, 0x6FFE70>(point: int): float
function CPointLights_RemoveLightsAffectingObject<cdecl, 0x6FFFE0>()
function CPointLights_ProcessVerticalLineUsingCache<cdecl, 0x6FFFF0>(point: int {CVector}, outZ: int): int
function CPointLights_AddLight<cdecl, 0x7000E0>(lightType: int, point: int {CVector}, direction: int {CVector}, radius: float, red: float, green: float, blue: float, fogType: int, generateExtraShadows: int {bool}, entityAffected: int)
function CPointLights_RenderFogEffect<cdecl, 0x7002D0>()
function CPointList_Empty<thiscall, 0x699F00>(self: int {CPointList})
function CPools_CheckBuildingAtomics<cdecl, 0x550170>(): int
function CPools_CheckPoolsEmpty<cdecl, 0x551950>()
function CPools_GetObject<cdecl, 0x550050>(handle: int): int
function CPools_GetObjectRef<cdecl, 0x550020>(object: int): int
function CPools_GetPed<cdecl, 0x54FF90>(handle: int): int
function CPools_GetPedRef<cdecl, 0x54FF60>(ped: int): int
function CPools_GetVehicle<cdecl, 0x54FFF0>(handle: int): int
function CPools_GetVehicleRef<cdecl, 0x54FFC0>(vehicle: int {CVehicle}): int
function CPools_Initialise<cdecl, 0x550F10>()
function CPools_Load<cdecl, 0x5D0890>(): int
function CPools_LoadObjectPool<cdecl, 0x5D4A40>(): int
function CPools_LoadPedPool<cdecl, 0x5D2D70>(): int
function CPools_LoadVehiclePool<cdecl, 0x5D2A20>(): int
function CPools_MakeSureSlotInObjectPoolIsEmpty<cdecl, 0x550080>(slot: int)
function CPools_Save<cdecl, 0x5D0880>(): int
function CPools_SaveObjectPool<cdecl, 0x5D4940>(): int
function CPools_SavePedPool<cdecl, 0x5D4B40>(): int
function CPools_SaveVehiclePool<cdecl, 0x5D4800>(): int
function CPools_ShutDown<cdecl, 0x5519F0>()
function CPopCycle_FindNewPedType<cdecl, 0x60FBD0>(arg1: int, modelindex: int, arg3: int {bool}, arg4: int {bool}): int
function CPopCycle_GetCurrentPercOther_Peds<cdecl, 0x610310>(): float
function CPopCycle_Initialise<cdecl, 0x5BC090>()
function CPopCycle_IsPedAppropriateForCurrentZone<cdecl, 0x610150>(modelindex: int): int
function CPopCycle_IsPedInGroup<cdecl, 0x610210>(modelIndex: int, popCycleGroup: int): int
function CPopCycle_PedIsAcceptableInCurrentZone<cdecl, 0x610720>(modelIndex: int): int
function CPopCycle_PickARandomGroupOfOtherPeds<cdecl, 0x610420>(): int
function CPopCycle_PlayerKilledADealer<cdecl, 0x610490>()
function CPopCycle_Update<cdecl, 0x610BF0>()
function CPopCycle_UpdateAreaDodgyness<cdecl, 0x610560>()
function CPopCycle_UpdateDealerStrengths<cdecl, 0x6104B0>()
function CPopCycle_UpdatePercentages<cdecl, 0x610770>()
function CProjectileInfo_Initialise<cdecl, 0x737B40>()
function CProjectileInfo_RemoveFXSystem<cdecl, 0x737B80>(bInstantly: int)
function CProjectileInfo_Shutdown<cdecl, 0x737BC0>()
function CProjectileInfo_GetProjectileInfo<cdecl, 0x737BF0>(infoId: int): int
function CProjectileInfo_RemoveNotAdd<cdecl, 0x737C00>(creator: int, weaponType: int {eWeaponType}, posn: int {CVector})
function CProjectileInfo_AddProjectile<cdecl, 0x737C80>(creator: int, weaponType: int {eWeaponType}, posn: int {CVector}, force: float, direction: int, victim: int): int
function CProjectileInfo_RemoveDetonatorProjectiles<cdecl, 0x738860>()
function CProjectileInfo_RemoveProjectile<cdecl, 0x7388F0>(projectileInfo: int, projectileObject: int)
function CProjectileInfo_Update<cdecl, 0x738B20>()
function CProjectileInfo_IsProjectileInRange<cdecl, 0x739860>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, bDestroy: int {bool}): int
function CProjectileInfo_RemoveAllProjectiles<cdecl, 0x7399B0>()
function CProjectileInfo_RemoveIfThisIsAProjectile<cdecl, 0x739A40>(object: int): int
function CPtrList_CountElements<thiscall, 0x5521B0>(self: int {CPtrList}): int
function CPtrList_IsMemberOfList<thiscall, 0x5521D0>(self: int {CPtrList}, memberNode: int): int
function CPtrListDoubleLink_Flush<thiscall, 0x552470>(self: int {CPtrListDoubleLink})
function CPtrListDoubleLink_AddItem<thiscall, 0x533670>(self: int {CPtrListDoubleLink}, item: int)
function CPtrListDoubleLink_DeleteItem<thiscall, 0x5336B0>(self: int {CPtrListDoubleLink}, item: int)
function CPtrListSingleLink_Flush<thiscall, 0x552400>(self: int {CPtrListSingleLink})
function CPtrListSingleLink_AddItem<thiscall, 0x5335E0>(self: int {CPtrListSingleLink}, item: int)
function CPtrListSingleLink_DeleteItem<thiscall, 0x533610>(self: int {CPtrListSingleLink}, item: int)
function CPtrNodeDoubleLink_operator new<cdecl, 0x5523C0>(size: int): int
function CPtrNodeDoubleLink_operator delete<cdecl, 0x5523D0>(data: int)
function CPtrNodeSingleLink_operator new<cdecl, 0x552380>(size: int): int
function CPtrNodeSingleLink_operator delete<cdecl, 0x552390>(data: int)
function CQuadTreeNode_AddItem<thiscall, 0x552CD0>(self: int {CQuadTreeNode}, item: int, rect: int {CRect const&})
/// Initializes a CQuadTreeNode struct
function CQuadTreeNode_ctor<thiscall, 0x552830>(self: int {CQuadTreeNode}, rect: int {CRect const&}, startLevel: int): int {CQuadTreeNode}
function CQuadTreeNode_DeleteItem<thiscall, 0x552A40>(self: int {CQuadTreeNode}, item: int)
function CQuadTreeNode_DeleteItem<thiscall, 0x552A90>(self: int {CQuadTreeNode}, item: int, rect: int {CRect const&})
function CQuadTreeNode_FindSector<thiscall, 0x5525A0>(self: int {CQuadTreeNode}, rect: int {CRect const&}): int
function CQuadTreeNode_FindSector<thiscall, 0x552640>(self: int {CQuadTreeNode}, posn: int {CVector2D const&}): int
function CQuadTreeNode_ForAllMatching<thiscall, 0x552980>(self: int {CQuadTreeNode}, rect: int {CRect const&}, callback: int)
function CQuadTreeNode_ForAllMatching<thiscall, 0x5529F0>(self: int {CQuadTreeNode}, posn: int {CVector2D const&}, callback: int)
function CQuadTreeNode_GetAll<thiscall, 0x552870>(self: int {CQuadTreeNode}, list: int {CPtrListSingleLink&})
function CQuadTreeNode_GetAllMatching<thiscall, 0x5528C0>(self: int {CQuadTreeNode}, rect: int {CRect const&}, list: int {CPtrListSingleLink&})
function CQuadTreeNode_GetAllMatching<thiscall, 0x552930>(self: int {CQuadTreeNode}, posn: int {CVector2D const&}, list: int {CPtrListSingleLink&})
function CQuadTreeNode_InSector<thiscall, 0x5526A0>(self: int {CQuadTreeNode}, rect: int {CRect const&}, sector: int): int
function CQuadTreeNode_InitPool<thiscall, 0x552C00>(self: int {CQuadTreeNode})
function CQuadTreeNode_operator delete<cdecl, 0x552C90>(data: int)
function CQuadTreeNode_operator new<cdecl, 0x552C80>(size: int): int
/// Deinitializes the CQuadTreeNode struct
function CQuadTreeNode_dtor<thiscall, 0x552520>(self: int {CQuadTreeNode})
function CRegisteredMotionBlurStreak_Update<thiscall, 0x721EE0>(self: int {CRegisteredMotionBlurStreak})
function CRegisteredMotionBlurStreak_Render<thiscall, 0x721F70>(self: int {CRegisteredMotionBlurStreak})
function CRenderer_Init<cdecl, 0x5531C0>()
function CRenderer_Shutdown<cdecl, 0x5531D0>()
function CRenderer_RenderFadingInEntities<cdecl, 0x5531E0>()
function CRenderer_RenderFadingInUnderwaterEntities<cdecl, 0x553220>()
function CRenderer_RenderOneRoad<cdecl, 0x553230>(entity: int)
function CRenderer_RenderOneNonRoad<cdecl, 0x553260>(entity: int)
function CRenderer_RemoveVehiclePedLights<cdecl, 0x553390>(entity: int)
function CRenderer_AddEntityToRenderList<cdecl, 0x5534B0>(entity: int, distance: float)
function CRenderer_ScanSectorList_ListModels<cdecl, 0x5535D0>(sectorX: int, sectorY: int)
function CRenderer_ScanSectorList_ListModelsVisible<cdecl, 0x553650>(sectorX: int, sectorY: int)
function CRenderer_GetLodRenderListBase<cdecl, 0x5536D0>(): int
function CRenderer_GetLodDontRenderListBase<cdecl, 0x5536E0>(): int
function CRenderer_ResetLodRenderLists<cdecl, 0x5536F0>()
function CRenderer_AddToLodRenderList<cdecl, 0x553710>(entity: int, distance: float)
function CRenderer_AddToLodDontRenderList<cdecl, 0x553740>(entity: int, distance: float)
function CRenderer_ProcessLodRenderLists<cdecl, 0x553770>()
function CRenderer_PreRender<cdecl, 0x553910>()
function CRenderer_RenderRoads<cdecl, 0x553A10>()
function CRenderer_RenderEverythingBarRoads<cdecl, 0x553AA0>()
function CRenderer_RenderFirstPersonVehicle<cdecl, 0x553D00>()
function CRenderer_SetupLightingForEntity<cdecl, 0x553E40>(entity: int): int
function CRenderer_SetupMapEntityVisibility<cdecl, 0x553F60>(entity: int, modelInfo: int, distance: float, arg3: int {bool}): int
function CRenderer_SetupEntityVisibility<cdecl, 0x554230>(entity: int, outDistance: int {float&}): int
function CRenderer_SetupBigBuildingVisibility<cdecl, 0x554650>(entity: int, outDistance: int {float&}): int
function CRenderer_ScanSectorList<cdecl, 0x554840>(sectorX: int, sectorY: int)
function CRenderer_ScanBigBuildingList<cdecl, 0x554B10>(sectorX: int, sectorY: int)
function CRenderer_GetObjectsInFrustum<cdecl, 0x554C60>(outEntities: int, distance: float, transformMat: int): int
function CRenderer_ShouldModelBeStreamed<cdecl, 0x554EB0>(entity: int, origin: int {CVector const&}, farClip: float): int
function CRenderer_ScanWorld<cdecl, 0x554FE0>()
function CRenderer_ScanPtrList_RequestModels<cdecl, 0x555680>(ptrList: int {CPtrList&})
function CRenderer_ConstructRenderList<cdecl, 0x5556E0>()
function CRenderer_ScanSectorList_RequestModels<cdecl, 0x555900>(sectorX: int, sectorY: int)
function CRenderer_RequestObjectsInFrustum<cdecl, 0x555960>(transformMat: int, modelRequesFlags: int)
function CRenderer_RequestObjectsInDirection<cdecl, 0x555CB0>(posn: int {CVector const&}, angle: float, modelRequesFlags: int)
function CRenderer_SetupScanLists<cdecl, 0x553540>(sectorX: int, sectorY: int)
function CRunningScript_AddScriptToList<thiscall, 0x464C00>(self: int {CRunningScript}, queuelist: int)
function CRunningScript_CarInAreaCheckCommand<thiscall, 0x488EC0>(self: int {CRunningScript}, commandId: int)
function CRunningScript_CharInAngledAreaCheckCommand<thiscall, 0x487F60>(self: int {CRunningScript}, commandId: int)
function CRunningScript_CharInAreaCheckCommand<thiscall, 0x488B50>(self: int {CRunningScript}, commandId: int)
function CRunningScript_CollectNextParameterWithoutIncreasingPC<thiscall, 0x464250>(self: int {CRunningScript}): int
function CRunningScript_CollectParameters<thiscall, 0x464080>(self: int {CRunningScript}, count: int)
function CRunningScript_DoDeatharrestCheck<thiscall, 0x485A50>(self: int {CRunningScript})
function CRunningScript_FlameInAngledAreaCheckCommand<thiscall, 0x488780>(self: int {CRunningScript}, commandId: int)
function CRunningScript_GetCorrectPedModelIndexForEmergencyServiceType<thiscall, 0x464F50>(self: int {CRunningScript}, pedType: int, pModelId: int)
function CRunningScript_GetIndexOfGlobalVariable<thiscall, 0x464700>(self: int {CRunningScript}): int
function CRunningScript_GetPadState<thiscall, 0x485B10>(self: int {CRunningScript}, playerIndex: int, buttonId: int): int
function CRunningScript_GetPointerToLocalArrayElement<thiscall, 0x463CC0>(self: int {CRunningScript}, off: int, idx: int, mul: int): int
function CRunningScript_GetPointerToLocalVariable<thiscall, 0x463CA0>(self: int {CRunningScript}, varId: int): int
function CRunningScript_GetPointerToScriptVariable<thiscall, 0x464790>(self: int {CRunningScript}, variableType: int): int
function CRunningScript_GivePedScriptedTask<thiscall, 0x465C20>(self: int {CRunningScript}, pedHandle: int, task: int, commandId: int)
function CRunningScript_Init<thiscall, 0x4648E0>(self: int {CRunningScript})
function CRunningScript_IsPedDead<thiscall, 0x464D70>(self: int {CRunningScript}, pPed: int): int
function CRunningScript_LocateCarCommand<thiscall, 0x487A20>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharCarCommand<thiscall, 0x487420>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharCharCommand<thiscall, 0x4870F0>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharCommand<thiscall, 0x486D80>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharObjectCommand<thiscall, 0x487720>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateObjectCommand<thiscall, 0x487D10>(self: int {CRunningScript}, commandId: int)
function CRunningScript_ObjectInAngledAreaCheckCommand<thiscall, 0x4883F0>(self: int {CRunningScript}, commandId: int)
function CRunningScript_ObjectInAreaCheckCommand<thiscall, 0x489150>(self: int {CRunningScript}, commandId: int)
function CRunningScript_PlayAnimScriptCommand<thiscall, 0x470150>(self: int {CRunningScript}, commandId: int)
function CRunningScript_Process<thiscall, 0x469F00>(self: int {CRunningScript})
function CRunningScript_ProcessCommands0To99<thiscall, 0x465E60>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1000To1099<thiscall, 0x489500>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands100To199<thiscall, 0x466DE0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1100To1199<thiscall, 0x48A320>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1200To1299<thiscall, 0x48B590>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1300To1399<thiscall, 0x48CDD0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1400To1499<thiscall, 0x48EAA0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1500To1599<thiscall, 0x490DB0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1600To1699<thiscall, 0x493FE0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1700To1799<thiscall, 0x496E00>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1800To1899<thiscall, 0x46D050>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1900To1999<thiscall, 0x46B460>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2000To2099<thiscall, 0x472310>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands200To299<thiscall, 0x469390>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2100To2199<thiscall, 0x470A90>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2200To2299<thiscall, 0x474900>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2300To2399<thiscall, 0x4762D0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2400To2499<thiscall, 0x478000>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2500To2599<thiscall, 0x47A760>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2600To2699<thiscall, 0x479DA0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands300To399<thiscall, 0x47C100>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands400To499<thiscall, 0x47D210>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands500To599<thiscall, 0x47E090>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands600To699<thiscall, 0x47F370>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands700To799<thiscall, 0x47FA30>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands800To899<thiscall, 0x481300>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands900To999<thiscall, 0x483BD0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessOneCommand<thiscall, 0x469EB0>(self: int {CRunningScript})
function CRunningScript_ReadArrayInformation<thiscall, 0x463CF0>(self: int {CRunningScript}, move: int, pOffset: int, pIdx: int)
function CRunningScript_ReadParametersForNewlyStartedScript<thiscall, 0x464500>(self: int {CRunningScript}, pNewScript: int)
function CRunningScript_ReadTextLabelFromScript<thiscall, 0x463D50>(self: int {CRunningScript}, pBuffer: int, nBufferLength: int)
function CRunningScript_RemoveScriptFromList<thiscall, 0x464BD0>(self: int {CRunningScript}, queuelist: int)
function CRunningScript_ScriptTaskPickUpObject<thiscall, 0x46AF50>(self: int {CRunningScript}, commandId: int)
function CRunningScript_SetCharCoordinates<thiscall, 0x464DC0>(self: int {CRunningScript}, pPed: int, xCoord: int, yCoord: int, zCoord: int, bWarpGang: int, bOffset: int)
function CRunningScript_ShutdownThisScript<thiscall, 0x465AA0>(self: int {CRunningScript})
function CRunningScript_StoreParameters<thiscall, 0x464370>(self: int {CRunningScript}, count: int)
function CRunningScript_ThisIsAValidRandomPed<thiscall, 0x489490>(self: int {CRunningScript}, pedType: int {ePedType}, civilian: int {bool}, gang: int {bool}, criminal: int {bool}): int
function CRunningScript_UpdateCompareFlag<thiscall, 0x4859D0>(self: int {CRunningScript}, state: int)
function CRunningScript_UpdatePC<thiscall, 0x464DA0>(self: int {CRunningScript}, newIp: int)
function CScriptResourceManager_AddToResourceManager<thiscall, 0x4704B0>(self: int {CScriptResourceManager}, modelId: int, resourceType: int, pScript: int)
function CScriptResourceManager_HasResourceBeenRequested<thiscall, 0x470620>(self: int {CScriptResourceManager}, modelId: int, a4: int): int
function CScriptResourceManager_RemoveFromResourceManager<thiscall, 0x470510>(self: int {CScriptResourceManager}, modelId: int, resourceType: int, pScript: int): int
function CScriptsForBrains_AddNewScriptBrain<thiscall, 0x46A930>(self: int {CScriptsForBrains}, imgIndex: int, model: int, priority: int, attachType: int, type: int, radius: int)
function CScriptsForBrains_AddNewStreamedScriptBrainForCodeUse<thiscall, 0x46A9C0>(self: int {CScriptsForBrains}, a2: int, a3: int, attachtype: int)
function CScriptsForBrains_CheckIfNewEntityNeedsScript<thiscall, 0x46FF20>(self: int {CScriptsForBrains}, pEntity: int, attachType: int, unused: int)
function CScriptsForBrains_GetIndexOfScriptBrainWithThisName<thiscall, 0x46AA30>(self: int {CScriptsForBrains}, name: int, attachtype: int): int
function CScriptsForBrains_HasAttractorScriptBrainWithThisNameLoaded<thiscall, 0x46AB20>(self: int {CScriptsForBrains}, name: int): int
function CScriptsForBrains_Init<thiscall, 0x46A8C0>(self: int {CScriptsForBrains})
function CScriptsForBrains_IsObjectWithinBrainActivationRange<thiscall, 0x46B3D0>(self: int {CScriptsForBrains}, entity: int, point: int): int
function CScriptsForBrains_MarkAttractorScriptBrainWithThisNameAsNoLongerNeeded<thiscall, 0x46AAE0>(self: int {CScriptsForBrains}, name: int)
function CScriptsForBrains_RequestAttractorScriptBrainWithThisName<thiscall, 0x46AA80>(self: int {CScriptsForBrains}, name: int)
function CScriptsForBrains_StartAttractorScriptBrainWithThisName<thiscall, 0x46B390>(self: int {CScriptsForBrains}, name: int, pEntity: int, bHasAScriptBrain: int)
function CScriptsForBrains_StartNewStreamedScriptBrain<thiscall, 0x46B270>(self: int {CScriptsForBrains}, index: int, pEntity: int, bHasAScriptBrain: int)
function CScriptsForBrains_StartOrRequestNewStreamedScriptBrain<thiscall, 0x46CD80>(self: int {CScriptsForBrains}, index: int, pEntity: int, attachType: int, bAddToWaitingArray: int)
function CScriptsForBrains_StartOrRequestNewStreamedScriptBrainWithThisName<thiscall, 0x46CED0>(self: int {CScriptsForBrains}, name: int, pEntity: int, attachType: int)
function CScriptsForBrains_SwitchAllObjectBrainsWithThisID<thiscall, 0x46A900>(self: int {CScriptsForBrains}, id: int, bStatus: int)
function CSetPiece_TryToGenerateCopPed<thiscall, 0x499690>(self: int {CSetPiece}, posn: int {CVector2D}): int
function CSetPiece_TryToGenerateCopCar<thiscall, 0x4998A0>(self: int {CSetPiece}, posn: int {CVector2D}, target: int {CVector2D}): int
function CSetPiece_Update<thiscall, 0x499A80>(self: int {CSetPiece})
function CSetPiece_SetCornerA<thiscall, 0x499120>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetCornerB<thiscall, 0x499150>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetSpawnCoord1<thiscall, 0x499180>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetSpawnCoord2<thiscall, 0x4991B0>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetTargetCoord1<thiscall, 0x4991E0>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetTargetCoord2<thiscall, 0x499210>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_GetCornerAX<thiscall, 0x499240>(self: int {CSetPiece}): float
function CSetPiece_GetCornerAY<thiscall, 0x499260>(self: int {CSetPiece}): float
function CSetPiece_GetCornerBX<thiscall, 0x499280>(self: int {CSetPiece}): float
function CSetPiece_GetCornerBY<thiscall, 0x4992A0>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord1X<thiscall, 0x4992C0>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord1Y<thiscall, 0x4992E0>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord2X<thiscall, 0x499300>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord2Y<thiscall, 0x499320>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord1X<thiscall, 0x499340>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord1Y<thiscall, 0x499360>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord2X<thiscall, 0x499380>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord2Y<thiscall, 0x4993A0>(self: int {CSetPiece}): float
function CSetPiece_CSetPiece<thiscall, 0x4993C0>(self: int {CSetPiece})
function CSetPieces_AddOne<cdecl, 0x499500>(type: int, cornerA: int {CVector2D}, cornerB: int {CVector2D}, spawnCoord1: int {CVector2D}, targetCoord1: int {CVector2D}, spawnCoord2: int {CVector2D}, targetCoord2: int {CVector2D})
function CSetPieces_Init<cdecl, 0x4994F0>()
function CSetPieces_Load<cdecl, 0x5D3CA0>(): int
function CSetPieces_Save<cdecl, 0x5D3C70>(): int
function CSetPieces_Update<cdecl, 0x49AA00>()
function CShinyTexts_Init<cdecl, 0x7221B0>()
function CShinyTexts_RenderOutGeometryBuffer<cdecl, 0x7221C0>()
function CShinyTexts_Render<cdecl, 0x724890>()
function CShinyTexts_RegisterOne<cdecl, 0x724B60>(cornerAa: int {CVector}, cornerBa: int {CVector}, cornerBb: int {CVector}, cornerAb: int {CVector}, u1: float, v1: float, u2: float, v2: float, u3: float, v3: float, u4: float, v4: float, red: int, green: int, blue: int, alpha: int, maxDistance: float)
function CShotInfo_Initialise<cdecl, 0x739B60>()
function CShotInfo_Shutdown<cdecl, 0x739C20>()
function CShotInfo_AddShot<cdecl, 0x739C30>(creator: int, weaponType: int {eWeaponType}, origin: int {CVector}, target: int {CVector}): int
function CShotInfo_GetFlameThrowerShotPosn<cdecl, 0x739DE0>(shotId: int, outPosn: int): int
function CShotInfo_Update<cdecl, 0x739E60>()
function CSpecialFX_AddWeaponStreak<cdecl, 0x7233F0>(weaponType: int)
function CSpecialFX_Init<cdecl, 0x7268F0>()
function CSpecialFX_Render<cdecl, 0x726AD0>()
function CSpecialFX_Render2DFXs<cdecl, 0x721660>()
function CSpecialFX_ReplayStarted<cdecl, 0x721D30>()
function CSpecialFX_Shutdown<cdecl, 0x723390>()
function CSpecialFX_Update<cdecl, 0x726AA0>()
function CSpecialPlateHandler_Init<thiscall, 0x6F2D10>(self: int {CSpecialPlateHandler})
function CSpecialPlateHandler_Find<thiscall, 0x6F2D30>(self: int {CSpecialPlateHandler}, carGenId: int, outText: int): int
function CSpecialPlateHandler_Add<thiscall, 0x6F2D90>(self: int {CSpecialPlateHandler}, carGenId: int, plateText: int)
function CSpecialPlateHandler_Remove<thiscall, 0x6F2DD0>(self: int {CSpecialPlateHandler}, plateTextId: int)
function CStats_GetStatID<cdecl, 0x558DE0>(stat: int): int
function CStats_GetStatType<cdecl, 0x558E30>(stat: int): int
function CStats_GetStatValue<cdecl, 0x558E40>(stat: int): float
function CStats_GetTimesMissionAttempted<cdecl, 0x558E70>(missionId: int): int
function CStats_RegisterMissionAttempted<cdecl, 0x558E80>(missionId: int)
function CStats_RegisterMissionPassed<cdecl, 0x558EA0>(missionId: int)
function CStats_PopulateFavoriteRadioStationList<cdecl, 0x558EC0>(): int
function CStats_GetFullFavoriteRadioStationList<cdecl, 0x558F90>(): int
function CStats_FindMostFavoriteRadioStation<cdecl, 0x558FA0>(): int
function CStats_FindLeastFavoriteRadioStation<cdecl, 0x559010>(): int
function CStats_FindCriminalRatingNumber<cdecl, 0x559080>(): int
function CStats_GetPercentageProgress<cdecl, 0x5591E0>(): float
function CStats_BuildStatLine<cdecl, 0x559230>(line: int, pValue1: int, metrics: int, pValue2: int, type: int)
function CStats_ConvertToMins<cdecl, 0x559540>(value: int): int
function CStats_ConvertToSecs<cdecl, 0x559560>(value: int): int
function CStats_SafeToShowThisStat<cdecl, 0x559590>(stat: int): int
function CStats_CheckForThreshold<cdecl, 0x5595F0>(pValue: int, range: float): int
function CStats_IsStatCapped<cdecl, 0x559630>(stat: int): int
function CStats_ProcessReactionStatsOnDecrement<cdecl, 0x559730>(stat: int)
function CStats_CheckForStatsMessage<cdecl, 0x559760>()
function CStats_LoadStatUpdateConditions<cdecl, 0x559860>()
function CStats_LoadActionReactionStats<cdecl, 0x5599B0>()
function CStats_FindMaxNumberOfGroupMembers<cdecl, 0x559A50>(): int
function CStats_GetFatAndMuscleModifier<cdecl, 0x559AF0>(statMod: int {eStatModAbilities}): float
function CStats_DecrementStat<cdecl, 0x559FA0>(stat: int, value: float)
function CStats_SetStatValue<cdecl, 0x55A070>(stat: int, value: float)
function CStats_RegisterFastestTime<cdecl, 0x55A0B0>(stat: int, time: int)
function CStats_RegisterBestPosition<cdecl, 0x55A160>(stat: int, position: int)
function CStats_FindCriminalRatingString<cdecl, 0x55A210>(): int
function CStats_ConstructStatLine<cdecl, 0x55A780>(arg0: int, arg1: int): int
function CStats_ProcessReactionStatsOnIncrement<cdecl, 0x55B900>(stat: int)
function CStats_DisplayScriptStatUpdateMessage<cdecl, 0x55B980>(state: int, stat: int, value: float)
function CStats_UpdateRespectStat<cdecl, 0x55BC50>(arg0: int)
function CStats_UpdateSexAppealStat<cdecl, 0x55BF20>()
function CStats_Init<cdecl, 0x55C0C0>()
function CStats_IncrementStat<cdecl, 0x55C180>(stat: int, value: float)
function CStats_SetNewRecordStat<cdecl, 0x55C410>(stat: int, value: float)
function CStats_UpdateFatAndMuscleStats<cdecl, 0x55C470>(value: int)
function CStats_UpdateStatsWhenSprinting<cdecl, 0x55C660>()
function CStats_UpdateStatsWhenRunning<cdecl, 0x55C6F0>()
function CStats_UpdateStatsWhenCycling<cdecl, 0x55C780>(arg0: int {bool}, bmx: int)
function CStats_UpdateStatsWhenSwimming<cdecl, 0x55C990>(arg0: int {bool}, arg1: int {bool})
function CStats_UpdateStatsWhenDriving<cdecl, 0x55CAC0>(vehicle: int {CVehicle})
function CStats_UpdateStatsWhenFlying<cdecl, 0x55CC00>(vehicle: int {CVehicle})
function CStats_UpdateStatsWhenOnMotorBike<cdecl, 0x55CD60>(bike: int)
function CStats_UpdateStatsWhenWeaponHit<cdecl, 0x55CEB0>(weaponType: int)
function CStats_UpdateStatsWhenFighting<cdecl, 0x55CFA0>()
function CStats_UpdateStatsOnRespawn<cdecl, 0x55CFC0>()
function CStats_UpdateStatsAddToHealth<cdecl, 0x55D030>(addToHealth: int)
function CStats_ModifyStat<cdecl, 0x55D090>(stat: int, value: float)
function CStats_Save<cdecl, 0x5D3B40>(): int
function CStats_Load<cdecl, 0x5D3BF0>(): int
/// Returns the index of the named script in CStreamedScript
function CStreamedScripts_FindStreamedScript<thiscall, 0x470740>(cStreamedScripts: int, scriptname: string): int
function CStreamedScripts_FindStreamedScriptQuiet<thiscall, 0x4706F0>(self: int {CStreamedScripts}, scriptName: int): int
function CStreamedScripts_GetProperIndexFromIndexUsedByScript<thiscall, 0x470810>(self: int {CStreamedScripts}, scmIndex: int): int
function CStreamedScripts_GetStreamedScriptFilename<thiscall, 0x470900>(self: int {CStreamedScripts}, index: int): int
function CStreamedScripts_GetStreamedScriptWithThisStartAddress<thiscall, 0x470910>(self: int {CStreamedScripts}, dataPtr: int): int
function CStreamedScripts_Initialise<thiscall, 0x470660>(self: int {CStreamedScripts})
function CStreamedScripts_LoadStreamedScript<thiscall, 0x470840>(self: int {CStreamedScripts}, stream: int, index: int)
function CStreamedScripts_ReInitialise<thiscall, 0x4706A0>(self: int {CStreamedScripts})
function CStreamedScripts_ReadStreamedScriptData<thiscall, 0x470750>(self: int {CStreamedScripts})
function CStreamedScripts_RegisterScript<thiscall, 0x4706C0>(self: int {CStreamedScripts}, scriptName: int): int
function CStreamedScripts_RemoveStreamedScriptFromMemory<thiscall, 0x4708E0>(self: int {CStreamedScripts}, index: int)
function CStreamedScripts_StartNewStreamedScript<thiscall, 0x470890>(self: int {CStreamedScripts}, index: int): int
function CStreaming_AddEntity<cdecl, 0x409650>(a2: int): int
function CStreaming_AddImageToList<cdecl, 0x407610>(lpFileName: int, bNotPlayerImg: int {bool}): int
function CStreaming_AddToLoadedVehiclesList<cdecl, 0x408000>(): int
function CStreaming_AreAnimsUsedByRequestedModels<cdecl, 0x407AD0>(animFileIndex: int): int
function CStreaming_AreTexturesUsedByRequestedModels<cdecl, 0x409A90>(txdIndex: int): int
function CStreaming_ConvertBufferToObject<cdecl, 0x40C6B0>(pFileContect: int, index: int, channelIndex: int): int
function CStreaming_DeleteLeastUsedEntityRwObject<cdecl, 0x409760>(bNotOnScreen: int {bool}, streamingFlags: int): int
function CStreaming_DeleteRwObjectsBehindCameraInSectorList<cdecl, 0x409940>(list: int, memoryToCleanInBytes: int): int
function CStreaming_DeleteRwObjectsNotInFrustumInSectorList<cdecl, 0x4099E0>(list: int, memoryToCleanInBytes: int): int
function CStreaming_FindMIPedSlotForInterior<cdecl, 0x407FB0>(randFactor: int): int
function CStreaming_FinishLoadingLargeFile<cdecl, 0x408CB0>(fileName: int, modelIndex: int): int
function CStreaming_FlushChannels<cdecl, 0x40E460>(): int
function CStreaming_FlushRequestList<cdecl, 0x40E4E0>(): int
function CStreaming_GetDefaultCabDriverModel<cdecl, 0x407D50>(): int
function CStreaming_GetDefaultCopCarModel<cdecl, 0x407C50>(bIncludeCopBike: int): int
function CStreaming_GetDefaultCopModel<cdecl, 0x407C00>(): int
function CStreaming_GetDefaultFiremanModel<cdecl, 0x407D40>(): int
function CStreaming_GetDefaultMedicModel<cdecl, 0x407D20>(): int
function CStreaming_GetDiscInDrive<cdecl, 0x40E9B0>(): int
function CStreaming_GetNextFileOnCd<cdecl, 0x408E20>(pos: int, bNotPriority: int {bool}): int
function CStreaming_HasSpecialCharLoaded<cdecl, 0x407F00>(slot: int): int
function CStreaming_HasVehicleUpgradeLoaded<cdecl, 0x407820>(modelIndex: int): int
function CStreaming_IsCarModelNeededInCurrentZone<cdecl, 0x407DD0>(vehicleModelIndex: int): int
function CStreaming_IsInitialised<cdecl, 0x407600>(): int
function CStreaming_IsObjectInCdImage<cdecl, 0x407800>(modelInex: int): int
function CStreaming_IsVeryBusy<cdecl, 0x4076A0>(): int
function CStreaming_ProcessLoadingChannel<cdecl, 0x40E170>(channelIndex: int): int
function CStreaming_ReInit<cdecl, 0x40E560>(): int
function CStreaming_RemoveLeastUsedModel<cdecl, 0x40CFD0>(streamingFlags: int): int
function CStreaming_RemoveLoadedVehicle<cdecl, 0x40C020>(): int
function CStreaming_RemoveLoadedZoneModel<cdecl, 0x40B340>(): int
function CStreaming_RemoveUnusedModelsInLoadedList<cdecl, 0x407AC0>(): int
function CStreaming_StreamAmbulanceAndMedic<cdecl, 0x40A2A0>(bStreamForAccident: int {bool}): int
function CStreaming_StreamFireEngineAndFireman<cdecl, 0x40A400>(bStreamForFire: int {bool}): int
function CStreaming_WeAreTryingToPhaseVehicleOut<cdecl, 0x407F80>(modelIndex: int): int
function CStreamingInfo_AddToList<thiscall, 0x407480>(self: int {CStreamingInfo}, listStart: int)
function CStreamingInfo_GetCdPosn<thiscall, 0x407570>(self: int {CStreamingInfo}): int
function CStreamingInfo_GetCdPosnAndSize<thiscall, 0x4075A0>(self: int {CStreamingInfo}, cdPosn: int, cdSize: int): int
function CStreamingInfo_GetCdSize<thiscall, 0x407590>(self: int {CStreamingInfo}): int
function CStreamingInfo_GetNext<thiscall, 0x407520>(self: int {CStreamingInfo}): int
function CStreamingInfo_GetPrev<thiscall, 0x407540>(self: int {CStreamingInfo}): int
function CStreamingInfo_InList<thiscall, 0x407560>(self: int {CStreamingInfo}): int
function CStreamingInfo_Init<thiscall, 0x407460>(self: int {CStreamingInfo})
function CStreamingInfo_RemoveFromList<thiscall, 0x4074E0>(self: int {CStreamingInfo})
function CStreamingInfo_SetCdPosnAndSize<thiscall, 0x4075E0>(self: int {CStreamingInfo}, cdPosn: int, cdSize: int)
function CStuckCarCheck_AddCarToCheck<thiscall, 0x465970>(self: int {CStuckCarCheck}, carHandle: int, distance: int, time: int, a5: int, bStuck: int, bFlipped: int, bWarp: int, pathId: int)
function CStuckCarCheck_AttemptToWarpVehicle<thiscall, 0x463A60>(self: int {CStuckCarCheck}, vehicle: int {CVehicle}, origin: int, orientation: float): int
function CStuckCarCheck_ClearStuckFlagForCar<thiscall, 0x463C40>(self: int {CStuckCarCheck}, carHandle: int)
function CStuckCarCheck_HasCarBeenStuckForAWhile<thiscall, 0x463C00>(self: int {CStuckCarCheck}, carHandle: int): int
function CStuckCarCheck_Init<thiscall, 0x4639E0>(self: int {CStuckCarCheck})
function CStuckCarCheck_IsCarInStuckCarArray<thiscall, 0x463C70>(self: int {CStuckCarCheck}, carHandle: int): int
function CStuckCarCheck_Process<thiscall, 0x465680>(self: int {CStuckCarCheck})
function CStuckCarCheck_RemoveCarFromCheck<thiscall, 0x463B80>(self: int {CStuckCarCheck}, carHandle: int)
function CStuckCarCheck_ResetArrayElement<thiscall, 0x463970>(self: int {CStuckCarCheck}, index: int)
function CTaskComplexProstituteSolicit_CTaskComplexProstituteSolicit<thiscall, 0x661A60>(self: int {CTaskComplexProstituteSolicit}, pClient: int)
function CTaskComplexProstituteSolicit_CreateSubTask<thiscall, 0x666360>(self: int {CTaskComplexProstituteSolicit}, taskId: int, pProstitute: int): int
function CTaskComplexProstituteSolicit_GetRidOfPlayerProstitute<cdecl, 0x661D30>()
function CTaskComplexProstituteSolicit_IsTaskValid<cdecl, 0x661BB0>(pProstitute: int, pClient: int): int
function CTaskUtilityLineUpPedWithCar_GetLocalPositionToOpenCarDoor<thiscall, 0x64FC10>(self: int {CTaskUtilityLineUpPedWithCar}, unused: int, pVehicle: int {CVehicle}, arg3: float, pAnimBlendAssoc: int): int
function CTaskUtilityLineUpPedWithCar_ProcessPed<thiscall, 0x6513A0>(self: int {CTaskUtilityLineUpPedWithCar}, pPed: int, pVehicle: int {CVehicle}, pAnimBlendAssoc: int)
function CTaskUtilityLineUpPedWithCar_GetPositionToOpenCarDoor<thiscall, 0x650A80>(self: int {CTaskUtilityLineUpPedWithCar}, unused: int, pVehicle: int {CVehicle}, arg2: float, pAnimBlendAssoc: int): int
function CTheCarGenerators_CreateCarGenerator<cdecl, 0x6F31A0>(x: float, y: float, z: float, angle: float, modelId: int, color1: int, color2: int, forceSpawn: int, alarmChances: int, doorLockChances: int, minDelay: int, maxDelay: int, iplId: int, bOwnedbyplayer: int): int
function CTheScripts_AddScriptCheckpoint<cdecl, 0x4935A0>(atX: float, atY: float, atZ: float, pointToX: float, pointToY: float, pointToZ: float, radius: float, type: int): int
function CTheScripts_AddScriptEffectSystem<cdecl, 0x492F90>(a1: int): int
function CTheScripts_AddScriptSearchLight<cdecl, 0x493000>(startX: float, startY: float, startZ: float, entity: int, targetX: float, targetY: float, targetZ: float, targetRadius: float, baseRadius: float): int
function CTheScripts_AddScriptSphere<cdecl, 0x483B30>(id: int, posn: int {CVector}, radius: float): int
function CTheScripts_AddToSwitchJumpTable<cdecl, 0x470390>(switchValue: int, switchLabelLocalAddress: int): int
function CTheScripts_CheckStreamedScriptVersion<cdecl, 0x464FF0>(arg1: int, arg2: int): int
function CTheScripts_GetActualScriptThingIndex<cdecl, 0x4839A0>(index: int, type: int): int
function CTheScripts_GetNewUniqueScriptThingIndex<cdecl, 0x483720>(index: int, type: int {char}): int
function CTheScripts_GetScriptIndexFromPointer<cdecl, 0x464D20>(thread: int): int
function CTheScripts_GetUniqueScriptThingIndex<cdecl, 0x4810C0>(playergroup: int, type: int): int
function CTheScripts_HasVehicleModelBeenBlockedByScript<cdecl, 0x46A890>(modelindex: int): int
function CTheScripts_IsEntityWithinAnySearchLight<cdecl, 0x493960>(pEntity: int, pIndex: int): int
function CTheScripts_IsEntityWithinSearchLight<cdecl, 0x493900>(index: int, pEntity: int): int
function CTheScripts_IsPedStopped<cdecl, 0x486110>(ped: int): int
function CTheScripts_IsPlayerOnAMission<cdecl, 0x464D50>(): int
function CTheScripts_IsPointWithinSearchLight<cdecl, 0x493280>(pointPosn: int, index: int): int
function CTheScripts_IsVehicleStopped<cdecl, 0x4861F0>(pVehicle: int {CVehicle}): int
function CTheScripts_RemoveFromWaitingForScriptBrainArray<cdecl, 0x46ABC0>(a1: int, modelIndex: int): int
function CTheScripts_ScriptAttachAnimGroupToCharModel<cdecl, 0x474800>(modelId: int, ifpName: int): int
function CTheScripts_StartNewScript<cdecl, 0x464C90>(startIp: int): int
function CTheScripts_StartNewScript<cdecl, 0x464C90>(startIp: int, index: int): int
function CTimeCycle_AddOne<cdecl, 0x55FF40>(box: int {CBox&}, farclip: int, extracolor: int, strength: float, falloff: float, lodDistMult: float)
function CTimeCycle_CalcColoursForPoint<cdecl, 0x5603D0>(point: int {CVector}, pCurrentColourSet: int)
function CTimeCycle_FindFarClipForCoors<cdecl, 0x5616E0>(camPos: int {CVector})
function CTimeCycle_FindTimeCycleBox<cdecl, 0x55FFD0>(pos: int {CVector}, outbox: int, interpolation: int, bCheckLod: int {bool}, bCheckFar: int {bool}, exclude: int)
function CTimeCycle_GetAmbientBlue<cdecl, 0x560350>(): float
function CTimeCycle_GetAmbientBlue_BeforeBrightness<cdecl, 0x5603B0>(): float
function CTimeCycle_GetAmbientBlue_Obj<cdecl, 0x560380>(): float
function CTimeCycle_GetAmbientGreen<cdecl, 0x560340>(): float
function CTimeCycle_GetAmbientGreen_BeforeBrightness<cdecl, 0x5603A0>(): float
function CTimeCycle_GetAmbientGreen_Obj<cdecl, 0x560370>(): float
function CTimeCycle_GetAmbientRed<cdecl, 0x560330>(): float
function CTimeCycle_GetAmbientRed_BeforeBrightness<cdecl, 0x560390>(): float
function CTimeCycle_GetAmbientRed_Obj<cdecl, 0x560360>(): float
function CTimeCycle_InitForRestart<cdecl, 0x5601F0>()
function CTimeCycle_Initialise<cdecl, 0x5BBAC0>()
function CTimeCycle_SetConstantParametersForPostFX<cdecl, 0x560210>()
function CTimeCycle_Shutdown<cdecl, 0x5601E0>()
function CTimeCycle_StartExtraColour<cdecl, 0x55FEC0>(colour: int, bNoExtraColorInterior: int {bool})
function CTimeCycle_StopExtraColour<cdecl, 0x55FF20>(bNoExtraColorInterior: int {bool})
function CTimeCycle_Update<cdecl, 0x561760>()
function CUpsideDownCarCheck_AddCarToCheck<thiscall, 0x4638D0>(self: int {CUpsideDownCarCheck}, carHandle: int)
function CUpsideDownCarCheck_AreAnyCarsUpsideDown<thiscall, 0x4638A0>(self: int {CUpsideDownCarCheck}): int
function CUpsideDownCarCheck_HasCarBeenUpsideDownForAWhile<thiscall, 0x463940>(self: int {CUpsideDownCarCheck}, carHandle: int): int
function CUpsideDownCarCheck_Init<thiscall, 0x463810>(self: int {CUpsideDownCarCheck})
function CUpsideDownCarCheck_RemoveCarFromCheck<thiscall, 0x463910>(self: int {CUpsideDownCarCheck}, carHandle: int)
function CUpsideDownCarCheck_UpdateTimers<thiscall, 0x4655E0>(self: int {CUpsideDownCarCheck})
function CUpsideDownCarCheck_IsCarUpsideDown<cdecl, 0x4655A0>(pVehicle: int {CVehicle}): int
function CUpsideDownCarCheck_IsCarUpsideDown<cdecl, 0x4655A0>(carhandle: int): int
function CVisibilityPlugins_AtomicConstructor<cdecl, 0x732150>(object: int)
function CVisibilityPlugins_AtomicCopyConstructor<cdecl, 0x732170>(object: int, originalObject: int)
function CVisibilityPlugins_AtomicDestructor<cdecl, 0x7321A0>(object: int): int
function CVisibilityPlugins_CalculateFadingAtomicAlpha<cdecl, 0x732500>(pBaseModelInfo: int, pEntity: int, arg3: float): int
function CVisibilityPlugins_ClearAtomicFlag<cdecl, 0x732310>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_ClearAtomicFlag<cdecl, 0x732330>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_ClearClumpForAllAtomicsFlag<cdecl, 0x732350>(pRpClump: int, flag: int)
function CVisibilityPlugins_ClumpConstructor<cdecl, 0x732E10>(object: int)
function CVisibilityPlugins_ClumpCopyConstructor<cdecl, 0x732200>(object: int, originalObject: int)
function CVisibilityPlugins_ClumpDestructor<cdecl, 0x732220>(object: int): int
function CVisibilityPlugins_DefaultVisibilityCB<cdecl, 0x732A30>(): int
function CVisibilityPlugins_FrameConstructor<cdecl, 0x7321B0>(object: int)
function CVisibilityPlugins_FrameCopyConstructor<cdecl, 0x7321D0>(object: int, originalObject: int)
function CVisibilityPlugins_FrameDestructor<cdecl, 0x7321F0>(arg0: int, arg1: int, arg2: int): int
function CVisibilityPlugins_FrustumSphereCB<cdecl, 0x732A40>(pRpClump: int): int
function CVisibilityPlugins_GetAtomicId<cdecl, 0x732370>(pRpAtomic: int): int
function CVisibilityPlugins_GetAtomicModelInfo<cdecl, 0x732260>(pRpAtomic: int): int
function CVisibilityPlugins_GetClumpAlpha<cdecl, 0x732B20>(pRpClump: int): int
function CVisibilityPlugins_GetClumpModelInfo<cdecl, 0x732AC0>(pRpClump: int): int
function CVisibilityPlugins_GetDistanceSquaredFromCamera<cdecl, 0x732C80>(pRwFrame: int): float
function CVisibilityPlugins_GetDistanceSquaredFromCamera<cdecl, 0x732CC0>(pRwV3D: int): float
function CVisibilityPlugins_GetDotProductWithCameraVector<cdecl, 0x7326D0>(atomicMat: int, rootMat: int, flags: int): float
function CVisibilityPlugins_GetFrameHierarchyId<cdecl, 0x732A20>(pRwFrame: int): int
function CVisibilityPlugins_GetModelInfoIndex<cdecl, 0x732250>(pRpAtomic: int): int
function CVisibilityPlugins_GetUserValue<cdecl, 0x7323A0>(pRpAtomic: int): int
function CVisibilityPlugins_InitAlphaAtomicList<cdecl, 0x734530>()
function CVisibilityPlugins_InitAlphaEntityList<cdecl, 0x734540>()
function CVisibilityPlugins_Initialise<cdecl, 0x733A20>()
function CVisibilityPlugins_InsertAtomicIntoReallyDrawLastList<cdecl, 0x733E10>(pRpAtomic: int, arg2: float): int
function CVisibilityPlugins_InsertEntityIntoReallyDrawLastList<cdecl, 0x733E50>(pEntity: int, arg2: float): int
function CVisibilityPlugins_InsertEntityIntoSortedList<cdecl, 0x734570>(pEntity: int, distance: float): int
function CVisibilityPlugins_IsAtomicVisible<cdecl, 0x732990>(pRpAtomic: int): int
function CVisibilityPlugins_IsClumpVisible<cdecl, 0x732AE0>(pRpClump: int): int
function CVisibilityPlugins_PluginAttach<cdecl, 0x732E30>(): int
function CVisibilityPlugins_RenderAlphaAtomic<cdecl, 0x732480>(pRpAtomic: int, dwAlpha: int)
function CVisibilityPlugins_RenderAlphaAtomics<cdecl, 0x733E90>()
function CVisibilityPlugins_RenderAtomicWithAlphaCB<cdecl, 0x732660>(pRpAtomic: int, pData: int)
function CVisibilityPlugins_RenderBoatAlphaAtomics<cdecl, 0x733EC0>()
function CVisibilityPlugins_RenderEntity<cdecl, 0x732B40>(entity: int, unused: int {bool}, arg3: float)
function CVisibilityPlugins_RenderFadingAtomic<cdecl, 0x732610>(pBaseModelInfo: int, pRpAtomic: int, dwAlpha: int)
function CVisibilityPlugins_RenderFadingClump<cdecl, 0x732680>(pBaseModelInfo: int, pRpClump: int, dwAlpha: int)
function CVisibilityPlugins_RenderFadingClumpCB<cdecl, 0x733630>(pRpAtomic: int)
function CVisibilityPlugins_RenderFadingEntities<cdecl, 0x733F10>()
function CVisibilityPlugins_RenderFadingUnderwaterEntities<cdecl, 0x7337D0>()
function CVisibilityPlugins_RenderHeliRotorAlphaCB<cdecl, 0x7340B0>(pRpAtomic: int)
function CVisibilityPlugins_RenderHeliTailRotorAlphaCB<cdecl, 0x734170>(pRpAtomic: int)
function CVisibilityPlugins_RenderObjNormalAtomic<cdecl, 0x7323E0>(pRpAtomic: int)
function CVisibilityPlugins_RenderPedCB<cdecl, 0x7335B0>(pRpAtomic: int)
function CVisibilityPlugins_RenderPlayerCB<cdecl, 0x732870>(pRpAtomic: int)
function CVisibilityPlugins_RenderReallyDrawLastObjects<cdecl, 0x733800>()
function CVisibilityPlugins_RenderTrainHiDetailAlphaCB<cdecl, 0x734240>(pRpAtomic: int)
function CVisibilityPlugins_RenderTrainHiDetailCB<cdecl, 0x733330>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailAlphaCB<cdecl, 0x733F80>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailAlphaCB_BigVehicle<cdecl, 0x734370>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailAlphaCB_Boat<cdecl, 0x7344A0>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailCB<cdecl, 0x733240>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailCB_BigVehicle<cdecl, 0x733420>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailCB_Boat<cdecl, 0x733550>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleLoDetailCB_Boat<cdecl, 0x7334F0>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleReallyLowDetailCB<cdecl, 0x7331E0>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleReallyLowDetailCB_BigVehicle<cdecl, 0x732820>(pRpAtomic: int)
function CVisibilityPlugins_RenderWeaponCB<cdecl, 0x733670>(pRpAtomic: int)
function CVisibilityPlugins_RenderWeaponPedsForPC<cdecl, 0x732F30>()
function CVisibilityPlugins_SetAtomicFlag<cdecl, 0x7322D0>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_SetAtomicFlag<cdecl, 0x7322B0>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_SetAtomicId<cdecl, 0x732230>(pRpAtomic: int, id: int)
function CVisibilityPlugins_SetAtomicRenderCallback<cdecl, 0x7328A0>(pRpAtomic: int, renderCb: int)
function CVisibilityPlugins_SetClumpAlpha<cdecl, 0x732B00>(pRpClump: int, dwAlpha: int)
function CVisibilityPlugins_SetClumpModelInfo<cdecl, 0x733750>(pRpClump: int, pClumpModelInfo: int)
function CVisibilityPlugins_SetFrameHierarchyId<cdecl, 0x732A00>(pRwFrame: int, id: int)
function CVisibilityPlugins_SetRenderWareCamera<cdecl, 0x7328C0>(pRwCamera: int)
function CVisibilityPlugins_SetUserValue<cdecl, 0x732380>(pRpAtomic: int, value: int)
function CVisibilityPlugins_SetupVehicleVariables<cdecl, 0x733160>(pRpClump: int)
function CVisibilityPlugins_Shutdown<cdecl, 0x732EB0>()
function CVisibilityPlugins_VehicleVisibilityCB<cdecl, 0x7336F0>(pRpClump: int): int
function CVisibilityPlugins_VehicleVisibilityCB_BigVehicle<cdecl, 0x732AB0>(pRpClump: int): int
function CWanted_InitialiseStaticVariables<cdecl, 0x561C70>()
function CWanted_UpdateWantedLevel<thiscall, 0x561C90>(self: int {CWanted})
function CWanted_SetMaximumWantedLevel<cdecl, 0x561E70>(level: int)
function CWanted_AreMiamiViceRequired<thiscall, 0x561F30>(self: int {CWanted}): int
function CWanted_AreSwatRequired<thiscall, 0x561F40>(self: int {CWanted}): int
function CWanted_AreFbiRequired<thiscall, 0x561F60>(self: int {CWanted}): int
function CWanted_AreArmyRequired<thiscall, 0x561F80>(self: int {CWanted}): int
function CWanted_NumOfHelisRequired<thiscall, 0x561FA0>(self: int {CWanted}): int
function CWanted_ResetPolicePursuit<cdecl, 0x561FD0>()
function CWanted_ClearQdCrimes<thiscall, 0x561FE0>(self: int {CWanted})
function CWanted_AddCrimeToQ<thiscall, 0x562000>(self: int {CWanted}, crimeType: int {eCrimeType}, crimeId: int, posn: int {CVector const&}, bAlreadyReported: int {bool}, bPoliceDontReallyCare: int {bool}): int
function CWanted_ReportCrimeNow<thiscall, 0x562120>(self: int {CWanted}, crimeType: int {eCrimeType}, posn: int {CVector const&}, bPoliceDontReallyCare: int {bool})
function CWanted_RemovePursuitCop<cdecl, 0x562300>(cop: int, copsArray: int, copsCounter: int)
function CWanted_IsInPursuit<thiscall, 0x562330>(self: int {CWanted}, cop: int): int
function CWanted_UpdateEachFrame<cdecl, 0x562360>()
function CWanted_Initialise<thiscall, 0x562390>(self: int {CWanted})
function CWanted_Reset<thiscall, 0x562400>(self: int {CWanted})
function CWanted_RegisterCrime<thiscall, 0x562410>(self: int {CWanted}, crimeType: int {eCrimeType}, posn: int {CVector const&}, crimeId: int, bPoliceDontReallyCare: int {bool})
function CWanted_RegisterCrime_Immediately<thiscall, 0x562430>(self: int {CWanted}, crimeType: int {eCrimeType}, posn: int {CVector const&}, crimeId: int, bPoliceDontReallyCare: int {bool})
function CWanted_SetWantedLevel<thiscall, 0x562470>(self: int {CWanted}, level: int)
function CWanted_CheatWantedLevel<thiscall, 0x562540>(self: int {CWanted}, level: int)
function CWanted_SetWantedLevelNoDrop<thiscall, 0x562570>(self: int {CWanted}, level: int)
function CWanted_ClearWantedLevelAndGoOnParole<thiscall, 0x5625A0>(self: int {CWanted})
/// Returns the number of police within the given radius of the specified position
function CWanted_WorkOutPolicePresence<cdecl, 0x5625F0>(posX: float, posY: float, posZ: float, radius: float): int
function CWanted_UpdateCrimesQ<thiscall, 0x562760>(self: int {CWanted})
function CWanted_IsClosestCop<thiscall, 0x5627D0>(self: int {CWanted}, ped: int, numCopsToCheck: int): int
function CWanted_ComputePursuitCopToDisplace<cdecl, 0x562B00>(cop: int, copsArray: int): int
function CWanted_RemovePursuitCop<thiscall, 0x562C10>(self: int {CWanted}, cop: int)
function CWanted_RemoveExcessPursuitCops<thiscall, 0x562C40>(self: int {CWanted})
function CWanted_Update<thiscall, 0x562C90>(self: int {CWanted})
function CWanted_CanCopJoinPursuit<cdecl, 0x562F60>(cop: int, maxCopsCount: int, copsArray: int, copsCounter: int): int
function CWanted_CanCopJoinPursuit<thiscall, 0x562FB0>(self: int {CWanted}, cop: int): int
function CWanted_SetPursuitCop<thiscall, 0x563060>(self: int {CWanted}, cop: int): int
function CWeapon_InitialiseWeapons<cdecl, 0x73A300>()
function CWeapon_ShutdownWeapons<cdecl, 0x73A330>()
function CWeapon_UpdateWeapons<cdecl, 0x73A360>()
function CWeapon_Shutdown<thiscall, 0x73A380>(self: int {CWeapon})
function CWeapon_AddGunshell<thiscall, 0x73A3E0>(self: int {CWeapon}, creator: int {CEntity}, position: int {CVector}, direction: int {CVector2D}, size: float)
function CWeapon_GenerateDamageEvent<cdecl, 0x73A530>(victim: int, creator: int, weaponType: int {eWeaponType}, damageFactor: int, pedPiece: int {ePedPieceTypes}, direction: int)
function CWeapon_LaserScopeDot<thiscall, 0x73A8D0>(self: int {CWeapon}, outCoord: int, outSize: int): int
function CWeapon_FireSniper<thiscall, 0x73AAC0>(self: int {CWeapon}, creator: int, victim: int, target: int): int
function CWeapon_Reload<thiscall, 0x73AEB0>(self: int {CWeapon}, owner: int)
function CWeapon_IsTypeMelee<thiscall, 0x73B1C0>(self: int {CWeapon}): int
function CWeapon_IsType2Handed<thiscall, 0x73B1E0>(self: int {CWeapon}): int
function CWeapon_IsTypeProjectile<thiscall, 0x73B210>(self: int {CWeapon}): int
function CWeapon_CanBeUsedFor2Player<cdecl, 0x73B240>(weaponType: int {eWeaponType}): int
function CWeapon_HasWeaponAmmoToBeUsed<thiscall, 0x73B2A0>(self: int {CWeapon}): int
function CWeapon_ProcessLineOfSight<cdecl, 0x73B300>(startPoint: int {CVector const&}, endPoint: int {CVector const&}, outColPoint: int {CColPoint&}, outEntity: int, weaponType: int {eWeaponType}, arg5: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, arg11: int {bool}, doIgnoreCameraCheck: int {bool}): int
function CWeapon_StopWeaponEffect<thiscall, 0x73B360>(self: int {CWeapon})
function CWeapon_TargetWeaponRangeMultiplier<cdecl, 0x73B380>(victim: int, weaponOwner: int): float
/// Initializes a CWeapon struct
function CWeapon_ctor<thiscall, 0x73B430>(self: int {CWeapon}, weaponType: int {eWeaponType}, ammo: int): int {CWeapon}
function CWeapon_Initialise<thiscall, 0x73B4A0>(self: int {CWeapon}, weaponType: int {eWeaponType}, ammo: int, owner: int)
function CWeapon_DoBulletImpact<thiscall, 0x73B550>(self: int {CWeapon}, owner: int, victim: int, startPoint: int, endPoint: int, colPoint: int, arg5: int)
function CWeapon_TakePhotograph<thiscall, 0x73C1F0>(self: int {CWeapon}, owner: int, point: int): int
function CWeapon_SetUpPelletCol<thiscall, 0x73C710>(self: int {CWeapon}, numPellets: int, owner: int, victim: int, point: int {CVector&}, colPoint: int {CColPoint&}, outMatrix: int {CMatrix&})
function CWeapon_FireInstantHitFromCar2<thiscall, 0x73CBA0>(self: int {CWeapon}, startPoint: int {CVector}, endPoint: int {CVector}, vehicle: int {CVehicle}, owner: int)
function CWeapon_DoDoomAiming<cdecl, 0x73CDC0>(owner: int, start: int, end: int)
function CWeapon_DoTankDoomAiming<cdecl, 0x73D1E0>(vehicle: int {CVehicle}, owner: int, startPoint: int, endPoint: int)
function CWeapon_DoDriveByAutoAiming<cdecl, 0x73D720>(owner: int, vehicle: int {CVehicle}, startPoint: int, endPoint: int, canAimVehicles: int {bool})
function CWeapon_Update<thiscall, 0x73DB40>(self: int {CWeapon}, owner: int)
function CWeapon_CanBeUsedFor2Player<thiscall, 0x73DEF0>(self: int {CWeapon}): int
function CWeapon_FindNearestTargetEntityWithScreenCoors<cdecl, 0x73E240>(screenX: float, screenY: float, range: float, point: int {CVector}, outX: int, outY: int)
function CWeapon_EvaluateTargetForHeatSeekingMissile<cdecl, 0x73E560>(entity: int, posn: int {CVector&}, direction: int {CVector&}, distanceMultiplier: float, fromVehicle: int {bool}, lastEntity: int): float
function CWeapon_DoWeaponEffect<thiscall, 0x73E690>(self: int {CWeapon}, origin: int {CVector}, target: int {CVector})
function CWeapon_FireAreaEffect<thiscall, 0x73E800>(self: int {CWeapon}, firingEntity: int, origin: int, targetEntity: int, target: int): int
function CWeapon_FireInstantHitFromCar<thiscall, 0x73EC40>(self: int {CWeapon}, vehicle: int {CVehicle}, leftSide: int {bool}, rightSide: int {bool}): int
function CWeapon_CheckForShootingVehicleOccupant<cdecl, 0x73F480>(pCarEntity: int, colPoint: int, weaponType: int {eWeaponType}, origin: int {CVector const&}, target: int {CVector const&}): int
function CWeapon_PickTargetForHeatSeekingMissile<cdecl, 0x73F910>(origin: int {CVector}, direction: int {CVector}, distanceMultiplier: float, ignoreEntity: int, fromVehicle: int {bool}, lastEntity: int): int
function CWeapon_FireFromCar<thiscall, 0x73FA20>(self: int {CWeapon}, vehicle: int {CVehicle}, leftSide: int {bool}, rightSide: int {bool})
function CWeapon_FireInstantHit<thiscall, 0x73FB10>(self: int {CWeapon}, firingEntity: int, origin: int, muzzlePosn: int, targetEntity: int, target: int, originForDriveBy: int, arg6: int {bool}, muzzle: int {bool}): int
function CWeapon_FireProjectile<thiscall, 0x741360>(self: int {CWeapon}, firingEntity: int, origin: int, targetEntity: int, target: int, force: float): int
function CWeapon_FireM16_1stPerson<thiscall, 0x741C00>(self: int {CWeapon}, owner: int): int
function CWeapon_Fire<thiscall, 0x742300>(self: int {CWeapon}, firingEntity: int, origin: int, muzzlePosn: int, targetEntity: int, target: int, originForDriveBy: int): int
/// Initializes a CWeaponEffects struct
function CWeaponEffects_ctor<thiscall, 0x742A90>(self: int {CWeaponEffects}): int {CWeaponEffects}
/// Deinitializes the CWeaponEffects struct
function CWeaponEffects_dtor<thiscall, 0x742AA0>(self: int {CWeaponEffects})
function CWeaponEffects_Init<cdecl, 0x742AB0>()
function CWeaponEffects_Shutdown<cdecl, 0x742B80>()
function CWeaponEffects_IsLockedOn<cdecl, 0x742BD0>(crosshairId: int): int
function CWeaponEffects_MarkTarget<cdecl, 0x742BF0>(crosshairId: int, posn: int {CVector}, red: int, green: int, blue: int, alpha: int, size: float, arg7: int)
function CWeaponEffects_ClearCrossHair<cdecl, 0x742C60>(crosshairId: int)
function CWeaponEffects_ClearCrossHairs<cdecl, 0x742C80>()
function CWeaponEffects_ClearCrossHairImmediately<cdecl, 0x742CA0>(crosshairId: int)
function CWeaponEffects_ClearCrossHairsImmediately<cdecl, 0x742CC0>()
function CWeaponEffects_Render<cdecl, 0x742CF0>()
function CWeather_AddRain<cdecl, 0x72A9A0>()
function CWeather_AddSandStormParticles<cdecl, 0x72A820>()
function CWeather_FindWeatherTypesList<cdecl, 0x72A520>(): int
function CWeather_ForceWeather<cdecl, 0x72A4E0>(weatherType: int)
function CWeather_ForceWeatherNow<cdecl, 0x72A4F0>(weatherType: int)
function CWeather_ForecastWeather<cdecl, 0x72A590>(weatherType: int, numSteps: int): int
function CWeather_Init<cdecl, 0x72A480>()
function CWeather_ReleaseWeather<cdecl, 0x72A510>()
function CWeather_RenderRainStreaks<cdecl, 0x72AF70>()
function CWeather_SetWeatherToAppropriateTypeNow<cdecl, 0x72A790>()
function CWeather_Update<cdecl, 0x72B850>()
function CWeather_UpdateInTunnelness<cdecl, 0x72B630>()
function CWeather_UpdateWeatherRegion<cdecl, 0x72A640>(posn: int)
function CWorld_ResetLineTestOptions<cdecl, 0x5631C0>()
function CWorld_Initialise<cdecl, 0x5631E0>()
function CWorld_Add<cdecl, 0x563220>(entity: int)
function CWorld_Remove<cdecl, 0x563280>(entity: int)
function CWorld_ProcessVerticalLineSectorList<cdecl, 0x5632B0>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, outEntity: int, doSeeThroughCheck: int {bool}, collPoly: int): int
function CWorld_CastShadowSectorList<cdecl, 0x563390>(ptrList: int {CPtrList&}, arg1: float, arg2: float, arg3: float, arg4: float)
function CWorld_ProcessForAnimViewer<cdecl, 0x5633D0>()
function CWorld_ProcessPedsAfterPreRender<cdecl, 0x563430>()
function CWorld_ClearScanCodes<cdecl, 0x563470>()
function CWorld_FindObjectsInRangeSectorList<cdecl, 0x563500>(arg0: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsOfTypeInRangeSectorList<cdecl, 0x5635C0>(modelId: int, ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_ProcessVerticalLineSectorList_FillGlobeColPoints<cdecl, 0x5636A0>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, outEntity: int, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_RemoveStaticObjects<cdecl, 0x563840>()
function CWorld_TestForBuildingsOnTopOfEachOther<cdecl, 0x563950>(ptrList: int {CPtrList&})
function CWorld_TestForUnusedModels<cdecl, 0x5639D0>(ptrList: int {CPtrList&}, models: int)
function CWorld_RemoveEntityInsteadOfProcessingIt<cdecl, 0x563A10>(entity: int)
function CWorld_CallOffChaseForAreaSectorListVehicles<cdecl, 0x563A80>(ptrList: int {CPtrList&}, x1: float, y1: float, x2: float, y2: float, arg5: float, arg6: float, arg7: float, arg8: float)
function CWorld_CallOffChaseForAreaSectorListPeds<cdecl, 0x563D00>(ptrList: int {CPtrList&}, x1: float, y1: float, x2: float, y2: float, arg5: float, arg6: float, arg7: float, arg8: float)
function CWorld_CameraToIgnoreThisObject<cdecl, 0x563F40>(entity: int): int
function CWorld_FindPlayerSlotWithPedPointer<cdecl, 0x563FA0>(ptr: int): int
function CWorld_FindPlayerSlotWithRemoteVehiclePointer<cdecl, 0x563FD0>(ptr: int): int
function CWorld_FindPlayerSlotWithVehiclePointer<cdecl, 0x564000>(vehicle: int {CVehicle})
function CWorld_ShutDown<cdecl, 0x564050>()
function CWorld_ClearForRestart<cdecl, 0x564360>()
function CWorld_ProcessVerticalLineSector_FillGlobeColPoints<cdecl, 0x564420>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_ProcessVerticalLineSector<cdecl, 0x564500>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, outColPoint: int {CColPoint&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_CastShadow<cdecl, 0x564600>(x1: float, y1: float, x2: float, y2: float)
function CWorld_ProcessAttachedEntities<cdecl, 0x5647F0>()
function CWorld_GetIsLineOfSightSectorListClear<cdecl, 0x564970>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}): int
function CWorld_FindObjectsInRange<cdecl, 0x564A20>(point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindObjectsOfTypeInRange<cdecl, 0x564C70>(modelId: int, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindLodOfTypeInRange<cdecl, 0x564ED0>(modelId: int, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsKindaCollidingSectorList<cdecl, 0x565000>(ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsIntersectingCubeSectorList<cdecl, 0x5650E0>(ptrList: int {CPtrList&}, cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsIntersectingAngledCollisionBoxSectorList<cdecl, 0x565200>(ptrList: int {CPtrList&}, box: int {CBox const&}, transform: int {CMatrix const&}, point: int {CVector const&}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindMissionEntitiesIntersectingCubeSectorList<cdecl, 0x565300>(ptrList: int {CPtrList&}, cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int, vehiclesList: int {bool}, pedsList: int {bool}, objectsList: int {bool})
function CWorld_FindNearestObjectOfTypeSectorList<cdecl, 0x565450>(modelId: int, ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outEntities: int, outDistance: int)
function CWorld_RemoveReferencesToDeletedObject<cdecl, 0x565510>(entity: int)
function CWorld_SetPedsOnFire<cdecl, 0x565610>(x1: float, y1: float, x2: float, y2: float, fireCreator: int)
function CWorld_SetPedsChoking<cdecl, 0x565800>(x1: float, y1: float, x2: float, y2: float, gasCreator: int)
function CWorld_SetCarsOnFire<cdecl, 0x5659F0>(x1: float, y1: float, x2: float, y2: float, fireCreator: int)
function CWorld_SprayPaintWorld<cdecl, 0x565B70>(posn: int {CVector&}, outDir: int {CVector&}, radius: float, processTagAlphaState: int {bool}): int
function CWorld_RemoveFallenPeds<cdecl, 0x565CB0>()
function CWorld_RemoveFallenCars<cdecl, 0x565E80>()
function CWorld_UseDetonator<cdecl, 0x5660B0>(creator: int)
function CWorld_TestSphereAgainstSectorList<cdecl, 0x566140>(ptrList: int {CPtrList&}, sphereCenter: int {CVector}, sphereRadius: float, ignoreEntity: int, doCameraIgnoreCheck: int {bool}): int
function CWorld_PrintCarChanges<cdecl, 0x566420>()
function CWorld_TestForBuildingsOnTopOfEachOther<cdecl, 0x5664A0>()
function CWorld_TestForUnusedModels<cdecl, 0x566510>()
function CWorld_ClearCarsFromArea<cdecl, 0x566610>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float)
function CWorld_ClearPedsFromArea<cdecl, 0x5667F0>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float)
function CWorld_SetAllCarsCanBeDamaged<cdecl, 0x5668F0>(enable: int {bool})
function CWorld_ExtinguishAllCarFiresInArea<cdecl, 0x566950>(point: int {CVector}, radius: float)
function CWorld_CallOffChaseForArea<cdecl, 0x566A60>(x1: float, y1: float, x2: float, y2: float)
function CWorld_StopAllLawEnforcersInTheirTracks<cdecl, 0x566C10>()
function CWorld_FindUnsuspectingTargetCar<cdecl, 0x566C90>(point: int {CVector}, playerPosn: int {CVector}): int
function CWorld_FindUnsuspectingTargetPed<cdecl, 0x566DA0>(point: int {CVector}, playerPosn: int {CVector}): int
function CWorld_ProcessLineOfSightSectorList<cdecl, 0x566EE0>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, outColPoint: int {CColPoint&}, maxTouchDistance: int {float&}, outEntity: int, doSeeThroughCheck: int {bool}, doIgnoreCameraCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CWorld_ProcessVerticalLine<cdecl, 0x5674E0>(origin: int {CVector const&}, distance: float, outColPoint: int {CColPoint&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_ProcessVerticalLine_FillGlobeColPoints<cdecl, 0x567620>(origin: int {CVector const&}, distance: float, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_TriggerExplosionSectorList<cdecl, 0x567750>(ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, visibleDistance: float, victim: int, creator: int, processVehicleBombTimer: int {bool}, damage: float)
function CWorld_Process<cdecl, 0x5684A0>()
function CWorld_GetIsLineOfSightSectorClear<cdecl, 0x568AD0>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doIgnoreCameraCheck: int {bool}): int
function CWorld_FindObjectsKindaColliding<cdecl, 0x568B80>(point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindObjectsIntersectingCube<cdecl, 0x568DD0>(cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindObjectsIntersectingAngledCollisionBox<cdecl, 0x568FF0>(box: int {CBox const&}, transform: int {CMatrix const&}, point: int {CVector const&}, x1: float, y1: float, x2: float, y2: float, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindMissionEntitiesIntersectingCube<cdecl, 0x569240>(cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int, vehicles: int {bool}, peds: int {bool}, objects: int {bool})
function CWorld_FindNearestObjectOfType<cdecl, 0x5693F0>(modelId: int, point: int {CVector const&}, radius: float, b2D: int {bool}, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}): int {CEntity}
/// Returns the Z-coordinate at given XY coordinates
function CWorld_FindGroundZForCoord<cdecl, 0x569660>(x: float, y: float): float
function CWorld_FindGroundZFor3DCoord<cdecl, 0x5696C0>(x: float, y: float, z: float, outResult: int, outEntity: int): float
function CWorld_FindRoofZFor3DCoord<cdecl, 0x569750>(x: float, y: float, z: float, outResult: int): float
function CWorld_FindLowestZForCoord<cdecl, 0x5697F0>(x: float, y: float): float
function CWorld_RepositionOneObject<cdecl, 0x569850>(object: int)
function CWorld_TestSphereAgainstWorld<cdecl, 0x569E20>(sphereCenter: int {CVector}, sphereRadius: float, arg2: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doCameraIgnoreCheck: int {bool}): int
function CWorld_ClearExcitingStuffFromArea<cdecl, 0x56A0D0>(point: int {CVector const&}, radius: float, bRemoveProjectilesAndShadows: int)
function CWorld_GetIsLineOfSightClear<cdecl, 0x56A490>(origin: int {CVector const&}, target: int {CVector const&}, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}): int
function CWorld_ProcessLineOfSightSector<cdecl, 0x56B5E0>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, outColPoint: int {CColPoint&}, maxTouchDistance: int {float&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CWorld_TriggerExplosion<cdecl, 0x56B790>(point: int {CVector const&}, radius: float, visibleDistance: float, victim: int, creator: int, processVehicleBombTimer: int {bool}, damage: float)
function CWorld_SetWorldOnFire<cdecl, 0x56B910>(x: float, y: float, z: float, radius: float, fireCreator: int)
function CWorld_RepositionCertainDynamicObjects<cdecl, 0x56B9C0>()
function CWorld_ProcessLineOfSight<cdecl, 0x56BA00>(origin: int {CVector const&}, target: int {CVector const&}, outColPoint: int {CColPoint&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}, doShootThroughCheck: int {bool}): int
function D3DIndexDataBuffer_Clear<thiscall, 0x7301D0>(self: int {D3DIndexDataBuffer})
function D3DIndexDataBuffer_Destroy<thiscall, 0x730200>(self: int {D3DIndexDataBuffer})
function D3DIndexDataBuffer_GetTotalDataSize<thiscall, 0x7303B0>(self: int {D3DIndexDataBuffer}): int
function D3DIndexDataBuffer_Resize<thiscall, 0x730330>(self: int {D3DIndexDataBuffer}, newCapacity: int)
function D3DIndexDataBuffer_Setup<thiscall, 0x730190>(self: int {D3DIndexDataBuffer}, format: int, _f4: int, capacity: int)
function D3DIndexDataBuffer_Pop<thiscall, 0x730250>(self: int {D3DIndexDataBuffer}): int
function D3DIndexDataBuffer_Pop<thiscall, 0x730270>(self: int {D3DIndexDataBuffer}, indexCount: int): int
function D3DIndexDataBuffer_Push<thiscall, 0x730300>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DIndexDataBuffer_PushWithoutIncreasingCounter<thiscall, 0x730B00>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DIndexDataBuffer_Pop<thiscall, 0x730250>(self: int {D3DIndexDataBuffer}): int
function D3DIndexDataBuffer_Pop<thiscall, 0x730270>(self: int {D3DIndexDataBuffer}, indexCount: int): int
function D3DIndexDataBuffer_Push<thiscall, 0x730300>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DIndexDataBuffer_PushWithoutIncreasingCounter<thiscall, 0x730B00>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DResourceSystem_CancelBuffering<cdecl, 0x730900>()
function D3DResourceSystem_GetTotalIndexDataSize<cdecl, 0x7307F0>(): int
function D3DResourceSystem_GetTotalPixelsSize<cdecl, 0x730660>(): int
function D3DResourceSystem_Init<cdecl, 0x730830>()
function D3DResourceSystem_SetUseD3DResourceBuffering<cdecl, 0x730AC0>(bUse: int {bool})
function D3DResourceSystem_Shutdown<cdecl, 0x730A00>()
function D3DResourceSystem_TidyUpD3DIndexBuffers<cdecl, 0x730740>(count: int)
function D3DResourceSystem_TidyUpD3DTextures<cdecl, 0x7305E0>(count: int)
function D3DResourceSystem_CreateIndexBuffer<cdecl, 0x7306A0>(numIndices: int, format: int, ppIndexBuffer: int): int
function D3DResourceSystem_CreateTexture<cdecl, 0x730510>(width: int, height: int, format: int, ppTexture: int): int
function D3DResourceSystem_DestroyIndexBuffer<cdecl, 0x730D30>(pIndexBuffer: int)
function D3DResourceSystem_DestroyTexture<cdecl, 0x730B70>(pTexture: int)
function D3DResourceSystem_CreateIndexBuffer<cdecl, 0x7306A0>(numIndices: int, format: int, ppIndexBuffer: int): int
function D3DResourceSystem_CreateTexture<cdecl, 0x730510>(width: int, height: int, format: int, ppTexture: int): int
function D3DResourceSystem_DestroyIndexBuffer<cdecl, 0x730D30>(pIndexBuffer: int)
function D3DResourceSystem_DestroyTexture<cdecl, 0x730B70>(pTexture: int)
function D3DTextureBuffer_Clear<thiscall, 0x72FEC0>(self: int {D3DTextureBuffer})
function D3DTextureBuffer_Destroy<thiscall, 0x72FEF0>(self: int {D3DTextureBuffer})
function D3DTextureBuffer_GetTotalDataSize<thiscall, 0x7300A0>(self: int {D3DTextureBuffer}): int
function D3DTextureBuffer_Resize<thiscall, 0x730020>(self: int {D3DTextureBuffer}, newCapacity: int)
function D3DTextureBuffer_Setup<thiscall, 0x72FE80>(self: int {D3DTextureBuffer}, format: int, width: int, bOneLevel: int, capacity: int)
function D3DTextureBuffer_Pop<thiscall, 0x72FF40>(self: int {D3DTextureBuffer}): int
function D3DTextureBuffer_Pop<thiscall, 0x72FF60>(self: int {D3DTextureBuffer}, format: int, width: int, height: int, bOneLevel: int): int
function D3DTextureBuffer_Push<thiscall, 0x72FFF0>(self: int {D3DTextureBuffer}, texture: int): int
function D3DTextureBuffer_PushWithoutIncreasingCounter<thiscall, 0x730AD0>(self: int {D3DTextureBuffer}, texture: int): int
function D3DTextureBuffer_Pop<thiscall, 0x72FF40>(self: int {D3DTextureBuffer}): int
function D3DTextureBuffer_Pop<thiscall, 0x72FF60>(self: int {D3DTextureBuffer}, format: int, width: int, height: int, bOneLevel: int): int
function D3DTextureBuffer_Push<thiscall, 0x72FFF0>(self: int {D3DTextureBuffer}, texture: int): int
function D3DTextureBuffer_PushWithoutIncreasingCounter<thiscall, 0x730AD0>(self: int {D3DTextureBuffer}, texture: int): int
/// Initializes a List_c struct
function List_c_ctor<thiscall, 0x4A8DD0>(self: int {List_c}): int {List_c}
/// Deinitializes the List_c struct
function List_c_dtor<thiscall, 0x4A8DE0>(self: int {List_c})
function List_c_RemoveHead<thiscall, 0x4A8E70>(self: int {List_c}): int
function List_c_GetItemOffset<thiscall, 0x4A9010>(self: int {List_c}, bFromHead: int {bool}, iOffset: int): int
/// Initializes a ListItem_c struct
function ListItem_c_ctor<thiscall, 0x4A8DB0>(self: int {ListItem_c}): int {ListItem_c}
/// Deinitializes the ListItem_c struct
function ListItem_c_dtor<thiscall, 0x4A8DC0>(self: int {ListItem_c})
/// Finds the first occurrence of a substring in a string and returns a pointer to it
function strstr<cdecl, 0x822650>(str: string, substr: string): string
/// Interprets a floating point value in a byte string pointed to by str
function atof<cdecl, 0x823CEE>(str: string): float
/// Interprets an integer value in a byte string pointed to by str. The implied radix is always 10
function atoi<cdecl, 0x82258E>(str: string): int
/// Initializes a CVehicle struct
function CVehicle_ctor<thiscall, 0x6D5F10>(self: int {CVehicle}): int {CVehicle}
/// Checks if the vehicle is a law enforcement vehicle
function CVehicle_IsLawEnforcementVehicle<thiscall, 0x6D2370>(self: int {CVehicle}): int {bool}
/// Returns a position vector of the given player. Use -1 for the current player
function FindPlayerCentreOfWorld<cdecl, 0x56E250>(playerIndex: int): int {CVector}
/// Returns a pointer to the player's current vehicle, or 0 if the player is not driving any
function FindPlayerVehicle<cdecl, 0x56E0D0>(playerIndex: int, includeRemote: int {bool}): int {CVehicle}
/// Returns a position vector of the given player. Use -1 for the current player
function FindPlayerCoors<cdecl, 0x56E010>(result: int {CVector}, playerIndex: int): int {CVector}
/// Calculates the value of the arc sine of num. Num should be in range -1.0..1.0
function asin<cdecl, 0x4207A0>(num: float): float
/// Destroys a RwTexture created with RwTextureCreate
function RwTextureDestroy<cdecl, 0x7F3820>(texture: int)
/// Creates new RwTexture from RwRaster
function RwTextureCreate<cdecl, 0x7F37C0>(raster: int)
/// Creates new RwRaster
function RwRasterCreate<cdecl, 0x7FB230>(width: int, height: int, depth: int, flags: int): int
/// Destroys an instance of RwRaster
function RwRasterDestroy<cdecl, 0x7FB020>(raster: int)
/// Adds the vehicle upgrade to the vehicle referenced by pointer
function CVehicle_AddVehicleUpgrade<thiscall, 0x6E3290>(self: int {CVehicle}, upgradeId: int {model_object})
/// Removes all unused models from the memory
function CStreaming_RemoveAllUnusedModels<cdecl, 0x40CF80>()
/// Returns the length of the given byte string
function strlen<cdecl, 0x718690>(str: string): int
/// Copies memory block from src to dest address. Source and destination CAN NOT overlap!
function MemCpy<cdecl, 0x4F2F40>(dest: int, src: int, size: int)
/// Copies memory block from src to dest address. Source and destination can overlap
function memmove<cdecl, 0x822A20>(dest: int, src: int, size: int)
/// Returns CRC hash of the buffer with the given length
function CKeyGen_GetKey<cdecl, 0x53CED0>(buf: int, size: int): int
/// Copies null terminated string from src address to dest address
function strcpy<cdecl, 0x826590>(dest: int, src: int)
/// Copies at most count characters from null terminated string at address src to address dest
function strncpy<cdecl, 0x821F40>(dest: int, src: int, count: int)
/// Copies value into each byte of size sized memory block at address
function memset<cdecl, 0x82D4C0>(address: int, value: int, size: int)
/// Calculates tangent of an angle in radians
function tan<cdecl, 0x5096F0>(angle: float): float
/// Creates RwImage containing current screen contents
function RsGrabScreen<cdecl, 0x619AF0>(rwCamera: int): int
/// Sets random number generator seed
function srand<cdecl, 0x821B11>(seed: int)
/// Creates light/shadow texture projection on the ground
function CShadows_AddPermanentShadow<cdecl, 0x706F60>(type: int, texture: int, posPtr: int, topX: float, topY: float, rightX: float, rightY: float, intensity: int, red: int, green: int, blue: int, drawDistance: float, time: int, upDistance: float)
/// Scales vector to make its lenght equal to 1.0
function CVector_Normalize<thiscall, 0x59C910>(self: int {CVector})
/// Calculates the dot product of two 3d vectors
function CVector_DotProduct<thiscall, 0x40FDB0>(self: int {CVector}, other: int {CVector}): float