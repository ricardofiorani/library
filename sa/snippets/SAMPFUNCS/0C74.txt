// This example demonstrates the entire SfTimer Class usage
{$CLEO}
{$USE SAMPFUNCS}
{$USE debug}
{$USE bitwise}
NOP

Debugger.Enable()

    // initialize variables
int unrefIterations = 0
int refIterations = 0
    //

    // initialize SfTimers
SfTimer enablerTimerObj = 0 // 0 = undefined SfTimer, to be used later
if not SfTimer.Create(2000, @UnreferencedTimerCallback_DoSomething, 0) // don't retrieve the SfTimer handle, let's call it "UnrefTimer"
then Debugger.Trace("Failed to Create Unreferenced SfTimer")
end
SfTimer myTimerObj
if not myTimerObj = SfTimer.Create(5000, @ReferencedTimerCallback_DoSomething) // myTimerObj now contains the handle of this newly created SfTimer
then
    myTimerObj = 0 // 0 = undefined SfTimer
    Debugger.Trace("Failed to Create myTimerObj")
end
    //

while true
    wait 0
    int isActive
    if myTimerObj.IsActive()
    then isActive = true
    else isActive = false
    end
    int interval = myTimerObj.GetInterval()
    int elapsedTime = myTimerObj.GetElapsedTime()
    int timeLeft = myTimerObj.GetTimeLeft()
    Text.PrintFormattedNow("isActive=%d interval=%d~n~elapsedTime=%d timeLeft=%d", 100, isActive, interval, elapsedTime, timeLeft)
end

:ReferencedTimerCallback_Enabler
    Debugger.Trace("myTimerObj resumed")
    if enablerTimerObj <> 0 // SfTimer is defined
    then
        if not enablerTimerObj.Delete() // delete this temporary oneshot timer
        then Debugger.Trace("Failed to Delete enablerTimerObj")
        end
    else Debugger.Trace("myTimerObj is Undefined")
    end
    enablerTimerObj = 0 // 0 = undefined SfTimer
    int newInterval = Math.RandomIntInRange(4000, 7000)
    myTimerObj.Reset() // the timeStamp variable sometimes overshootof reset myTimerObj's interval
    myTimerObj.SetInterval(newInterval) // update myTimerObj's interval
    myTimerObj.Reset() // reset myTimerObj's interval again
    if not myTimerObj.SetStatus(true) // resume myTimerObj
    then Debugger.Trace("Failed to Resume myTimerObj")
    end
Sf.CmdRet() // end of callback

:ReferencedTimerCallback_DoSomething
    refIterations++
    Debugger.Trace("Callback of myTimerObj with ID %X triggered %u times", myTimerObj, refIterations)
    int isResumed = refIterations % 5
    if isResumed == false
    then
        if not myTimerObj.SetStatus(false) // pause myTimerObj
        then Debugger.Trace("Failed to Pause myTimerObj")
        end
        if not enablerTimerObj = SfTimer.Create(7000, @ReferencedTimerCallback_Enabler) // temporarily create a oneshot timer
        then
            myTimerObj = 0 // 0 = undefined SfTimer
            Debugger.Trace("Failed to Create enablerTimerObj")
        end
        Debugger.Trace("myTimerObj Paused for 7 seconds")
    end
Sf.CmdRet() // end of callback

:UnreferencedTimerCallback_DoSomething
    unrefIterations++
    Debugger.Trace("UnrefTimer's Callback triggered %u times", unrefIterations)
Sf.CmdRet() // end of callback