// Example: Prints the Received chat message like a GXT
{$USE CLEO}
{$USE SAMPFUNCS}
NOP

// wait for SAMP to fully initialize
REPEAT
    wait 100
UNTIL SAMP_IS_AVAILABLE

if not SAMP_RAKNET_HOOK_INCOMING_RPC {callbackLabel} @RPC_In
then TERMINATE_THIS_CUSTOM_SCRIPT
end

// We don't need an infinite loop for this example. So we pause the thread to lessen the workload for our processor
SF_PAUSE_THREAD {id} 0 // Pauses the main thread
// This part of the main thread will not be reached unless the main thread is resumed
TERMINATE_THIS_CUSTOM_SCRIPT

:RPC_In // all received Packet will detour here first
    int packetId = SAMP_RAKNET_HOOK_GET_PARAM {type} SampRakNetHookParam.PacketId
    if packetId == SampRpc.Chat
    then
        Bitstream bitStream = SAMP_RAKNET_HOOK_GET_PARAM {type} SampRakNetHookParam.Bitstream
        int strLen = SAMP_RAKNET_BITSTREAM_READ bitStream {dataType} SampBitStreamDataType.BYTE
            // print_* commands crashes the game when the string exceeds 125, so we need to limit it
        if strLen > 124
        then strLen = 124
        end
            //
        strLen++ // include null terminator
        int strBuf = ALLOCATE_MEMORY {size} strLen
        strLen-- // revert back to original string length
        SAMP_RAKNET_BITSTREAM_READ_ARRAY bitStream {buffer} strBuf {size} strLen
        WRITE_MEMORY_WITH_OFFSET {address} strBuf {offset} strLen {size} 1 {value} 0 // assure the end of the string is a null terminator
        PRINT_STRING_NOW strBuf
        FREE_MEMORY {address} strBuf
        SAMP_RAKNET_BITSTREAM_RESET_READ_POINTER bitStream // This assures that RakNet will read the entire data once the detour finishes
    end
SAMP_RAKNET_HOOK_RETURN {unblockData} true // end this callback and allow RakNet to process the data